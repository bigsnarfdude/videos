Feld Yerman at AM, Boyan Pulpo, who's also at AM, and Chris Keys, who's at Louisiana State University. Okay, so just some introduction and motivation for the work I'm about to present. We're interested in modeling dispersive water waves with applications in coastal hydrodynamics. So, some physical processes that we're interested in, tsunami waves. That we're interested in tsunami waves, nonlinear phenomena such as wave shoaling, wave diffraction, and wave breaking in the coastal zones. And our goal, as most of the participants here, is to perform fast and accurate large-scale simulations of these physical processes for the prediction of coastal hazards. On here, we just have some two pictures of the Of the physical processes that I mentioned. This left side here, we have the 2011 Tohoku tsunami approaching the shore in Japan. And then here on the right side is just a typical example of wave shoaling, wave diffraction, and wave breaking off the coast of Para de la Cruz in Oaxaca. Okay, so the starting point, the PDA model of choice that we choose for modeling dispersive water waves is CSA. Modeling dispersive water waves is the Serre equations. So these are also known as the Serre-Grinaki equations, or often just the Grinaki equations in literature. And these are first derived by Sayre in 1953. And we're actually going to consider an extension of this model that was done by Sierra Brisantos in 1987 to include the effects of topography bathymetry. So this is our mathematical starting point. Okay, so the Serre equations. So the Serre equations are a nonlinear system of partial differential equations, and they can be written in the following form. So this first equation, we have the conservation of mass, and the second equation is the conservation of momentum. So the variables that we're dealing with here, h is the water height, it's a function of the spatial variable x and time. Q is the momentum vector, and Z is the known topography map. And so, for those of you familiar with the shallow water equations, this has a very similar form to the shallow water equations. However, the pressure and the source R here are drastically different, I would say. So, the pressure and the topography source are defined as follows. So, P is equal to one half gh squared. So, this is the standard pressure from the shallow water equations. Pressure from the shallow water equations. However, we have these terms here in red that are the dispersive terms. So we have h squared times one-third h double dot plus one-half k dot. And the source term is gh, which is also the typical shallow water source, plus a dispersive source term. So here the dot variables are h dot is the total derivative of the water height or the material derivative, if you will. H double dot is the second total derivative. And k dot is the total derivative of the quantum. Is the total derivative of the quantity V dot brad C. So we can see here that these dispersive terms really give a complicated structure to these are equations. So now some properties of the equations. So the equations are what we call an order of mu squared approximation of the free surface Euler equations for water waves, where mu is the ratio H naught squared over L squared. So here H naught is Squared. So here H naught is the typical water depth and L is the typical horizontal length scale. So I wanted to say this because you can think of the Sair equations as a more realistic model for water waves than just the shallow water equation. So if you will, it's kind of the next step towards reproducing realistic water waves. So to give context, the shallow water equations are just an order of mu approximation of the Euler equations. Of the Euler equations. So the Sarah equations are often classified as strongly nonlinear and weakly dispersive. So actually, the Serre equations support exact solutions that are solitary waves, and the linearized form of the equations also support smooth periodic solutions. And then, of course, given the structure of the pressure and the source term, so the equations do not form a first-order hyperbolic system. So, this last point is very important. So, what's the drawback when trying to solve the equations? So, due to the dispersive terms, the pressure mapping P and source R are actually not algebraic quantities. Instead, they are second-order differential operators in space and time. And because of this, so actually, the gradient to the pressure appears in the grading to the pressure appears in the momentum equation. So we don't just have second order derivatives in space, we have up to third order derivatives in space. So this leads to a severe time step restriction when we try to discretize the equations in space and time. And so I call this a dispersive time step restriction that the time step would have to be proportional to the mesh size cube. So if you want to do any high fidelity simulations, this makes it impossible really. Makes it impossible, really, to use a fine mesh. So, really, the question here is: how do we avoid this time step restriction? So, I would say there are currently two popular classes of methods in the literature for avoiding this dispersive time step restriction. The first one is a splitty technique, such as string splitting, which combines both explicit and implicit time stepping. And so, here just some Time stepping. And so here are just some references where this is done. And the second one, which is what we'll follow today, is reinterpreting the dispersive system as a constraint first-order system and then relaxing the constraints. And again, here are some references where this is shown in the literature. Okay, so our goal for today for the talk is to introduce a hyperbolic relaxation technique for solving the SERI equations. The Sair equations. So, this technique will yield a new hyperbolic system that's an approximation to the original model. And then, after we obtain this hyperbolic system, we want to construct a numerical method that's explicit in time under the usual hyperbolic CFL condition, positivity preserving, and well-balanced. So, this is kind of the goal for today. So, the hyperbolic. So, the hyperbolic relaxation technique. And again, so the strategy for this relaxation technique can be thought of as three steps. The first one is: this is, I would say, the usual thing to do is we want to replace the high-order derivatives in the original SARE model with algebraic constraints with extra conservation equations. And so, this will yield a first-order system. The second step is we would like to rely. step is we would like to relax these constraints by introducing penalty-like terms into the equations. And then the third step is we'd like to use an energy argument to obtain a consistent closed form hyperbolic system. So these are just kind of the major brush jokes of this hyperbolic relaxation technique. And so again, the resulting PDE system will be a first-order hyperbolic system that's an approximation to the original Sear equations. Okay, and then so just the, I would say, the strategy for or kind of the motivation why we introduced these constraints. So we have these constraints. Q1, we define it to be h squared. Q3, we define it to be the momentum dotted with the gradient of topography. And we define this extra variable Q2 as minus h squared divergence of the velocity plus three halves q3. So the idea here. So the idea here is we would like to rewrite the dispersive pressure and dispersive source term in an algebraic form. And so we can do that as follows. And again, these are just the major brushstrokes, and I'm kind of glancing over the details here. So the idea is we want to rewrite the pressure, 1 half gh squared plus this kind of ugly dispersive terms here, as just 1 half gh squared minus 1 third hs in red here. In red here. So we would like to have it in this form where it's just algebraic. And similarly, for the topography source term, we rewrite the dispersive parts as minus one half s plus one fourth s tilde. And now the relationships that I'm about to give that relate q1, q2, q3 with these s and s tilde are the following. So So, really, you can think of the pressure being algebraic now, and the source being algebraic now with these S and S tildes if you include these extra three equations for Q1, Q2, and Q3. And so here, this is kind of just a motivation for rewriting the pressure and the DePauc resource term. And the main result is the following: so let U be a smooth function, then U. u be a smooth function, then u solves a dispersive Sare model if and only if this new, I would say, solution vector, u, q1, q2, q3, solves this system here, 2.4. So again, we have the conservation of mass, we have the conservation of momentum with the updated pressure and updated source terms, and we have three extra conservation equations for q1, q2, and q3. And so this holds if you consider q1. holds if you consider q1 is equal to h squared and then q3 is equal to q dot grad z so this is our equivalent lemma and now the idea is we would like to somehow incorporate these constraints into the equations um and this just summarizes what i just said so the non-hydrostatic pressure is now algebraic and we have eliminated the dispersive h dot and h double dot Of H dot and H double dot terms. Okay, so some notation preliminaries for where we actually do the relaxation. So we define Q1 as H eta, Q2 is H omega, and Q3 is H beta. So here, eta, omega, and beta, these are just kind of primitive variables that we introduced just to make the notation a little bit easier. So this is the big point here. Let epsilon. This is the big point here. Let epsilon be a small link scale. So, this epsilon is going to be our relaxation parameter. And later on, we're going to think of epsilon as being the mesh size when the model is approximated in space. So let lambda bar be a non-dimensional number of order unit. So actually, we just take lambda bar to be one for the full for the rest of the talk. And let gamma be some C2 smooth non-negative function such that gamma. negative function such that gamma of one is zero and gamma prime of one is zero. And then let psi be a c0 continuous function. Subset psi times phi is positive for octa psi in the real line. Okay, and this is just some preliminaries. And now the idea, this is the relaxation step. So we want to replace s in, I guess I should go back here, we want to replace s in this tilde. We want to replace s in this tilde. And so we replaced s by this quantity here. And the whole purpose of this term really is to enforce that q1 goes to h squared as epsilon goes to 0. So you see epsilon is in the denominator here. And then we replace s tilde in 2.4e by this term here. And again, the purpose of this term is to enforce our other constraint, q3. other constraint q3 basically q dot grad z as epsilon goes to zero. So after we replace s in the soldier, the idea is to work through the derivation of an energy inequality, which is not shown here for brevity. And so we do this to find the proper expression for the relaxed pressure so that the new hyperbolic system is a consistent approximation to the original model. Okay, so then to summarize. So then to summarize, we arrive at this hyperbolic relax system where now the pressure P, you can shown in red, it's defined by 2.5 F. The source R is defined by 2.5G. And just to highlight some things here, as epsilon goes to zero, this new hyperbolic system converges to the original model. So solving this hyperbolic system will This hyperbolic system will avoid the dispersive time step restriction. And however, because there's no free lunch, the system is an order of epsilon approximation to the original model. So this is the PDE model that we want to discretize in space and time. Okay, and just for the sake of showing the details in the numerical illustrations, these are the functions that we pick for gap. These are the functions that we pick for gamma and phi. And so picking gamma and phi will give just some algebraic formulations in 2.5f and 2.5g. Okay, so if I claim that the model was hyperbolic, here is the hyperbolicity condition. So 2.5 is hyperbolic if and only if 2.9 holds. So with this So, with this choice here of gamma, the function is always hyperbolic. So, the hyperbolicity does depend on which function of gamma you choose. Okay, and now I had mentioned that we worked through this derivation of the energy inequality, so I'm not going to show the details of that, but I will show the results. But first, I want to give the energy equation for the original SARE model. Sayer model. So if let U be a smooth solution to Sare equations, then the following holds true. We have the time derivative of some energy plus the divergence of the flux is equal to zero. So the energy is given by 2.10A. So these blue terms are the terms induced by the dispersion, and 2.10b is the flux. Now we have an energy inequality for our relaxed system, where now the energy is given by 2.11a. By 2.11a and the flux is given by 2.11b. Now, these terms in blue for the energy for the relaxed system, these blue terms correspond directly to the blue terms at the top. So as epsilon goes to zero, these blue terms will converge to those. And this term in red, this is the extra energy term induced by the relaxation. So again, you can see as epsilon goes to zero, this term goes away. And then we recover the original. And then we recover the original energy for the Sarah equations. Okay, so these are the properties for the hyperbolic model. So to summarize, the hyperbolic relaxation technique is to arrive at this hyperbolic system. And we want to do this to construct a method that's explicit in time. I actually want to use all the techniques that Dr. German mentioned. That Dr. German mentioned in his previous talk, along with Manuel and Laura and everyone else. Okay, so the numerical method. So the goal is to construct a numerical method using continuous finite elements that explicit in time, high order in space and time, positivity preserving, and well balanced. And so the strategy for constructing such a method can be thought Constructing such a method can be thought of as a three-step process. So we like to construct a low-order space scheme that's positivity and preserving and well-bound. So the idea behind the low-order scheme is that it's robust, however, not accurate. Two, we'd like to construct an intermediate high-order in space scheme that's very accurate, but not robust. And then three, we'd like to combine the two schemes and apply a convex limiting technique to the intermediate high-order solution. To the intermediate high-order solution. So, this convex limiting technique will correct or limit, if you will, the intermediate high-order solution with physical bounds obtained from the low-order method. And so, this is just the strategy. Okay, so our finite element setting, we have a shape regular family of matching meshes. We have these phi i, which are the positive shape functions with the partition of unity property. functions with the partition of unity property. We have our scalar continuous finite element space here, 3.1. And then our solution is actually going to, so we have the vector valued approximation for our solution variable in this space to the power of d plus 3. Okay. So some mesh dependent quantities that are used in the scheme. We have the Used in the scheme, we have the entries of the mass matrix. So it's the integral over the domain of phi i, phi j, the lumped mass matrix here, the cig, the cij matrix that was also shown in Dr. Gramoslav, and the unit normal of the Cij vector. Okay, so the low order method can be shown as follows. So here we have the Here we have the, so this is a forward order, low order update. So we have the discretization of the time derivative here. This R, so I'm going to show what these quantities are in a bit. This is the discretization of the dispersive SARE source terms. Fij, this is our numerical flux. And these quantities on the right side, these are our graph viscosity terms of. The terms over here. So dij and μij are the low order graph viscosity coefficients, which are positive and symmetric. So they need to be symmetric so the scheme can be conservative. And they're defined as follows. So here I'm not going to talk about the details. I'm just showing it for completeness. Fij, this is the numerical flux. So this term here, this is the approximation to the gas dynamics part of the flux. Dynamics part of the flux. And this is the discretization of the pressure. So, this term here in red, this is important for well balancing. So, this is actually the discretization of the shallow water part of the pressure. And so, R is the approximation of the sources. I didn't show it here because it's really long, actually. Okay. And the states U, J, star, and let me go back to where they are. To where they are in the scheme. So these are what we call the star states, and they're introduced for web balancing purposes. Okay. And just a result, if you will. So if we consider the scheme 3.4, so this guy here with the definitions of muij and dij low order here. J low order here, then the scheme is exactly well balanced, and the scheme is positivity preserving under a CFL condition. Okay, and so that's kind of the details behind the low order method. And then we want to consider an intermediate high-order method. And so, really, the biggest changes from the low order method is we now consider the full consistent mass matrix, which I The full consistent mass matrix, which I highlighted here in red, we want to now consider high-order graph viscosity coefficients. And so we, to define Dij high and muij high, we adapt the entropy viscosity methodology introduced in Dr. Guermann's paper in 2011. And so I'm not going to give the details here because this was already shown in the previous talks. But the idea is this method is very accurate. Method is very accurate. However, it's not positivity preserving. And then just a brief note on convex limiting. So to correct the positivity preserving violation of the high order method, we would like to employ the convex limiting technique described in these papers. And again, this is also shown in the previous talks. And the basic idea is to enforce local bounds satisfied by the low order method by limiting the higher order method. By limiting the higher order method. And so, kind of the work that we have been doing with Dr. Mon in the setting for the Sarair equations is paying attention on how to handle source terms. So, really, we do the limiting on the solution without the source terms. And I don't show the details here, but we can discuss more in the discussion later. So, some numerical illustrations that we've worked on. So, to ensure reproducibility of the results, we Reproducibility of the results, we've actually implemented the method described before into three different codes. The first one, it's a Fortrend code written by Dr. Bruman and I, and this uses P1 Lagrange elements. So this one is not available to the public. The second one is Proteus. So Proteus is a Python package for rapidly developing computer models and numerical methods, and it's developed at the U.S. Army Engineer Research and Development Center. US Army Engineer Research and Development Center. I have an internship there. And this also uses P1 elements. So Proteus is public if you just go to this website. And it's also implemented in Rygen. I think Dr. German mentioned Ryogen in his talk earlier. And so Ryoden is a high-performance finite element solver based on the DL2 library. And Ryden uses Q1 element. And Ryoden is also public. Okay, and all the time stepping is done with SSP RK. Is done with SSPRK33. Okay, and here's just a screenshot of the websites for Proteus and Ryogen. Okay, so this is just a simple while balancing test with topography. So here, if you look at this picture on the top right, this is the setup here. We have a conical island as a topography, and we do two different tests. The first test A is where the water height is one meter. So when the water height is one meter, it's actually above this island. And so here I just measure this delta infinity quantity that's defined below. And it essentially just measures how far the numerical solution is from the initial state. And so I go up to time equals t of 10 seconds, and we see that the order is up to machine precision. And these are just two different. Precision. And these are just two different mesh sizes. The second test B, this is when the water height is 0.32 meters. And that's actually the setup for this picture here. This is when the water intersects the island. And the same thing here, the errors, machine precision. So this is just to show that we are well balanced with respect to full wet states and dry wet states. Okay, as I mentioned earlier, the Sarah equations. The Sar equations exhibit exact solutions in the form of solitary waves. So, here we consider a solitary wave propagating over a flat bottom. And so, if you recall, our numerical method is not exactly solving these air equations. And as I mentioned, the penalty that we pay for solving the hyperbolic system is that our system is an order of mesh size away from the original system. Order of mesh heights away from the original solution. So here we'll notice that the rates, this is the rates on the water height using the exact solution to the SARE equations. So our rates are going to be one if we use a second order method. So which is what we should expect. So we're seeing one in the L1, L2, L infinity norms. Okay. And then another exact solution. Exact solution to the Sair equations. This is a steady state solution with topography. And so we have some topography here and the steady state that's also a solitary wave. And then again, here I just show the rates for the L1 norm of the water height. And I show the rates for the L1 norm of their two constraints, that Q1 is equal to H squared and Q3 is equal to Q dot grad C. And this is just to show that, again, we're seeing the Again, we're seeing the expected rate of one for all of these norms. Okay, and so the first experiment that we consider, these are 1D periodic waves propagating over a submerged bar. So the idea is on the left side here, we have periodic waves propagating. And as the water becomes shallower, the waves feel the effect of the bar and they sol and release higher harmonics behind the bar. And release higher harmonics behind the bar. So, kind of just complicated nonlinear processes right in this area. And so, the experiments were done by Beijing Badges in 1994. This is just the setup of the periodic waves. And we have some comparisons with the experimental data at four different wave gauges. So, this is gauge three, which is right here, gauge four, which is also on top of the bar. Gauge five is right behind the bar. And gauge seven is the furthest behind the bar. And gauge seven is the furthest behind the bar. And so we show the solution for three different mesh sizes, and we see that the numerical solutions are converging and that we have reasonably well comparison with the experimental data. Okay, and now we consider a 2D test. So, this is a solitary wave overtopping a conical island on a triangular shelf. And so, these experiments were done by. Up and so these experiments were done by Patrick Lynette at Oregon State University. And so the computation here was done with Proteus. Let me just play the video. So I guess really quick, we have a solitary wave and it's going to come up, interact with the island, go up and come down. And so this also shows that we can handle dry states as well. Okay, and in the next slide, I show the comparison with the experimental data that Patrick Lynette shared. And so, here on the left side, this is the comparison with the wave gauges that measured the Wave gauges that measured the wave elevation at nine different locations. And on the right side, these are the acoustic Doppler velocometers that measured the velocity. So you can see that overall, we match reasonably well with the experiments. And actually, I'm showing here the results from two different codes. It's the Proteus code and the ANM code. And so the Proteus is in black, the ANM code is in blue. And they're actually pretty much. Pretty much on top of each other. It's really hard to see where the difference is. And this just shows that both codes implemented the numerical scheme properly. Okay, the second one, this is an experiment done by Robert Whalen in 1971 at the U.S. Army Engineer Research and Development Center. And so the idea is you have a periodic wavetrain that A periodic wavetrain that propagates over a flat bottom, and then there is a ramp that's a semicircular shape. And so the waves propagate and they focus when they feel the effect of the topography. And so you can kind of see here they kind of increase in height. And so on the right side, it's a comparison with the amplitudes of the first, second, and third order harmonics from the discrete Fourier transform. The discrete Fourier transform. So these black shapes, this is the experimental data. And so the blue line is the first harmonic, the orange line is the second harmonic, and the green line is the third harmonic. And we match the experiments reasonably well again. And so these computations were done with Ryogen using 265,000 QDOS. The next one, this is also a periodic weight test. These are the Periodic wave test. These are the experiments of Birkhoff in 1982. And so the idea is you have a periodic wavetrain that propagates over a slanted ramp with an elliptic shoal. And so this was done to study the refraction and shoaling behind this elliptic bump. And let me just play the video. And so while the video plays, let me mention these were done with the RyAgen software. And so to check our convergence, I did this computation with three different meshes. Did this computation with three different meshes: one mesh with 657,000 DOFs, another one with 2.6 million, and another one with 2.5 million DOFs. And I'll show the results in the next slide. So here's the video. So as the waves feel the effect of the ramp and the bump, they actually show quite a bit in the back here. And then this slide, this is the comparisons with the experimental data. And so here we also have the three different refinements. The blue is the coarsest, orange is the medium, and green is the finest. And green was the 10.5 million degrees of freedom. And you can see that we're converging. And again, we compare reasonably well with the experimental data. Well, with the experimental data. And then this last one is kind of just a nice little video. This is a 2D dam break with dry states and friction. Here, this orange part, this is the dam. So it's a 1.875 meters of water. The dark blue here, these are the dry states. And we have three conical islands for the bathymetry. And here I show the comparison with the shallow water equations and the hyperbolic SAR model using the Raiden software. Using the Ryden software. This was done with 2.4 million degrees of freedom, and the Manning's coefficient was set to 0.02. I believe the bottom one is the shallow water equations, and the top is the hyperbolic SAR model. So you can see the SERI models producing kind of Can see the serum models producing kind of this very complicated structures behind the islands compared to just the shallow water one that's just showing the shocks. Okay, thank you. So, thank you very much for this very interesting talk. Great results. Are there any questions from the audience? Well, maybe then I start with some. Or Manuel, you can start with the question. Yes. Hello, Eric. So this is a simple question. And probably you actually mentioned this in your talk, but I missed it. Did you say how do you select the parameter epsilon? Oh, yes. Yeah. So that's done. It's the mesh size. Maybe I didn't mention it. Yeah. So we actually set epsilon to be the mesh size. And so the idea is as we refine the mesh, the As we refine the mesh, the solution converges to the original model. Oh, okay. Yeah, that makes sense. Thank you. Yes. Any more questions? Well, then I get to my question. Basically, I was wondering, so you get this first order of convergence only because of this consistency error you do by having an epsilon basically consistency error. And I wondered if you choose. And I wondered if you choose epsilon to be H squared or to replace epsilon by epsilon squared, whether you could boost this consistency error to be like quadratic and then have optimal convergence again. But on the other side, you might destroy your stabilizing effect you get from it. So I'm not sure. Did you try it numerically? Yeah. So the problem with changing epsilon to be. So right now, as I mentioned to Manuel, because we're using the mesh size, For epsilon, if we change epsilon to be epsilon squared, we actually change the units of the problem. And so, if we change it to epsilon squared, the units will no longer be consistent. Yeah, so I would say, in my opinion, the consistency error is not so bad. I mean, especially when we compare with the experimental data, I haven't really seen any drawbacks from that. Any drawbacks from that. Yeah, also your assumptions basically they say that you have to use a first-order scheme, so you won't benefit a lot from minimizing that. No, no, no, it's the second order scheme. Polynomials, I mean, sorry. Like you need to have P1 because you have this positivity, non-negativity constraint. And if you want to have a novel basis, I don't know, but I think then you're sort of restricted to P1. No, not really. This is not the issue. Really, this is not the issue. The real issue is if you take epsilon square, h square, or whatever, you can always correct for the dimensions. But then, since these terms are sources, they are treated explicitly, then you're going to go back to the time step being less than h square or h to the cube. So, you're going back to the dispersive time stepping restriction, and you don't want that. Step being a restriction, and you don't want that. Okay, although just as a follow-up question to that, I was just wondering if maybe if you make epsilon to be h square, the time step restriction, would it be h square or would it be h yes? Yes, this is this is yeah, so it would still be better than the perceived um time step restriction, but it's also not something that you want to have. But yeah, mate, yeah, you don't want that. Yeah, yeah, thank you. But can I make a comment on that? I mean, when you compare. When you compare to experiment, you don't care about the Sierra or the Green Nagdi or the shallow water equations. Think of the free surface Euler being the correct model. The moment you do Green Nagdi or Share, you are mu squared away. And so this is one scale. This is the mu square scale of approximation. But then you have a second scale, which is mesh size. So when your mesh size is small enough, actually. Is small enough actually, the model is good enough. So, realistically, you are only first order in mesh size, but you have an accurate approximation of the three-order equations. That's the resurface order. Yeah, okay. Yeah, thank you. So, Hannes, maybe? Yes, thank you. It's can you hear me? Yes. Yeah. It's actually also a follow-up on the discussion. Also, a follow-up on the discussion, and maybe this is like a philosophical question. But did you maybe I also missed it? Did you also compare the convergence orders of your low-order method and high-order method? Because it seems like if you have some the origin of my question, if you have this first-order bottleneck in terms of accuracy, it seems like what's the point of getting a high-resolution scheme up and running? Of getting a high-resolution scheme up and running. Yeah, so actually, I should clarify. So, the first order is to solutions to the original SARE model. So, if we fix epsilon and we find some reference solution for our hyperbolic model, the order is still a second-order space numerical method. Okay, yeah, thank you. Yeah, so that's yeah, that's why in this table, when we compare with exact solutions to the original model, that's why we see a rate of one. So, it's See a rate of one. So it's not really using a first-order method. Thank you. Okay. So, any more questions? Yeah, if that's not the case, I think that we can thank this, or I can thank the speaker again, and we can go on to this general discussion part. Maybe Manuel, whoever wants to say something. Yes. Well, as you saw in the email. As you saw in the email that we sent yesterday, we decided to have this open session as Andreas was just explaining. Just taking the opportunity that we didn't have any talk for the last.