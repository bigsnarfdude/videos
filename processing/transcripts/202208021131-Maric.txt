Results. So basically, the goal of our research here in Darmstadt is to kind of transfer the knowledge and the information from these high-fidelity methods that we have for two-phase DNS and transfer them to unstructured finite volume discretization. And why do we want to do that? Well, I mean, of course, one can model these. Of course, one can model these complex geometries in very different ways, but one possible advantage, so to say, of using unstructured discretization is that we are able to adapt our mesh to, let's say, refine the problem locally. And we are able to potentially, if things work out, we are able to fit the spatial discretization to the boundary of the problem domain. The problem domain. So, this makes it quite easy to create some prototyping and engineering workflows. So, that's the hope that we have. So, I'm going to maybe, let's say, focus a bit on the volume of fluid method, but what I'm going to be saying also refers to any other method that is used to advect the fluid interface. As long as the connection to fluid mechanics is then, of course, the single-field two-phase Navistops equations. Single field, two-phase Navistops equations. Yeah, so with this in mind, let's say that the goal, so to say, of the talk would be to have an accurate and robust volume of fluid method or some similar method for adverting fluid interfaces. And then in geometrically complex domains that you see here on the right-hand side, that with unstructured finite volumes, we can discretize easily and refine locally where we need. That's the hope. Okay, so to set up the problem, so we have two fluid phases. We have two fluid phases, omega minus and omega plus. They are occupying a domain omega and they are moving in time. And of course, they are connected with a fluid interface, a boundary sigma of t, right, which is a line here in 2D. It's going to be a surface, of course, in 3D. And what do we do to obtain these single-field Lambdi-Stokes equations? Of course, we introduce the phase indicator function, which is a scalar indicator just telling us in which. Color indicator just telling us in which phase we are. So, if we want to indicate omega minus, for instance, it's enough to indicate one phase in a two-phase system, then we just say, okay, the scalar value is going to be one in omega minus, and it's going to be zero in omega or omega plus. The sigma of t, so the interface is going to then, of course, have the interface normal that we need to calculate the surface tension force acting on interface and other things. Okay, so keep. Okay, so keeping the focus on the volume of fluid methods, we apply the Reynolds transfer theorem to the conservation of one phase, so let's say omega minus, and we do it within a control volume that's fixed in space. And this gives us equation two, basically just saying that the rate of change of the phase indicator in a closed fixed volume equals the fluxes of the phase indicator through its boundary. So, so far, so good. Then we divide the equation two with the mass. Equation two with the magnitude, volume magnitude of the fixed control volume, and we end up with equation four. Um, having in mind that this alpha c that we get on the left-hand side is the volume fraction, right? So, some of you probably know this, so you will see where I'm aiming at. There's no connection to the rest, I assure you. So, um, what we have in is an exact equation that's connecting the volume fraction value, which is a fill level in each cell, uh, with the flux of the phase-specific. Phase specific volume on the right-hand side. And then we use the phase indicator to build a single field momentum equation by building the single field density and the single field dynamic viscosity by combining constant densities and viscosities in this way. So for density, we don't have a choice. So this is for the equation five is enforced by mass conservation. Well, for the viscosity, there are some maybe different models by combining harmonic. Different models by combining harmonic and linear combination and whatever, but that's that's not relevant now. Okay, then we have two phases that are not compressible, which means that the divergence of the velocities equals zero. And then we use these models five and six together with the phase indicator, and we put everything together in a single field momentum preservation equation. This ends up with equation eight. So we have a single, so to say, field momentum on the left-hand side equals the forces on the right-hand side. The forces on the right-hand side with two kinds of maybe terms that might not be like so often so present in what you've seen so far. So we have the gradient of the density times GX that's coming from the treatment of the pressure by extracting the hydrostatic contribution. So we have a slight problem here that I will address later on in terms of the gradient of the density, at least for unstructured finite volumes. And of course, F sigma, which is the And of course, F sigma, which is the surface tension force. And this is equal to sigma surface tension coefficient, kappa, the mean curvature, and sigma, the dimension, the normal at the interface and the interface Dirac. And to later on use this kind of modeling, we apply the CSF surface tension model to discretize this. Now we go a bit into numerics, and then immediately, like on the first slide, you basically see the difference between this approach and the structure. Between this approach and the structured mesh approaches. So we have arbitrary shaped finite volumes. They are bounded by non-planar but triangulated faces. And we integrate this volume fraction equation and we end up with an exact equation. So still exact equation 9. And you have like many, many different VOF methods that are unsplit or unstructured that are solving this equation 9. So it's all about calculating this integral in time and over the face of the. Time and over the face of the finite volume of MSC. So, many, many different approaches. But we stick to second-order accuracy. At least, we hope to maintain second-order accuracy. So, what we do, we approximate the phase indicator high as a plane. So, in each cell, we associate a plane, and then we define the indicator to be zero if we are in the negative half space of the plane, and one if we are in the positive half space of the plane. Pretty simple. However, since these Since these small planes are cell-wise continuous, we have some, of course, discrepancy when we go from one cell to another in terms of the connectivity of the plane. So they don't match at the cell boundary. So the goal is to somehow find the field, discrete field NC, which is centered in each cell in such a way that when we move our interface with the prescribed velocity or the velocity coming from the Navier-Stokes system, that we get. system that we get some accuracy in some norm. And this is the this EG is like the established L1 norm for the interface of action. So another point is that all of these methods, they generate some kind of wisps. So these VUF methods, they, of course, you cannot exactly solve this if you have velocity coming from Navier-Sovi's equations. So some small, really small numerical differences in the volume fraction from zero and one, they appear in the bulk. And this is kind of how it looks like. And this is kind of how it looks like. So, if you look at it, it looks not so good. So, these results are actually still one of the most accurate results in the literature, as far as I know, from one of our publications. And you still see on unresolved situations that there are elements lying all over the place, that there are small elements that are separating here at the top. And they tend to be smaller and tends to be less. Tends to be less of them, but they don't completely disappear with mesh resolution. And the same goes also for the discontinuity in the normal field. So it lessens with mesh refinement, but it doesn't disappear completely. And this is quite important to remember just for the rest of the talk. Okay, so when we discretize the equations, we basically end up with two algebraic equations. The divergence of the velocity equals to the sum of the volumetric plucks. Equals to the sum of the volumetric flux across the phase, it's relatively straightforward. And the momentum conservation ends up again in this form of equation 12, not to read like these terms now. And you can notice that the surface tension, as I mentioned, we are using this continuous surface force model, but we are approximating the n sigma, delta sigma using the gradient of the volume fraction field. And this discretization is important. And of course, we would like to have solved everything at the We would like to have solved everything at a new time step. This is the T n plus one, n plus one notation that you see here, apart from some things obviously coming from temporal discretization in the source term that are old from the previous one. But that's not really possible because of the geometrical nature of the advection that we're using. Okay, so if we take the divergence, so divide the previous equation with the central coefficient, take the divergence in the discrete sense, set it to zero, we build a pressure equation. And you notice that we put everything. And you notice that we put everything on the right-hand side of the pressure equation. So, yeah, this is, I like Star Wars references. So, the bringing balance to the force. So, what does it mean? So, if you want to make sure that we don't, let's say, introduce artificial acceleration into the system, artificial energy, if everything is balanced, then basically the pressure jump across the interface or the pressure gradient needs to be scaled by the surface tension coefficient. By the surface station coefficient times the mean curvature times the gradient of the volume fraction. So we are really limited here in the way we discretize this equation. So we really need to match these two operators. And this is known. This is all stuff that I'm talking about. So of course you can read review and there's sufficient papers about this. However, like on unstructured meshes, we also need accurate and also robust curvature and we need the curvature at phase centers on these unstructured finite volume meshes. These unstructured finite load images. So, let's say we have this now with this critization, and now we start solving some equations. And how do we do it? And when I say we, I mean what we are doing in OpenFOAM, we are still using segregated equation coupling, which means that we are marching in time forward, of course, in our simulation loop. And then we have two loops, outer and inner iteration loop. In the outer loop, we advect our interface. We discretize the momentum equation to obtain the Navier-Stokes operator. To obtain the Navier-Stokes operator that we call it Litus H of V. So, this is basically this first term on the right-hand side here. And then we may or may not update the velocity depending on the momentum predictor being turned off or on. And then we enter the pressure equation solution where we try to ensure volume conservation of the, let's say, volumetric flux. So, we solve this iteratively using the old Navi-Stokes operator and update the volumetric flux. Update the volumetric blocks. So, yeah, this is quite straightforward, non-stuff in a two-phase flow community, so to say. So what's the problem? Well, I did some tests and when I tested basically a stationary droplet of radius one millimeter in A times A times eight millimeter domain with a constant curvature, right? So disregarding any kind of problems with curvature approximation, I expected the discretization to be balanced. The discretization to be balanced. So, this, all these sums, right, all these things, when you, and in this solution algorithm, you plug everything together, and it actually is balanced. So, if I take 10 to the minus 15 linear solver tolerance, of course, there's some round of errors, I get between 10 to the minus 14 and 13 velocity, which is okay. However, so this was done on, let's say, equidistant unstructured mesh. But what does it mean? So, you have cubes that could. That connect only to their immediate neighbors. So there's no way, there's no directional information in the mesh, in the mesh. The connectivity is unstructured, but the case was equidistant. However, we are interested in some complex simulations, and this was done also in open form by a PhD student that's visiting currently at Udanstadt. And you can do crazy things, of course, with an unstructured finite volume method. Combined particles, also similar stuff to what Amir was showing in the previous talk. However, when we add two-phase flows in these... When we add two-phase flows in these complex geometries, often we have huge parasitic currents that are so strong that results are practically invalidated. And the important story here is basically that the unstructured finite volume discretization of the meshes, especially of geometrically complex domains, they are non-orthogonal and skewed. So we don't have these nice equidistant cells. We actually have skewness and non-orthogonality. And how does it basically look like in an experiment? So you take the same. Like in an experiment. So you take the same stationary droplet, same conditions, and you perturb the mesh a bit. You just perturb the mesh points and you run everything again. So this, of course, now distorts the discretization, causing mesh tuness and non-orthogonality about from 0.1 to 10%, respectively. I will say what this is shortly. So with finite volumes, for those of you that are not unfamiliar with this, the skewness is a measure of the difference between the Of the difference, like between the intercept that is a point that kind of projects or intersects the discretization vector and the face. So you have the face of a cell and you have the discretization vector, the connection between those two cell centroids, and when these two intersect, they intersect at the intercept point Fi. And the difference between Fi and F is this M skewness vector. So you want this basically to be zero. And another problem. To be zero, and another problem is non-orthogonality because with finite volume discretizations, we are computing numerical fluxes but in the direction of the outward pointing normal. Why? Because a flux that's tangential to the phase has no effect on the rate of change of the property inside the cell. Nothing. It's just tangential. So, okay, so what we want, we want basically the discretization to be projected along this S direction. And in fact, our discretization in this case is going in this direction from P to N, and there's an. This direction from p to n, and there's an angle alpha here. So, how to deal with this? I'm just going to talk about non-orthogonality correction because we are solving a Poisson equation for the pressure. So, we have the gradient of the pressure on the left-hand side and the right hand side, the gradient of the volume fraction. So, you basically say, okay, the total gradient equals the orthogonal contribution plus the non-orthogonal contribution. And we have, at least in open form, and I think as far as I know, I think these are all three that are known for unstructured finite volumes, three. Constructed finite volumes, three corrections, and this over-relaxed correction is the one that, let's say, satisfied second-order accuracy. So that's one that's prevalently used. Makes kind of sense because the non-orthogonal is actually a correction is in this case tangential to the, well, let's say it's orthogonal to the SF. So it decomposes the gradient properly. Okay, so I turned on these corrections on the perturbed mesh, ran everything, and then I get these nice results. Then I get these nice results. The problem is, then, of course, I mean, there's depends on the point of view. So, in literature, you would say, okay, of course, the method is stable. So you have still some errors somewhere in the discretization. And these errors, they converge with time. Unfortunately, if you remember, so we are using constant curvature. And this is especially bad because in the first time step, we have maximals of parasitic or artificial velocities that are of the order of 10. Velocities that are of the order of 10 to the minus 5. And if we start discretizing curvature, then they are going to explode up to 10 to the minus, I don't know, one, maybe, maybe even higher. And this is very bad for a droplet radius of one millimeter, right? So we are reaching velocities that can really destroy our solutions. And the question was, okay, let's increase the number of corrections that we're using because we have these segregated solution algorithms and this really doesn't help visibly. Doesn't help visibly. Also, just for students, just expected not to have a large impact, but it has the same kind of propagation, the maximum velocity error. And what happens if I turn on non-orthogonality or skewness? All of a sudden, the discretization is balanced, which is really strange. And why is it the case? So if you look at the pressure equation again, that's at least what I suspect. So my talk is about the problem. It's not so much about the solutions. It's not so much about the solution, so but I wanted to take the opportunity to discuss this in more detail. So if you look at the pressure equation on the left-hand side, so all of these gradients are split. So the pressure gradient is split into an orthogonal and non-orthogonal contribution. And the gradient of the volume fraction equally so. However, we are solving the volume fraction equation in the outer loop and not touching it. So on the right-hand side, we have stuff from the outer iteration and on the left-hand side now. Iteration and on the left-hand side now, we should have kind of two contributions to the districtization that are equally active, but they are not equally active because we are treating these corrections, finite volume corrections, explicitly for different reasons that we can discuss in the discussion part. And this explicit correction is what makes the, so to say, the pressure lag behind, so to say, the actual non-orthogonal counterpart. So this is. Counterpart. So, this is like one possible description of this problem. And now comes the hand waving. This is a mathematical conference, and my original field of study was mechanical engineering, and I did my PhD in applied math. So I'm now going to wave my hands and near to some power lines, as you see. So it could be dangerous. So if you look at some error estimates, there are nice error estimates based on Taylor series expansions for unstructured finite volumes. And you can see if you just imagine. And you can see if you just imagine that we are solving single-phase flows just for a second, then the pressure field is going to be regular unless we are doing some shocks. But that's a standard normal single-phase flows, no shocks. Okay, in this case, the error estimate looks like this. And then you see, okay, wait, even for a single phase simulation, if I have a regularity in my pressure field, this error is going to be proportional to. Error is going to be proportional to first-order accuracy, right? Because we are measuring the accuracy using this df, and this is the discretization vector that I mentioned. So, this is this is h, this is the discretization length. And when is it not, when is this going to cancel? And it's only going to cancel if the mesh is, so to say, equidistant. So, if you have an equidistant mesh, then this Wf, which is your linear interpolation coefficient, is going to be 0.5. Going to be 0.5, and then this first term cancels out. And this makes me worry a lot. So, hence, me giving this talk basically to maybe spawn some discussions. And another thing is now coming back to two-phase flows, what we are doing, we are approximating the surface tension component, so the normal of the interface times the interface Dirac, as the gradient of the volume fraction. And our volume fraction is a field that's not smooth, it's only defined. That's not smooth, it's only defined in a single layer of cells. In this case, if the pressure gradient should reflect this, the question is if we can even use these kinds of error estimates simply because the pressure field will have a jump inside. My guess is not. Okay, so another, let's say, challenge that we are working on is next to force balance the stability, right? So we need X. Stability, right? So, we need accurate, but we also need a robust curvature because the methods that we are using may have some small dispersion, however, small, tiny. Since we are using the gradient of this volume fraction as an indicator that the surface tension force is active, we are going to be activating it wherever we have small dispersions. So, this is some wisps appearing in some shear flow on the left-hand side. So, these wisps are small values that I mentioned, right, that shouldn't be there. So, there are some heuristic algorithms that clean them up, that there's no Algorithms that clean them up, that there's no guarantee that they will be cleaned up. Then we have some height functions, which is an established method of calculating curvature and normals. And it's second order accurate, but sometimes you cannot apply it depending on the interface orientation. It's available on unstructured meshes. There's a nice paper from Professor Deshardam, but the question there is also parallel scaling. You cannot go too deep into specific directions on unstructured meshes and expect the algorithm to scale. Algorithm to scale. So, this is still an open question. And any curvature model that's based on the splick geometry, these small elements, is, in my opinion, likely doomed to fail simply because of the challenges connected to this. Okay, so to conclude, why do we inflict pain on us by doing this unstructured finite volume discretization? Well, this really effectively handles geometrically complex flow problems. So, if you look at like this on the left-hand side, we have automatic. This is on the left-hand side, we have automatic mesh generation algorithms that can really deliver really cool meshes with a single click, which is nice. And we can fit our cell shapes to arbitrary domains, which is also nice. So we have second-order accuracy of spatial discretization. But as I mentioned now in this talk, so we still have some open challenges. We have lower accuracy than structured meshes, so compared to the previous talk from Damir. So we really struggle to figure out how to have small contact, small stencil discretization. Small, compact, small stencil discretizations that are accurate. And of course, the development of robust and scalable interface objection methods is really challenging on these types of meshes. And we have to take a look at force balance in combination with error correction. So to see what's going on there as well. So yeah, if these topics are interesting for any of you, just reach out. Be happy to discuss and collaborate. And yeah, with this, thank you very much for your attention and looking forward to questions. Attention and looking forward to questions. Thank you, Thomas Lavmaric. The floor is now open for questions. You can type it in the chat, or I can take questions starting from the folks present in person. Could I ask a question? Yeah, sure. Okay. Sure. Okay. Yeah, it's not really a question so much as just to bring out into focus what you're attempting to do with OpenFoam, which is have these unstructured meshes for multi-phase flows. And I don't think it's, at least from when we first started working together, I didn't really appreciate as much as I should have how revolutionary this is. Revolutionary, this is this. This is big stuff. I mean, I don't know, maybe other people have figured this out, but I don't think I've seen it. But if we could, and especially you, could work on these problems and hopefully this opens a discussion of how to establish robust, flexible, unstructured measures for multi-phase flows which incorporate. Flows which incorporate these surface tensions and things like that that are difficult to do even on structured meshes. That this area of development, I'd like to say, is essential and it's, I don't think, received enough attention except from a very small community. So I just wanted to impress upon the audience that this is groundbreaking work, even though it This is groundbreaking work, even though it might not be out there in a huge community, but it is impressive work that you're trying to do. Yeah, thanks, Namir. I mean, there's many open challenges still, but I think the promise is quite high. So, I mean, as you said, I mean, if we make some of these things work, this would enable really simple workflows for many interesting problems. And that's relevant. interesting problems and that's that's relevant for for technical applications so especially in the context of open foam yeah yeah that's that's uh that's also yeah we are whatever we are doing we are publishing so you can also contact us and uh also just click on this link basically i can share the slides later on and have access to the code um yeah but it's still quite quite a challenge so the the the idea of just uh reusing um the the knowledge from from structured The knowledge from structured methods like RCRM, like your stuff. I mean, as we learned over time, it's not so straightforward. Often people write in their papers, you know, it's a structured meshes and unstructured diskization straightforward, but in this case, it's really not. Yeah. Yeah, go ahead. So, my question may not be very in-depth because I'm an experimentalist, I don't really know. Experimentalist. I don't really know a lot of, I know a lot of simulation method from the very superficial level. And my question is, just for my own understanding, it sounds very nice framework. I'm just curious, is there a specific problem that this method is best at compared with other existing ones? Yes. Well, I mean, basically, when you go to unstructured, You when you go to unstructured discretization, so what the what this simplifies is if you want to simulate a geometrically complex technical system, so you're able to, I mean, the only currently the only advantage right now is the simplicity of its use, so to say. So to discretize kind of really crazy technical systems and solve some stuff in it, this is extremely straightforward. So you get from production in an So you get from production in an industrial company, you get the CAD that's kind of coming from the product design, and you can immediately use it and run your simulations. So that would be its strongest, so to say, advantage. And what we are trying to do is to do what I just said, but in a robust and accurate way, because that's not yet there. So there's still issues with parasitic currents, so force balance on the interface and things like this that we are trying. Interface and things like this that we are trying to address. Well, thank you, Tomislav. Excellent presentation. Our next speaker is Professor Bring Brunton from University of Washington.