Inviting me and having this wonderful event, so we can really do that more. Okay, so today I'm going to talk about a sort of conversation and multi-variant MNL model. So this is joint work with Jia Chen Li, so a first year PhD student at MIT, Meng Weng Li and Tian Chun Dao, so my former PhD student at the University of Ili Malang at Manchiang. And Li Wenzhou, so a former colleague at the University of A former colleague at the University of Illinois, now a professor at Tsinghua University. So, here's our plan of this presentation. So, first the SAM motivation, and then I'm going to talk about this formulation, then I'm going to talk about the history of our approximation error and the SAM and numerical experiment. Okay, so I don't think I really need to Think I really need to get into the motivation. So, basically, existing a sort of optimization literature. So, focus, I think, a lot, of course, on substitutable products. So, basically, I think probably at least 90% of the papers really do that. So, a few years ago, I asked my students, okay, can we do anything? So, they thought a combination of, say, okay. Combination of, say, okay, complementary product. So that's where we look at that problem. Of course, okay, so you can really have many different examples where you want to buy multiple categories of product. So one thing here I want to mention is basically utility of product, A from the first category, B from the second category. First category, B from the second category. Actually, can be very complex. So we don't necessarily have a good understanding about the structure. So here I'm not going to impose any structure on the utility of the product. So the literature, actually, so marketing literature, we look at basket prompts, right? So we have very Very general models, but which are not very useful when we talk about a sort of optimization. So, really, not much we can say. When I say okay, useful, I think we be careful. It's just okay, well, I don't really have good optimization structure which allows me to say something nice. Okay, so from our okay, so informs revenue management community of us because there are some recent papers. Some recent papers, which look at this type of problems. So I think this paper looks at a bundle and multi-value larger model, but with a lot of K-product customers can purchase. And then I think Jason has a paper which looks at similar, okay, so model, but to impose Impose group dependent interaction assumption. So basically that impose conditions on the utility of a bundle. So as I mentioned, I'm not going to impose such assumptions. And then there are some other relevant papers where customers actually can purchase multiple products or multi-units of the same product basically. Any hardness or any approximability result for this thing? Uh which one? Uh the one you stick in these paper states. Uh this paper yeah I think it's the first one actually indeed yeah that's when behind. I think uh well I think it's the second is also in behind I think. Not in a proxy. No I think it's the second paper right so you have FP touch. So but as I mentioned right so you impose structure on you utility function. So let me So, let me. Well, I think it's one thing I want to mention. Probably I missed some. Okay, so some papers here. So, if I missed you, please let me know. Okay, so here, okay, well, I'm going to use, right, so MML model, but I call like I said, multivariate MML model to model your choices. So, essentially, okay, well, so if you look at two categories of clients, it's just Category of products. You just take one from its first category and one from the second category. And then you look at this bundle. And each bundle you can look as an option in the NL model. So that's essentially what we mean by a multivariate NL model. So we are all familiar with, right? So, okay, well, MNL model. So I'm going to just directly write down the mathematic formulation. So here I assume you have an M product in the first category and the M product in the second category. So of course I'm going to append like this no purchase option. I assume UIGI is the preference width of bundle. Bundle IG, which as I mentioned, I'm not going to impose like additional structures, so just take this S B Y J. So a sort mantization, so I'm going to use X hat, Y hat would denote. So the set you choose, right? So from the first category, I need the second category. So now, okay, the purchase of the probability, use, use. Using MNL model, just basically URGL times XR hat, YGA hat. I divide U00, so that's a no-put option, and then the summation of UIGAXI hat, YG hat, over these two categories. And then plus, of course, it's only purchased, like I said, from one category. From one category, and then the zero, or just the no purchase option for another category. So that's a purchase probability of a bundle R and J. So R is in the first category, J is in the second category. So I'm going to simplify this notation a little bit, just define like x0 hat and y0 hat. Had and y zero head plus one. So now, okay, well a sort of maximization problem actually kind of straightforward to write down. So I'm going to look at the case where you have like a price, a PR for product R, QGF for product J. So here I'm going to assume the revenue will be just PR plus QGF. So actually later will as that relax after this. As that you relax to this assumption. But then the expected revenue of assortment is basically you purchase a probability times the revenue of the bundle and then you take summation of all possible bundles. Okay, so but that's optimization problem. Okay, so first of all, okay, the problem is strongly NPR. Yes, please. So your price is added in the Your price is aggregate on QJ? Yeah. In price? Could you have prices that are randomly banned? Right now, actually, so they are set independent of your bandwidth. Right, so okay, what's the project for adding R in first category? I just set okay PR and second category, product, QTL, and everything together. That's it. Later, I'll allow you. That's it. Later, I'll allow you to do like sign discount, but in this specific way. Okay, so and also, okay, well, another thing is, okay, revenue order assortment that can be arbitrary there. So then, okay, we're going to actually provide the site approximation algorithms. So, okay, of course, okay, well, we can define, right? okay well we can define right so the population ratio is basically an everything where is achieved revenue divided by optimal revenue so that's I think is the standard definition of approximation ratio so we propose three different algorithms so the first one is basically based on an adjusted revenue audit assortment we get We get so half approximation algorithm. The second two will be based on LP relaxation. So we get something called get minus epsilon algorithm. So I'm going to talk about what I mean. Okay, so get. And then we're going to use the LP relaxation to propose a partition and optimize LPI framework. Okay, so just to clarify my understanding. Actually, just to clarify my understanding, so basically, the challenge here of why it's not like it's like constrained ML optimization problem where there's like rules on the man I have to offer the pants, then I can't individually offer both and not offer the bundle bundle automatically enough. Yeah, you can think about it that way. Okay, but if you think about it that way, are there relations between that and any of the other commonly studied structures that you can propose on you to sort that out for any of it? I know I don't know, because I think there's. I know I don't know because I think so. You really now can think about: okay, well, I'm going to choose a set from the first category, and then choose a set from the second category. So you end up with the optimization side, so that's right. So bilinear optimization model, and then you also have the fraction. Okay, no, it makes sense. So I think this kind of optimization structure is similar to, I think, that the PCL, so. The PCL paired comparison logic model. So you just purchase a single product, but you first take two offer the product and then you will just decide which one to pick. There are some similarity in the structure, but the optimization problem are totally different. Okay, so let me, okay. So let me, okay. First, okay, simple observation. So basically, okay, what here, as I mentioned, okay, well, the prices really are, okay, as I really asked, right, so the prices of the bundles are really independent of the bundles. So I just add them together. I'm going to do the separation. So I will separate this objective into two terms. Two terms. And then I will take a maximization of these two terms separately. So that's always the thing to do. Now you can think about the first formulation looks like, okay, well, so I'm going to just set like the price for the second category product to be zero. Only looks like the price for the first category. And then the second formulation has a similar interpretation. But of course, you still. But of course, you still need to take into account which UIG address that utility of the primary. But the good thing is: okay, well, the two formulations actually can be solved very efficiently, just simply because you put a zero for the other category. Okay, so This, of course, I denote this as part B, and then that as pi cube. So that's, of course, less than two times the maximum. Now, as I mentioned, let's say, okay, pi b and the pi q actually can be solved very easily. So I'm really just like a take the optimum solution, which is really which one gives me the maximum here that gives us, okay, so we have. The US, okay, so we have the pausimation. Okay, so why I'm not going to talk about the details here? So now let's look at okay, well, so LP relaxation of the problem. Yes, please. So if I ignore the individual category outside option, couldn't we just pick a subset of edges rather than picking three subsets on each slide? Thinking of like being yours. You can think about that way, but then I think. That way, but then I think so. Now, so some of the product in the same category, you will pick that, right? So, that's changed the structure of the product. So, it has to be complete. You cannot pick any subset, it has to be complete. Yes, so we we we for each category, I only assume you pick like at most one apart. So, that's just to Do we need that constraint? So, because my customers just buy products, I like this, they may be in the same category and they may be complementary still. If you don't have that assumption, I think what Rod is saying is true, but you can solve this kind of a network problem, you are sele selecting a subset of that network and Well, I think it's a from uh formulation uh wise, I think it's uh really doesn't matter. I think so really doesn't matter. Yes, yes. But from like approximation algorithm start, actually, so it really matters. Those problems, it's just like with a grader algorithm, like the version of a grader algorithm, until you can get like a lot, right? So. Well, I think so. From modern perspectives, there are, of course, settings where you do have clear separation of the categories. Hateways. But okay, from the optimization side, I think that would be. If you don't separate them, I think that would be some. At the least we haven't figured out how to do this. Okay, so now, okay, well, we're going to do, okay, we do LP realization. That's, I think, it's also standard. So I'm going to really just normalize the diffraction. And then, so I just really end up. Then, so I just really end up with a linear programming. And of course, because I have a loose five linear terms, so I'm going to use my comic envelope to do the relaxation. So, again, that's also a standard in integer program. Okay, so here is the problem with the face. So, I'm So, I'm going to talk about look like the integerity gap of this problem. So, basically, this is defined as your outcome objective value of the integer programming formulation and the what the optimum objective value of the linear programming solution. So, here I'm going to define this as the integer, yeah. So, essentially, okay, but if you use LP relaxation. If you use LP relaxation often, right? So, okay, but we don't have good understanding about the optimal technique value of integer program. So, why do we use the optimal technique value of media program to relax this? So, usually, okay, what's a get or gave a good idea about approximation ratio? So, here I'm going to, okay, so you write with something, okay, well, so get minus approximation. Something, okay. Well, so get minus approximation everything. It's actually says, okay, well, integrated gap is well given you your gap. Okay, so basically of gap, right? So you will choose an epsilon greater than zero, then you will be able to get like this get minus epsilon approximation algorithm, but I think it's a so it's the algorithm is polynomial in the number of like products. Number of products in the categories, but will be exponential in one over epsilon. So that's the type of everything we have here. Okay, so the idea. So based on very simple observation, so basically, when I have like DR plus QGR together, so I can think about actually trying to aggregate. So a problem. Gate so a product with close revenue together. So now I can think about it, okay? Well, so partition my product into several groups and each group has very small revenue gap. So I treat this as a single product. And then once I have that, I can reduce my number of products. Use my number of products in each category to set up this. So the constant k, which depends on epsilon. Now, I will just do enumeration to get the integer solution. That's it. So of course, it can have divide into essentially constant number of groups for each category. So the enumeration, okay. So the enumeration is in parallel time. So now the good thing is about this LP formulation and integer programming formulation is really once you do the aggregation, you only lost like epsilon if you just support like a sub product whose revenue is the name like Epsilon at GAP. So LP and RP, so the loss of revenue you just order. So, the loss of revenue is just ordered of Ipsum. So, that's how we get MegaSO to the get minus Ipsum at positivity higher within. Okay, so of course, it doesn't really matter because we need to really partition our Mexican Ipsum. And also, we don't really know what get is here. So, I'm not going to talk about it. Okay, well, one thing that the algorithm actually works if they allow a general bundle price structure. A general like a bundle price structure of you have like a constant C1 times PR plus a constant C2 times QGN, and then you put F there. So that's a type of structure of the law. Okay, so let me now move on to, okay, well, understand what's a gap is, and then also like me to propose a, I think it's an edible there. I think it's an error then, which is simpler than the gap minus epsilon approximation error I just mentioned. So, but first of all, okay, we have an upper bound for the gap, which is 0.75. So, now let's, okay, well, so how do we construct the lower bound for that? So, here's the idea. So, we're going to partition the product, but The product, but not based on that epsilon gap. It's really okay, we choose where we do the partition. So we put those cut-off points, those partitions, in optimization format and try to understand the property of the optimal solution or feasible solution. And then we'll be able to come up with close to Close to 0.75 deposit. So, here is, okay, well, to do that, we need to understand the property of the LPL session. So, one good thing about this metallic angle look is basically if you saw that linear programming realization, so you would get an optimum solution, which is either zero or one, or you have like a solution one half. Or you have like a one-half. So that's a structure we are going to use. And then for us, so basically, or okay, well, in the Martomic inequality, we have something with ZIGR, which we try to approximate XR times Yj. So this can take value 0, 1/2, or 1. And then we are going to basically partition. Basically, partition according to the values. So, in particular, we have interesting the case where XR is 0.5, YGL is 0.5 in the LP realization, and then ZIGF can be either 0 or 0.5. So, and then we can decide when, okay, well, this takes 0 or 0.5. It will be depending on where the legacy of the revenue. Where the legacy value of the bundle is how does this compare with the outcome of the value of LP extension? So with that, we can really partition our product. So I'm going to do all that with visualizes. So here is basically XR equals 1 and Yg equals 1 only for this. And those sum to be 0. Sounds to be 0.5. And then those are just zero components which are not going to look at. So from here, okay, well, so this ZRGF take the value of one half. Some of those actually will take zero. So I'm going to draw like this actually product along this line based on the revenue. So in the decreasing order. And this is for X, and then here is for Y. So the good thing is, okay, well, because I have that property, so you can really see, okay, well, this, like a ZIG, I can potentially take that the one half value will basically have the new structure. So this curve raise can you can think about just monitor increase. Okay, so with that, so we are into okay, with design like this. So we are going to work with the side, like so, how do we do the cutoff? So we are going to work about on each side, we have like a K different cutoff values. And this cutoff is just okay, well, say for example, B1, I'm going to, okay, well, I have like a surprise, which is about like a B1 times the outcome of the value of LP realization. Like I'm going to put like a so and that's and then from B1 to B2 as And then from B1 to B2, basically, the revenue is between like B1 times R star and B2 times R star, and we put there in the second bucket. And then, okay, so, okay, well, I'm going to put the riser. Okay, well, K on that side. Okay, well, K on that side and then K on this side. What I'm going to do now, I want to pick K, I want to put like as a pick like a K assortment. So from like such a construction. So how do we do it? Okay, so the first one is really, okay, well, I pick like a sortment which corresponds to xy psi equals one and then those And then lose product in the first category with a revenue higher than B1 times R star. So that's the product I will for category one upload in the first package. And then all the product for the second category. So that's one I sort of. I'm going to okay. And then I'm going to pick the second one. Pick the second one. So, the second one basically says, okay, well, you will take those first category products whose revenue is between B1 R star and B2R star. So, some of the product here. And then I will take the second category up to, okay, so to like BK plus one minus K. So that I will make sure, okay, well, I will be able to. Okay, well, I will be able to cover all those blocks. Of course, ZRGI will be one-half. So that's the whole idea to impose some conditions on B. Like in the time I'm not going to talk about the detail. And then I'm going to do additional, okay, so I sort of. So until I've picked, like I said, K is sort of now. Okay, so okay, so that's a big Okay, so that's a picture much better. Okay, well given as I'm going to just directly come to like so the optimized transformation ratio. As I mentioned, okay, I construct like a K assortment. And so I will be able to really compare the K assortment, whichever division of the highest ratio, so revenue divided by the utility. Those are the Those are like you can really construct a quadratic program formulation to do the calculation. But this actually looks a little bit tricky, but we can use weak duality indeed to construct a feasible solution, which gives us an interesting result. Okay, well, so for example, we can pick like a solution: k equals 4. Like a k equals 4, then we get like a approximation ratio of 0.72, and then we take k equals 6. This actually gives us 0.74. So remember, we can have outbound of 0.75. So yeah, I think that's basically what we have. Okay, so I want to mention, so if you like a general If you like generalizations actually all fail, so if you copy like capacity constraint, general bundle prices, more than two categories. Okay, so numerically actually perform, I think, so it performs well. Okay, so I will start now. Thank you. We are a bit uh over time, so we're gonna keep the questions offline. Let's thank all the speakers again. Speakers again.