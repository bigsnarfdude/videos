There we go. Sorry. I'll start by just going through the abstract instead of a little bit of a roadmap. This is the abstract is the roadmap. So something that most of us are familiar with is that semi-standard Young Tableau are a model for something called a crystal, and irreducible components of Springer fibers are also. Of Springer fibers are also a model for a crystal, and these objects are models in a compatible way, which means that Young Tableau can also label these irreducible components. So you have like a commutative little triangle, that that labeling respects the crystal structure on these sets. And this talk is about. This talk is about a project that set out to generalize this correspondence partially to ADE minuscule Demisger crystals. So the Young Tableau Springer fiber story, it applies for SLM in type A. And here we move away from this setting. Setting with a slight restriction on the types of crystals that we allow, which is they have to be minuscule. So not all weights are possible as yet. And this project is joint with Balash Elek and Joel Kaminster and Calder Martin Ferguson. And the generalization that we established. Um established it uses reverse plane partitions instead of young tableau, so that's the combinatorial object. And instead of Springer fibers, a geometric construction of a crystal structure, we use quiver Grassmannians of preprojective algebra modules. So I'll talk about some of how. Some of how this correspondence goes through in this talk, and for most of this talk. And at the very end, I will state some questions and observations as to how it might connect to some cluster structures on related algebras. So, there's the motivating or the question to put it into the context of this workshop: do reverse plane partition. Context of this workshop, do reverse plane partitions interact with good bases that Joel mentioned in his talk or cluster algebras? So heaps, crystals, and preprojective algebra modules. What are they? So I'll actually not define pre-projective, the pre-projective algebra, and hopefully that'll be okay. So again, the goal is to And the goal is to partially extend in a type-independent way the crystallizomorphism that exists between irreducible components of a Springer fiber, which is denoted F of A here, and the set of associated semi-standard Young tableau, Y of lambda. So what is A here? Just to recall this briefly, A is a nilpotent linear map of Linear map of fixed Jordan type lambda that we see on the other side that can be viewed as a shape of a tableau. And let's say A has order n. So maybe the first row of lambda is length n. And what is f of a? It's a flag variety. So it's m step flags. There's another parameter m in CN that are preserved by this linear map. Are preserved by this linear map. Which just means that I can apply A to every step in my flag to every sub space and it lands me in the previous one. On the other side, what is y lambda? It is the set of semi-standard Young tableau of shape lambda in the alphabet one through m that has to do with the number of steps that we allow. Okay, and what is meant by the partial? So we only handle specific weights, lambda, those that are minuscule or that are more generally minuscule witnesses for some elements of the Weil group. So our main second result is. Second result is a crystallizomorphism between here some objects that are indexed by an element of the while group and an n that plays sort of the same role as before. So irreducible components of a Grassmannian, a quiver Grassmannian that I'm just going to, well, introduce notation for now and not define on the one side and on the other side. Side and on the other side, instead of y of lambda, a set Rwn of some combinatorial objects which replace the semi-standard Young table and are again indexed by the same information. Reverse plane partitions. And our first main result is to, first of all, just establish that the set on the right is in fact a, has in fact a crystal structure. So there's sort of two parts to the paper and lots of arguments. And lots of arguments involved. The first part is to just establish that this combinatorial set, these reverse plane partitions that I'm about to define, have a crystal structure. And in fact, they model the crystal Bn lambda for some lambda that is exactly this minuscule witness for the W involved. Okay, so what does minuscule mean? So, what does minuscule mean? So, we have, let's fix our Legebra G, semi-simple, with weight lattice lambda, keeping with Dole's notation. A dominant weight, so the plus just means dominant. So we also have some notation for the simple roots in the weight lattice, the usual alphas, and they're indexed by And they're indexed by the underlying Dinkin nodes of our Dinkin diagram. So a weight is dominant if it pairs non-negatively with the simple roots, and it's a minuscule dominant if the Weyl group associated to G acts transitively on the weights of the associated irreducible representation V of lambda. In particular, all the weight spaces are one-dimensional. It's a very nice looking representation. Representation, and most are not like this. So it is quite a restriction. And Lambda is a minuscule witness for a W or an element of the vile group. This loosens the restriction slightly. So this is if the W acts transitively in a sense, in the following sense, on this weight. So for some reduced word for W. word for W, the left subwords will exactly shift lambda by corresponding kind of simple roots. So you don't take all Google lambda? No. Yeah, exactly. No. So Lambda may be a witness for some W, but not for all. May be a witness for some W, but not for all. And it, yeah. So, so moving away from the weight and shifting our perspective to indexing things by words in the vile group, we can just define an element of the vile group to be minuscule if it admits a witness, in particular, dominant minuscule if it admits a dominant witness. Yeah, I should have here this doesn't have to be dominant. Be dominant. It could just be a weight. So, in particular, so for example, in D4, when the Lie algebra is type D4, and well, we label the nodes such that the omega weight omega 2, the fundamental for a non-minuscule node, is a non-minuscule weight. Minuscule weight, it does play a role of a witness for this particular element. Okay, and here is a way that you can think of these more concretely. So Stembridge and authors before Stembridge had a lot of work on minuscule representations and combinatorics of words and heaps. Heaps and an element is minuscule if it is fully commutative, which just means that any reduced word for that element is related to another by swapping commuting generators of W. And the condition above actually holds for any reduced word in this case. Okay, so what is a heap? Okay, so what is a heap? A heap encodes reduced words for minuscule W. That's how we'll view them, but it can be defined more generally for any W, you fix a reduced expression and you associate to it a poset. So this is the set of the indices involved in your reduced word. Involved in your reduced word, so the numbers one through L that we order according to this relation. So in my heap, S is less than T if kind of the element, the generator SI or S sub S occurs after the generator S sub T in my word pouring. In my word for notation, and the corresponding entry in the Cartan matrix is less than zero. But we don't have to think too hard about the definition in general because we'll only consider minuscule elements. So we can actually define this for a W independent of the choice of a reduced word. And know that any choice will give a structure which is the same. And we're going to view this as an abacus. So, this abacus model is due to Arun Rahm and I believe Alexander Pleshev as well. So, we're viewing our heaps as sitting inside. So, gamma denotes the Dinkin diagram is a base, and we tack on infinite rungs to each node of the To each node of the Dinkin diagram, we view it sort of like an abacus. And we drop beads on runners according to how the generators appear in a choice of a reduced word. So the example on the left is a picture for this particular reduced word for the heap of the corresponding element. The corresponding element in the vile group when our G is D5. And the labels are 1, 2, 3, 4, 5. So 3 is the central note. And this is an example of an element that is minuscule. And so this shape is well defined. It's independent of this particular choice of a reduced word. So in this case, we'll just denote. So, in this case, we'll just denote h of a word by h of the element that word represents. So, here we'll want to consider in a moment order ideals in our heap. So, because it's a postet, we can consider order ideals and these because the Because the element is minuscule, can be identified with left, well, with V that are less than or equal to W in this left Brouha order, but with our convention that actually appear as right subwords. It's not too important. Choose left or right. We can identify order ideals with certain suffix or prefixes of our reduced expressions. Okay, and just a note on how this abacus model appeared in this work of Arun, Ram, well, Ram and Kleshev, is there they used it to give constructions of homogeneous KLR modules. So for every heap, they'd give a basis for a KLR module, if you've seen those before, generated or concentrated in one degree. Okay, so what is a crystal, and why are they related to these heaps? So we saw in Joel's talk what it is. So we'll just review notation. A set V is a G crystal if it is endowed with a weight map, so a map that assigns to every element a weight. That assigns to every element a weight in the weight lattice of G and certain epsilon and phi maps that tell us sort of how far we can go in the how far we can lower and how far we can raise an element, which would probably come after the actual raising and lowering operators. So for every Chevrolet generator of G, you have a raising operator EI tilde and a lowering operator FI tilde. tilde and a lowering operator fi tilde and they are partial inverses so they're not always defined from b to b as joel mentioned that's why we have a dashed map here um so this is the data of a crystal subject to various axioms including that these e's and apps behave as partial inverses and And more notation, we won't be considering just like any arbitrary crystal, but again, highest weight crystals. So, whenever there's a weight that highest weight crystals for irreducible representations. So, how these things come up is they are a combinatorial shadow of a basis in an irreducible representation of your group. Of your group. And we'll also, so part of the generalization is that we can use this reverse plane partition construction to model what are called demazeur crystals. So a demazeur crystal is a subset of a highest weight crystal. Of a highest weight crystal that depends on an element of the vile group. And if we pick, again, a reduced word for our element, this is completely general. It doesn't have to be minuscule or anything, then we can define this subset by just lowering. Oh, I'm missing the tildes here, but applying my lowering operators to a highest weight element, which I'm denoting here by little b sub lambda. Which I'm denoting here by little b sub lambda. So, in all possible ways, but as long as I like follow this path indicated by the choice of a reduced word. So back to the case that we are studying, which is minuscule W and minuscule, well, witnesses for minuscule. Well, witnesses for minuscule W. Already heaps and their order ideals model certain very simple crystals. So we have the following proposition that if W is lambda minuscule, so lambda is a witness for this element, and from now on, let's just assume lambda is dominant, then the Is dominant, then the order ideals of this associated heap are a model for the Demoger crystal B sub W lambda. And just some of the data that I listed, what does it look like in this model? So the weight of an element, which we saw in a previous slide, the order ideals can be identified with subwords. So the weight of an So the weight of a subword v is just v applied to lambda. And how does the lowering operator act? Well, if when I multiply my element by the corresponding simple transposition or generator of the vial group, the length increases. But is still a subword of the W, then that's where I go. So this is another element of my heap. But if it doesn't increase and or it's not anymore a subword, then it goes to zero. So the abacus model is a really convenient visualization because you can think of us as just like dropping an SI bead as part of. bead as part of our action. So FI, the lowering operator, actually adds beads to runners in this model. Okay. We'll want to sometimes index kind of our words by certain subsets of the Dinkin diagram. So given a subset J, I I can consider the sub-group of the vial group generated by all the corresponding simple reflections. And then the set of minimal length representatives for, I didn't write it here, the quotient w mod wj is identified with the identified with the heap oops with the heap of w not j where this is the minimal length representative of the longest element in that quotient so the quotient is just w not w j And this is isomorphic to be lambda where lambda is a sum of the fundamentals indexed The fundamentals indexed by J's that aren't in your subset. So, just making things a little bit more concrete, the example on the right here is when J is everything, well, J is one and two, so lambda is just omega two. We have the full B omega two crystal, and our W naught J, the minimal length represents. The minimal length representative is going to be, we can read it off this picture: S2, S1, S3, S2. Type A3. Yeah, so it's type A3. Yeah. Yeah, so this is a very still limited picture, but nice to play with, where the heaps themselves are the models. So, you know, there's not a lot of weights. There's not a lot of weights, there's like a finite number of weights that we can deal with. But what we can do is generalize to minuscule multiples. So title of the talk. So taking a lambda that is a witness for a w, same two inputs here, but a multiple. So arbitrary multiple n for this pair lambda and w. And still use heaps, but maybe in multiples. That's where reverse plane partitions come in. This is my set of reverse plane partitions associated to a W and an N. And how do we think of them? These are order-reversing maps from maps from the heap of W to the integers 0, 1 up to n. And we call the set of such maps plane partitions of shape H of W and height N. So this just is a notation for the order reversing property. And well this is the order that we defined before on the Posets. Order that we defined before on the postet structure, right? That is H of W. Okay. We can layer such a map. So we can really think of this as a reverse plane partition. If you've seen the pictures before, it's like stacking kind of nested Young diagrams, and you get this three-dimensional plane partition. We can view these as Layered by order ideals in our heap. So, what we do is we define layers, so just like sort of level sets, so the pre-image of phi on a subset of these possible values for our reverse-plane partition phi. Reverse point partition p and depending on k so these layers form an increasing chain because of the order reversing property. I think phi k is in phi k plus one and they embed this set into just take um tuples of order ideals. Of order ideals. And this is what we do. Well, this is kind of the simplification, how we think about the reverse plane partitions in order to prove that they form a crystal. So the key thing is that the order ideals of H of W, they form a crystal in a very simple way. But when we consider two But when we consider tuples, well, we can think of that as a tensor product crystal and sort of apply the rule on the right-hand side that we know for tensor product crystals. And note that it preserves the image of Rwn. So it preserves this increasing chain property. So we could just pull it back to the set Rwn. There is some. There is some more arguments to, well, some work to be done to show that this is preserved, but basically we reverse engineer the structure on the right-hand side to get the identification of Rwn with BW and lambda. Okay, so for example, if I had this word again, 2132 that we saw in the A3 picture. The A3 picture on the previous slide, then I could visualize my RPP as a bunch of numbers sitting on top of the elements of the heap that I associate to this word. And I layer it, so I just peel off kind of these non these nested Zero one RPPs or order ideals, starting with as many copies of kind of the minimal RPP that is all, sorry, the minimal heap that is all ones, minimal in the sense of the crystal structure. Remember, the F's kind of put beads on runners, so the very bottom one is the one that has all the beads on. The beads on. And then I apply the crisis. So if I wanted to like lower this element, then I would apply my operator on the right-hand side and then reassemble everything and see what it is on the other side. So, just a brief foray back to what this is for the type A setting that we mentioned that we're That we mentioned, that we're trying to generalize. So, in type AM-1, you may already be familiar with RPPs. We can go from the semi-standard Young tableau that index the crystals there to reverse plane partitions via what are called Gelfand-Settlin patterns. So what is a Gelfin-Settlin pattern? We start with a tableau and we look at the shape array that I'm using this notation. That I'm using this notation for lambda upper one through lambda upper m, that is made up of the shapes of the sub-tableau of our starting tableau that are got by throwing away any boxes with labels greater than i. When the tableau that we start with is rectangular, so when it is minuscule, having shape and N and N for like P n's, then its GT pattern can be identified with a rectangle. So, in general, the GT pattern is going to look like a triangular array, right? You start with how many ones do I have? How many ones and twos do I have? And so on. And the bottom row is just the shape of your original tableau. But when your tableau is a rectangle, there's a lot of symmetry in the pattern. There's a lot of symmetry in the pattern that you get. So you can just identify it with a rectangle. And this array can then be viewed as a reverse plane partition. This identification gives us a bijection of the crystal structure on Tableau and the one on RPPs that I claimed up to a Schutzen-Berger involution. So the E's and the Berger and volution. So the E's and the F's are, the actions of the Es and the F's are interchanged. So this is the kind of identification. I take this thing. The symmetry you can see is I have zeros on the left or on the right and ends on the left. And the bijection is got by reflecting this rectangle and rotating it and arriving at an element phi of tau. Arriving at an element phi of tau of Rw0j, where again, J is the subset that is all vertices but P. So this thing that we produce, it has shape of this heap associated to the Grassmannian permutation. Okay, so Okay, so switching gears a bit to talk about now the compatible geometric construction for the crystal B and lambda. For this, we need modules for the preprojective algebra, and we need to be able to get them from heaps. So already, if you've worked with modules for the preprojective algebra, you might recognize that the heaps that we're drawing look kind of like what you might visualize modules for preprojective algebras as. For pre-projective algebras, as. Oops. Okay, so given a weight lambda that's an arbitrary sum, just I have an expansion for it in terms of my fundamental weights, omega i, I can associate to lambda an injective module that's got by taking a direct sum of qi. Qi's with multiplicity and i, where this q denotes the injective Hall of a simple module for the preprojective algebra of the Dinkin quiver of my Lie algebra. So a simple module for this algebra is just a one-dimensional module that's concentrated in degree I. Yeah. Yeah, so as I said, I'm omitting the definition for the pre-projective algebra, but hopefully we've seen some of us have seen it before. And then, if not, you could just think of this as a category of modules that have nice structure. There's injectives, there's projectives, and there's a way to build them out of weights. So there's a theorem in our paper, which basically collates results of Nakajima and Savage. And Savage and Tingley, which is that the quiver-Grismanian, so of Q of Lambda, when, well, sorry, this is in general, the quiver-Grassmanian of Q of Lambda, which is all submodules of this Q of Lambda, so M sub Q lambda, is a model for the highest weight crystal B lambda. And I'm missing irreducible components here. There should be. Irreducible components here. There should be a IRR. So the irreducible components of this thing, which is a projective variety, model this crystal. And in the case that lambda is minuscule, and so now we're going kind of the other way, we consider the minimal representative w0j, which is just the minimal length element that takes lambda to w not lambda. Then Then the injective Q of lambda can be identified with this thing on the right-hand side, which is a vector space spanned by kind of the beads. So I'm taking the beads in my abacus configuration as indexing a basis, the heap as indexing a basis. The heap as indexing a basis. And the module structure is a little bit subtle to define, but it's basically from the picture. The way that things fall according to this abacus model is the way that they will interact. So, is the way that the pre-projective algebra will act on them. So, there is a So, there is a pi module structure on the right that we can define. It's not just a vector space. And it is agreeing with what we would get just by considering the pi module q of lambda. This can be refined a little bit. So any order ideal in this set is actually indexing an irreducible. Is actually indexing an irreducible component of the quiver-Brasmannian of Q of lambda via this isomorphism. And this kind of gives us the bridge to identify the crystal structure on GerQ lambda for these particular sorts of lambda with reverse plane partitions. So there's actually two. There's actually two explanations for this identification, two proofs in this project. But the one that I will mention is that there is this crystal isomorphism coming from a certain ad hoc nilpotent, not endomorphism, actually, just linear, linear map of Of heaps of modules associated to heaps that is defined in terms of the underlying heap. Okay. The case that, again, lambda is just a single minuscule in type A recovers the isomorphism, where again, I'm missing the irreducible bit, but irreducible components. Bit but irreducible components of the flag variety of some associated nil potent and the young tableau up to Schutzen-Berger involution. Okay, let's talk about connections to cluster algebras. Or actually, first I'll pause. Any questions about these constructions? So, hopefully, you have some idea of Of okay, um, it's a playful model for certain crystals. Now, what about cluster algebras? So, there's a paper by Geisler-Clerk and Schroyer that gives us a cluster algebra structure on certain on algebras associated to flag variety. To flag varieties. So I'm gonna use a notation that's a little bit annoying because, well, it's consistent with the notation that we use in our paper versus the DLS paper. But just a brief recall, so I can define the parabolic subgroup of my, say, semi-simple. Say semi-simple group G associated to the complement of my subset J by taking a Borel along with the one parameter root subgroups that are indexed by those nodes that are not in my subset J. So some parabolic that's indexed by some nodes of the Dinkin diagram. Diagram. Actually, two, a positive and an opposite one. And by N sub i less j, I'll denote the unipotent radical of this parabolic. And by q i less j, I'll denote this injective that we've already sort of seen associated to this set. That. Again, this is associated to the pre-projective algebra module. So I think it's rather, well, I think it's 2008 this paper is from, but Geisel Kerk and Troy constructed a cluster algebra for or sitting inside the coordinate ring of this unipotent subgroup, as well as a compatible. Um, a compatible cluster algebra structure, so a lift of this one to the parabolic G mod B, where, well, B minus, the parabolic associated to this data. And this ring, it has a representation theoretic way of thinking about it. This is a direct sum of irreducibles. Sorry, I changed from V to L here, but highest. B to L here, but highest weight irreducible representations of G. Oops. And in this special case again, where my quiver is type A and my input is such that I end up with just considering this maximal parabolic associated to a fundamental omega p. Omega p, we get, well, one of these cluster algebras is actually equal to the coordinate ring of the Grassman associated to this peak. And the theoretic point of view is giving us just a direct sum of irreducibles indexed by minuscule multiples. So on that So on that right-hand side, we have the vector spaces for which we know there's a crystal that's modeled by reverse plane partitions. The GLS construction, it relies on the pre-projective algebra. So the recipe for this AJ is the recipe for constructing initial seeds comes from Initial seeds come from fixing a reduced, certain reduced words for W naught and kind of inductively or recursively building up these basic complete rigid modules, which play the role of our initial seeds and mutating in the category of submodules of this injective pre-projective algebra module. So, mutation uses some short exact sequences. So, I mentioned this because, okay, a natural question is: how does this cluster structure interact with the crystal, with the combinatorics of the model for the crystal of the right-hand side that we have developed. And one way to think about it is in terms of modules for the pre-projective algorithm. Of modules for the pre-projective algebra. Already, our RPPs have a module theoretic interpretation, and so maybe we can sort of mutate those combinatorial things using this short exact sequences. So, translating back to what they mean in terms of modules. So, yeah, this is question number one: How does the RPP? Question number one: How does the RBP crystal structure for these pieces on the right interact with the cluster structure on the coordinate ring of the associated Grassmannia? In particular, what does mutation look like for these reverse plane partitions? But, well, okay, let me follow my slides. So, GLS. So GLS also gives this coordinate, this cluster algebra structure on the unipotent subgroup as a subspace of the coordinate ring of the unipotent subgroup, which came up in Joel's talk as a ring with many perfect bases. And as Joel mentioned, the various perfect bases. Joel mentioned the various perfect bases of Cn. Well, it's a big question as to whether they intersect perhaps at the cluster monomials. So this motivates another kind of approach to answering this question of what mutation looks like because we have at our disposal other constructions, other constructions that all have the same underlying crystal. All have the same underlying crystal combinatorics. So, while the perfect bases themselves may not agree, the crystal structure is the same. So, with Roger Bay and Joel Kamitzer, we checked, for instance, that the Merkovich-Valonin basis in the SL4 case contains the cluster monomials. And we did this in what we called conceptually easy, but a rather computationally difficult. But a rather computationally difficult way. And in the affine Grassmannian, actually, in this two-point deformation, the Bellins and Drinkful Grassmannian, where like mutation of in the MV basis was realized as a fusion of the cycles labeling this basis. It was also kind of limited because it relied on something available only in type A, which is this Mirkovich-Vibernov isomorphism. Mirkovich Vibernov isomorphism on NV isomorphism, another NV. But what was interesting about what we checked was because it was a type A check, in a sense, we could label our, well, actually, yeah, in this type A check, we could label our geometrically constructed basis elements by tableau. And then the complicated fusion exchange. Complicated fusion exchange looked somewhat simpler. So, in terms of Tableau, the exchange relations that we witnessed were mostly of the following form. So, if I have a basis element indexed by a Tableau tau and another by a Tableau sigma, and I want to see, I want to verify an exchange relation, then what we got was the Then, what we got was that the two terms on the right-hand side were exactly the RSK insertion of one tableau into another. So, a kind of symmetrized RSK. It's not true for arbitrary monomials, like so once you start to multiply maybe tau squared with sigma squared, there's going to be other terms, but at least on basic cluster variable terms, that's what it was. That's what it was. So, an observation is that if we translate these equations into RPPs, which we know that we can go from tableau to RPPs, then we notice that the mutation can be obtained by something called toggling. So, here, mutation of tau in the direction I, where, like, is there a question? Sorry, no. There's again, it's type. There's again, it's type A, so the cluster structure of Cn actually it's A3. So CN has a very easy finite structure. There's a quiver. Mutation at I really mean at I, the node I of the underlying mutation cluster quiver for this cluster algebra can be obtained by toggling the RPP we just associated to this tableau at I. So So the tableau and their RPPs, they live over the same Dinkin diagrams as the types of the cluster algebra. So what is toggling? Brief end to the talk. Well, first of all, I open this by saying that we set out to generalize some correspondence, but really this project was inspired by a paper by Garver, Petraeus and Thomas. Petraeus and Thomas. That was very different, but also involved RPPs. And we don't know exactly how our papers are connected still, except for this one idea to end my talk. So in their paper, they extend the notion of toggling for a postet to toggling an RPP. In our notation, if I start with something. If I start with something in the set of RPPs index by W and N, I can toggle that at a point X in my heap by fixing all other kind of values of my order reversing function and replacing the value over the element x by By this expression, I won't unravel it. Just there it is. The resulting RPP we're going to denote by tau x of rho. And if the points x and y, so if the points x and y, If the points x and y of the underlying heap are kind of on the same runner, which is all that this pi-inverse i notation means, then their toggles commute. So we can take the composition of toggles at all points over a single in a single runner, and that's a well-defined thing. So, this composite toggle is the toggle that we really want, and when we apply And when we apply this toggle in this SL4 example, where this is my mutation quiver, blue things are frozen. So these are the kind of equations that we got by using this really complicated fusion. But it agrees with what, so here, kind of everything to the right of the green, you could see. The right of the green, you could see appeared in the original quiver. So these are all kind of initial cluster variables. And I could produce this green tableau by going through the fusion, or I can toggle the RPP associated to, well, not quite 2,3, but the Tableau 1, 2, 3. So our Tableau are kind of invariant under padding. Kind of invariant under padding. If I put a one in the first row, it doesn't change anything. So I can also produce this by toggling over the second vertex. And that's one piece of evidence. Another piece of evidence is just another relation where I do the same thing. On the one hand, you get this expression by doing this valence and drink filter grossmanian fusion. On the other hand, you get this mutated. Tableau by applying a toggle. So that's really cool. I don't know the explanation for it yet, but that's an open question. How another direction to think about another approach of thinking about this question of how the cluster structure interacts with the RPPs. And just to the header on these slides, so this This, if you recognize it, is the complementary exchange relation in terms of pre-projective algebra modules. And it looks nothing like the RPPs. So this might have to do with the fact that the crystal structures are off by the Schutzenberg, but it also highlights that this is just going to be a different approach than the one where we recon like go through. Go through the Geisler-Clair controller structure on the coordinate rings of those partial flag varieties. Okay, so I think that's all to end my talk. And thank you and happy birthday, Bernard. So, are there any questions from the online participants? I have a question. Hi, it's Ellie. Hi. So, yeah, I just wanted to be sure. I was a bit confused. You mentioned at the beginning of your talk. Mentioned at the beginning of your talk, this construction by Kless, Chef, and Rahm of homogeneous K-R modules, which are also indexed, I guess, by minuscule or dominant minuscule elements of bulk groups, which means that for them, like one minuscule element gives you one element of the dual canonical basis, say for CN. So that's not exactly what you get, right? You get rather for each. You get rather for each minuscule element, you get like a unipotent cell, I guess. Am I saying something wrong, or did I misunderstand? No, I think, yeah, basically we get many elements, but I think we're just that's because we associate many elements to a single minimal representative of a longest element. Yeah, so they can like if you just look at W0J, then you can. Just look at w0j, then you get a single element, and then maybe that's more related to the construction. I see, okay, yeah. And also, maybe more technical question, but so you need this minuscule assumption, right? It doesn't work for any fully commutative elements. Like, could you generalize your construction to all fully commutative or really necessary this minuscule assumption? This minuscule assumption? I'm going to say yes, or we don't know how yet. Okay. Certainly, if it's not fully commutative, we don't know how to build these heaps, but I don't know that we get a meaningful crystal if there isn't a minuscule assumption. Like you need this witness, right? You need a weight for your element. Oh, I see. Element. Uh-huh. Oh, I see. Okay, fair enough. Thanks. Thank you. Further questions from nine participants? Well, if not, maybe we continue for some moments. So there's a question from Bernard. Question from Bernard. Yes, just a general question. Is there any relation between the fact that you consider only this minuscule case and the fact that our cluster algebra structure are of finite type? I mean, you know, this cluster algebra for flag varieties, they may be of finite type or not. And we have a classification of the finite type ones, I think. Finite type ones, I think. So, is there any relation between being of finite type and corresponding to some minuscule thing? Maybe it's for you. Is it true that when the weight is minuscule, that it is finite? I can't remember yet, but that it was true, I think, but I think it was a long time ago. I don't think it's exactly an equivalence, but uh maybe whenever it is meaningful to give something uh. Yeah, I'm moving, but I had to look up. I asked Arun Ram once, and he mentioned this work, Geisen Schreuer, this extra orthogonal paper, very short paper, that this non, something about non-minusculutity of the Auslander-Wright and quiver is exactly where things are not cluster. And I never, yeah, I haven't been able to understand the comment, but Thanks for further questions. No more online questions, so then maybe let's thank Anne for her nice talk and