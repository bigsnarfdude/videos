Thank you to the organizers for putting together what has been a really wonderful conference. I've learned a lot and had a really wonderful time. So, as Joachim said, I'm going to be talking about cyclic two-seagal objects. And the story that I'm going to be telling today is something of an old story, and so I apologize if any of you have heard me tell it before. So, previously in this particular lecture series, for For C, an infinity category with enough limits, in my first talk, I more or less sketched the following correspondence, though not in any of these words. We have two Siegel objects, so functors from delta op to C that satisfy the two Siegel conditions. And then these can be interpreted in two ways, or actually many more ways, but two ways that I talked about. Ways that I talked about. Firstly, they can be interpreted as algebras, coherently associated algebras, in the infinity one category of spans in C. So this is the category of objects or the objects of C, and whose morphisms are spans. Two isomorphisms are the commuting diagrams between spans, and whose composition is pull pack. And on the other hand, these can be viewed as. These can be viewed as c-value state sums over triangulations of polygons. You can view these as things that you can glue together over a polygon in a way independent of the triangulation. And so the latter of these two statements is from Dikhorhov-Kapranov in their original paper on two Siegel spaces. And the former is from myself in 2019. So last time, So last time I traced through this set of correspondences from left to right, and today I'm going to go the reverse direction. So let's focus on these c-valued state sums. And I've chosen the way that I've phrased this specifically because it's going to suggest the generalization we're going to pursue. So just to briefly recall, if we have two different triangulations of a polygon with labeled vertices, then Vertices, then we can attach pieces of x, in this case since it's a triangulation and not a more general subdivision, copies of x2 and x1, as well as morphisms between them. We can take limits to get what we call the membrane spaces. And then the two Siegel conditions tell us that if we put, in this case, x5 in the middle, we get an equivalence between them in a canonical way. And that's one way. Way. And that's one way of interpreting the two Siegel conditions. But one way that we can think of this is that this really is a state sum. We're assigning data to pieces of a triangulation and gluing it together. And this is invariant under our choice of triangulations. So this, at least to my mind, does raise one fairly natural question, namely, what additional data and structure do we need to be? Do we need to be able to do this same sort of state-sung construction over an oriented surface? So, an oriented surface sigma. And we can make a couple of observations right off the bat that will help us ascertain what data this should be. Firstly, all of the subdivisions that appear in the two Siegel conditions have the same set of vertices. So if we look here, while we can change the triangulation. While we can change the triangulation a lot, we can't really change the set of vertices. And so this suggests that we're going to need some additional data on our surface, namely we need to equip it with a chosen set of marked points. And this drawing should suggest some of the conditions that we actually need to put on that. I'm going to, for instance, be implicitly assuming that this set of marked points meets every boundary component. Of marked points meets every boundary component, that there are enough to be able to triangulate the surface, and that the set of marked points is finite. So instead of sigma, we have a surface sigma and a set of marked points M. Okay, that's the first observation. The second is that given a subdivision T with vertices precisely our marked points, we will naturally get We will naturally get a cyclic order on the vertices of each polygon. So, if we take this triangulation of the torus with three edges and unfold it, we can think of the orientations, these little spirals in each triangle. And that tells us not a linear order on, say, the vertices of this triangle. That's pretty good. Not a linear order on the vertices of this triangle, but The vertices of this triangle, but a cyclic order. And so the takeaway from this is that we need a way of relating cyclic reorderings of the vertices of our polygons. So what we want is a way of saying that all three of these choices are the same. And the way we're going to do this is by putting some additional structures. Do this is by putting some additional structure on our simplicial objects, on our two siege simplicial objects. So, definition: a Kahn's cyclic category, which I'll usually just call the cyclic category and is conventionally denoted by a capital lambda, has, as its objects, oriented circles together with a finite set of points in the circle of cardinality n plus 1 for n greater than or. 1 for n greater than or equal to 0. So you can think of these as analogs of the objects of the simplex category in a way that I'll explain shortly. And morphisms from a circle with set I of points to a circle with set J of points are going to be homotopy classes of degree one smooth maps from the circle to the circle that send the marked points into the marked points. Now, Points. Now, it's worth saying that these should be homotopy classes through maps that send the marked points to the marked points, otherwise, this definition is a little useless. So, for example, we might take this circle with five points and this circle with four points. We can collapse the purple points to the point indicated by the arrow. And then, this interval here, we stretch. We stretch across this whole interval send orange to this point, these two blue points here, and this is a reasonable map in this cyclic category. Now, I should also say there are more combinatorial descriptions of this category. One can describe it as effectively the simplex category decorated with cyclic automorphism groups for each object. Object. And the paracyclic category, which Yvonne mentioned yesterday, is in some sense a generalization of this in that there you're decorating the simplex category with Z automorphism groups, so free abelian automorphism groups. But that category, lambda infinity, pushes to this category. If you impose the restriction that That tau n to the n plus one is equal to the identity, you really do come back to a variant of the sigma category. You should be shared monotone. Degree one orientation preserve, yes, sorry. Yes, orientation preserving degree one. You could sort of stop at some point. I mean, you could sort of wind forth and back, right? And that's not what you want. Forth and back, right? And that's not what it winds up. Yes, okay. Well, but if it's orientation-preserving and degree one, and it winds forth and back, you should be able to homotope it so long as it's not through the marked points. Well, it may permute, sort of, and the work, it may destroy the cyclic order. Ah, okay. Ah, yes, you're right. Okay, so monotone. Thank you. Yeah, there is a vehicle on the teeth. So So there is a functor from, as I've perhaps hinted, that goes from the simplex category to the cyclic category. And while I'm not going to say explicitly what it does, there's a nice schematic picture that more or less tells you. You can view the objects of the simplex category as being points embedded in an ordered interval and maps, monotone maps from the interval. Monotone maps from the interval to the interval that preserve the endpoints and preserve the set of marker points. And basically, all this functor does is close that up. So we have our oriented interval, and we close it up to a circle, to an oriented circle. And this defines a functor that is, in fact, faithful. Not full, clearly, because here we have the rotation maps that give us precisely those cyclic automorphism groups. But faithful, and if you take an appropriately skeletal version of both of these categories, bijective objects. So a functor out of the opposite of the cyclic category is what we'll call a cyclic object. And we'll call a cyclic object 2-sigal if its restriction to the simplex category is 2-siegal. So we now have added in more or less the data that we wanted. More or less the data that we wanted. Now we're not really depending so much on a strict linear order, but rather a cyclic ordering of points around the circle. So let's try and construct the appropriate state sign. The input data are going to be the following. We're going to start with a two-seagal cyclic object in city, sigma-m, an oriented marked surface with boundary, where the With boundary, where the marking satisfies these conditions that I was mentioning before. And T, a triangulation of sigma with vertices, a set of vertices precisely that set of marked points. So we're going to reinterpret the triangles of our triangulation. We can view this oriented triangle as basically an oriented circle with three marked points. We can view an oriented end. We can view an oriented edge as an oriented circle with two marked points, and we will get canonical maps between the edges and triangles, much as we did in the state-sum over polygons. And so we get a diagram valued in the cyclic category, and we can apply x to get a diagram in C and take the limit of that. And take the limit of that. And that will be our appropriate state sum. So, for example, if we take this cylinder with two marked points, one on each boundary component, and this simple triangulation where we have two edges, we can extract the following diagram. Two copies of x2, one for each triangle, two copies of x1, one for each edge, and they're pasted together. And they're pasted together in something of a loop. And we take the limit and we get the categorified state sum. And I'm going to denote this by x of sigma and tau. So a theorem of Dikohoff and Kapranoff in 2014 says that this state sum really behaves the way we want a state sum to. So if we take any two triangulations, T1 and T2, of sigma m. Of sigma m, and when I say a triangulation of sigma m, I mean a triangulation of sigma that has m as its set of vertices. And x, a two-seagal cyclic object in C, then there is a canonical equivalence between x of sigma t1 and x of sigma t2. And so I'm going to abuse notation a little bit by just calling that x of sigma n. And moreover, this actually comes equipped with an action of the oriented mapping class group of the marked surface. Coherent if this is taken infinity categorically. So we now have invariants of surfaces that come equipped with a mapping class group action, and they're built out of a state sum. And so it is very reasonable to wonder: do these invariants form? Do these invariants form a topological field theory in an infinity one-categorical sense? Because these coherent actions we would expect to come from something higher categorical. And this is something of a tricky question to answer. And to do it, we're going to appeal to a theorem that is not quite a theorem, but But that will become clear in a moment. But to answer this question, what we're going to have to do is pass back to that algebraic picture that I started with five days ago. So there is the following theorem of Costello and Luri. The reason that this is in quotation marks is so Costello proved it in the DG case, and Lurie sketched a proof on the classification of topological. In on the classification of topological field theories, but that still is, to the best of my knowledge, just a sketch. And so this says that if we have a symmetric monoidal infinity category, then there's an equivalence between open-oriented two-dimensional topological quantum field theories in C, and I will say in a moment what these adjectives mean, and Calabi-Yau algebras in C. So by an open So, by an open-oriented topological field theory, I mean a topological field theory whose Bordism category is constructed out of manifolds with corners, oriented manifolds with corners, and has as its objects disjoint unions of intervals. So, for instance, this flat pair of pants goes from two intervals to one interval. This odd cylinder with two embedded boundary intervals goes from one interval to one interval. From one interval to one interval. And this flat pairing goes from two intervals to no intervals. And so this is a symmetric monoidal infinity one category where the objects are these disjoint unions of intervals, the morphisms are these boardisms with corners, and the higher morphisms are diffeomorphism spaces. So these form a category that I'll denote by board to. Category that I'll denote by board to OR NC, NC for non-compact, OR for oriented, and 2 for two-dimensional. And so these are just symmetric monodal functors Z from this category into C. On the other hand, Calabi-Yau algebras in C are going to consist of an A infinity algebra in C. So this will consist of some object x in C. X in C together with multiplications going from the nth tensor powers of X to X that satisfy coherent associativity. And to some degree, we already know that this is some structure that we have, but a Calabi-Yau algebra has additional structure, namely it has a trace that I'll write here as epsilon, and it goes from x to the monoidal unit. To the monoidal unit, and it needs to satisfy two properties. First, it has to be non-degenerate in the sense that this snake relation holds. And if you compose epsilon with mu n, this has to be z mod n invariant. So you have to be able to permute the inputs and get a coherent system of isomorphisms that relate the results. The results. Okay, so here's the data on each side of this correspondence. And so how do we extract the Calabiel algebra from such a topological field theory? Well, we can assign to Z the A infinity algebra that is given by a Algebra that is given by evaluating z on the n-fold flat pants, or the flat pants with n legs. And we can get our trace by evaluating z on the flat cap. And this is how you extract the Kalapi-Yau algebra that underlies such a topological field theory. Now, I should also mention, because I think Mention because I think it briefly came up in Yvonne's talk. Such a Calabi-Yau algebra can be viewed as a categorification of a symmetric Frobenius algebra. So this is a Frobenius algebra where the various pairings that you get are cyclically invariant in much the same way that this definition requires, but with one category. So, okay, so we can evaluate. So, okay, so we can evaluate our Z on these particular objects to get our A infinity algebra and our trace. And we can take as given that this really is an equivalence, that this defines an equivalence between open-oriented DQFTs and Calabi-Au algebras. So now, if we suppose that our state sum works, we should be able to start with a two-seagal cyclic object in C. Siegel cyclic object in C. There's going to be a slight issue. I'll point it out in a moment. And we should be able to construct Zx associated with this. Now, the slight issue is that this should now be valued in span C. My apologies. So we should get a TQFT in span C, and then we should be able to evaluate this on this set of bordisms and extract. This set of Bordisms and extract a Calabiel algebra. And here the multiplication is going to be given by exactly the same multiplications that I mentioned in my first talk. And the trace is going to be given by a span x1, x0, the terminal object. Now I should say, well, this is a little imprecise the way I've written it. Precisely I've written it, this is not just going to be S naught, the left-hand half of the bottom span, but rather S naught composed with the appropriate cyclic automorphism. Okay, so we now know the data that we should get as a Calabi-Au algebra if this really does give a topological field theory. And so, yes? And so X1 comes equipped with a cyclic automorphism. Yeah. Yeah, so this is related to what we were talking about yesterday in that in general when you're, for instance, constructing paracyclic or Frobenius algebras from paracylic objects, you actually are twisting by this additional automorphism that you get. It's not just It's not just the unit read backwards or the dagger of the unit. So we now have a candidate for what should be a Calabi-Yau algebra in span C. And we can check whether this state sum gives us topological field theories by checking whether this construction really gives us Calabio algebras. So the possibility So, the punchline then is the following theorem. If C is an infinity category with enough limits, then there is an equivalence between two Siegel cyclic objects in C and Calabi-Yau algebras in span C. And so if you couple that with the theorem above, what this tells us is that two-seagal cyclic objects in C are the same thing as open-oriented 2D topological field theories in C. 2D topological field theories in span setting. So, this is actually a little stronger than one might have expected. It's not just that this construction does give us such TQFTs. It gives us all such TQFTs. But what about finiteness conditions on X? Finiteness conditions on X. This really is an equivalence of infinity categories. You don't get any finiteness condition. Part of this is that non-degeneracy is, let's say, a weaker condition in spans than it is in most categories. Or dualizability is a weaker condition. Every object in span is dualizable. And so that might go a little bit over the way to explaining why you don't get finiteness conditions. Lightness conditions. Yeah. So that is basically all I wanted to say. Thank you very much for your time and your attention. Questions? So I don't know if it's too related to your team's question, but if you replace instead of scancy, you really want. You replace instead of span C, you really wanted to do it in C, like you want to consider like cloud. So, would you have to impose some sort of like additional, you know, like fineteness or things to work? So, you could view C as the infinity subcategory of span C where all of the left-hand sides are equivalences. So, yeah, it's tricky. Yeah, it's tricky because so for A infinity algebras, you really just require that the morphisms that give you the left-hand side of your multiplications and your unit are isomorphisms. And that will give you an A-infinity algebra. But with this non-degeneracy, you need the co-pairing as well. And so I don't have an easy answer for how you would force this to live in that subcategory. This is to live in that subcategory, force all of the data questions to live in the subcategory. An alternative approach would be to just like map explained, you can produce some two-seen object algebra by applying some kind of transfer. I think here I guess if you have a TV, you really need to spend some time. I'm sorry. I'm sorry. Yes, I'm saying the same way you can produce whole algebras from two SQL spaces, and then that will require some finite s conditions. You can also produce sort of more classical versions of the functions by applying exactly the same transfer theories, as long as this object satisfies the right finance. I think that in some cases that will be a little bit tricky. So, when you have very different classes of smooth and proper maps in this transcript theory, Than proper maps in this transfer theory. Somehow, the fact that the trace is almost the co-unit backwards means that you'd need the right-hand side of the map of the zeroth degeneracy to be in both of these classes. But for things like Jota talked about, it shouldn't be an issue. Yes. Um what about morphisms? Can you say that? Okay, yeah, so that's a little bit complicated and I sort of deliberately skated over this the way that I wrote it. So the way that I proved that particular equivalence is you define an operad Operad whose algebras are the appropriate type of algebras. And then you pass through a series of adjunctions so that you get some category such that functors into C index the algebras that you want in spans. Now, what this ends up meaning is that the morphisms that you're considering are not, say, Are not, say, like natural transformations whose components are spans, but really something more like degree-wise natural transformations. Degree-wise natural transformations satisfying no other conditions. And so those correspond to the morphisms in the cyclic category. Now, when you restrict to equivalences, these do also correspond to true equivalences of algebras. True equivalences of algebras. And so one way that you could reinterpret this is to say there's an equivalence between the groupoid of algebras and spans and the groupoid of two SQL objects. But it does have this additional functoriality and these sudden strange morphism of objectives and spans. When you get to these calabiao algebra, is it then automatically inversible the No, because so few conditions are being placed on them. Like, these maps don't represent true maps of algebras in any way. You would need a pullback condition for them to represent true maps of algebras. This follows immediately when it comes to equivalence, which is why it descends to give you equivalences. But so these maps aren't really like true maps of algebras in general. You would need a pullback condition that I'm pretty sure is just your cough condition. Lax maps felt. Yeah, there's something like lax maps felt. Although I haven't worked out a formalization of that, but yes, they should be something like that. No questions? No questions? Otherwise, maybe I'll take this moment's break before we continue this.