So, today I guess I will be just kind of reporting on ongoing work. What is really a collection of several pieces of work that have taken place over the past few years in which a number of people tried to understand the how the, you know, How the these effective considerations can be imposed on various kinds of areas, in particular, topology, effective topology and effective analysis. So as per usual, I always start my talk by just trying to understand, right? So describing the overall theme of what I think, this whole area of recursion theory. This whole area of recursion theory is about. It's really about studying the concerns or the effective content in mathematics, trying to measure and calibrate the different processes in mathematics. Now, there's a lot of work, of course, as we all know, that has been done on countable structures. And a lot of these ideas have actually been carried from that setting into computer analysis. That setting into computer analysis and effective topology. So, we want to kind of understand what are the kinds of, you know, the objects that we can study, what we can say about these things. So, here's the, well, I guess very well-known definition on computable, countable structures. Going back to the 60s, a countable structure is computable with the domain, and all operations and relations are uniformly computable. Okay, now. Okay, now the idea, of course, is we want to kind of take as much of this very successful, very basic axiom, and think about how we can apply this to make sense of what an uncountable or the computable uncountable structure is. Now, of course, there's immediately you see some contradictory terms, like computable, uncountable. So we need to consider structures that are countably based. Now, of course, this is not the only way. This is not the this is. This is not the this is more of a self-imposed kind because because of course I'm personally more familiar with the tools of classical computability and I want to be able to do something so so I prefer to stay within the familiar realms of so so so therefore what I will usually be doing is only considering structures that are countably based. Now, fortunately for us, computable analysis has already provided the formal framework. Provided the formal framework. And more importantly, not just providing the formal framework, but also providing the intuition with working with uncountable objects that are countably based. Okay, so we're going to try to use as much of that, those intuition as possible. So the analogy here is if you have a Cori space, a completely separable metric space, it can be said to be computable if it is the completion of a computable metric space. Of a computable metric space. Now, a computer metric space, of course, is something that you can define in using just classical computability. So, again, it's got this definition, again, goes back, I guess it's hard to trace the original source, but it goes back as far as the 50s. So, a computable metric space is one which consists of a countable set of which we will call special points, and you also Points and you also have a metric, and now the metric gives you a computable real number uniformly in the indices of the inputs. Okay, so it's important to know that the output of the metric is a computable real number. It's not necessarily a rational. Okay, so the analogy here is the computer metric structure is essentially what Is essentially what we would call a computable presentation of the underlying computer, of the underlying topological space. So immediately we can see that we can start moving up the tools, right? Staying in the familiar, you know, trying to stay within the familiar setting of computable countable structures. Okay, so via this representation, we can now talk about things such as computable isometries because, yes. It depends on what you want. So I think if you opt the isometry is clearly no, but you can it's a good question. I think up to even up to home of this, I would imagine is answers. Yeah, I think. Yeah, I think we did ask this question before, and then we say, ah, yeah, no, it's just, and we forgot about it. No, I think I will say the answer is no, but we will need to think about it. Again, the question is how we want to classify things. So if it's up to isometries, the answer is no, but if it's up to a topological homomorphism, I would also guess the answer is no. But yeah. So we try to take the most general definition. So, we try to take the most general definition here. Now, via this representation, now we can talk about computable isometries because you can talk about the map from countable set to countable set. You can associate degrees to points via representations, and all of the things that we use in computable analysis can be applied here. Now, we can also, by the way, extend computability, the definition of computability in this setting, but to accountably based, not necessarily metrizable space. Metroizable space and the classical or the standard definition here is to call a topological space computable or effectively second countable if you can find a countable basis. And the rule on effectivity is that there should be the finite intersection of basic open sets is effectively open. There's a C set that lists the basic open sets that go into the intersection of any two basic open sets. Now, We also need one more condition that the intersection of two basic open sets being non-empty is a C predicate. Equivalently, you could make it simpler by assuming that all the basis elements are non-empty. Now, this condition is important because if you drop this condition, then any second countable space is effectively second countable. So, this is an important condition. It's trivial, but it's important to point out that we will assume that the Out that we will assume that the basis is always non-empty. Okay, so in a similar way, under this definition, you can extend the notions of computability, everything that we discussed, all the questions that I'll mention, all can be also applied to any space with this in this setting. Okay, one more thing to point out is this definition here is point-free, so it does not mention points and it's a very weak notion, as I will mention. As I will mention also a bit later on in the talk. Yes, and there's also one more thing to point out is in certain studies, people sometimes also impose a slightly stronger condition where apart from having such a basis, you also have a dense set of points where the membership in the basic open set is also a CE predicate. That's also sometimes the case. Times the case. Okay, so I will kind of divide the talk, if I have time, into two sections. So, again, remember the main goal of all of this line of research is to try to understand computability in mostly topological stases. So, there's two ways we can try to make sense of this question. The first is to look at the presentations of the Polish base. Okay, so again, we think of what we do normally. Again, we think of what we do normally in countable structures. So, for countable structure theory, one can study this by considering a couple of different approaches. So, one of them is you can look at the difficulty of computing a presentation of a countable structure. You can also look at the complexity of isomorphisms within a single isomorphism type. And we can try to think about this: how we can make sense of these two approaches now in the setting of the uncomfortable. Uncomfortable. And I should, of course, mention Ser Ivanov, who actually originally suggested studying the degree spectra of topological spaces in a paper which is a little bit hard to find, but then his concern was mostly on domains. But anyway, there was a general suggestion of doing this. And there have been various works. So, okay, so in this talk, I will consider the topological type of a Polish space. Type of a Polish space. Now, first of all, it's obvious that a Polish space is not always homomorphic to a computable one because there's just cardinality reasons. And I should also mention that if you're used to classifying things up to isomorphase, then sometimes your intuition may be a little bit incorrect. Because if it's now classified up to homomorphisms, then the metric is not necessarily preserved. It can be stretched or deformed as long as it's continuous. As long as it's continuous in any kind of way. So this is a little bit different here. Okay, now there's a few others who have studied the isometric types of a polish base. So especially shout out to them. But again, in this study, we are focusing mostly on classifying up to homeomorphism. Okay, up to topological spectra. So there have been some. Topological spectra. So, there's been some recent work, maybe not not so recent, but so there's a couple of results by Matthew Horop, Kihara, and Serivanov. So, for example, just a list of some, just a sample of some results. So, there is a low three space not homeomorphic to a computable one. For any n, the high 2n plus 2 degrees is a degree spectrum. So, I will not define formally what degree spectrum is, but it's kind of similar to the well-known. To the well-known counterpart. Many calls that the two degrees is a degree spectrum, in particular of some connected compact space. And also, there are some negative results. So certain things cannot be degree spectrums. So, for example, cannot be the union of non-trivial upper cones, similar to what we have in countable structures. And there's a couple of other results. So, this is not a full list, just you know, so please, if you're interested. So, please, if you're interested, yeah. Okay, now we started looking at these questions and we found that actually there are many basic questions involving particularly the presentations of Polish basis. And somehow they have remained open, well, not necessarily open, but they have never really been considered up until very recently. So, I'll give you some examples. So, for example, So, for example, Andrew is asked if every effectively closed subset of a computable space is also computable Polish, up to homeomorphism, of course. Now, the answer is, of course, obvious. It's true if the effectively closed subset is also computable, or some authors call it computable overt, meaning that you can effectively list out all of the basic sets that intersect the set. Of the basic sets that intersect the sets. It's really surprising if the set itself can also, so computing over it kind of means that you can kind of cover it also from the inside. Again, when you call covering from the outside, you can kind of get zoom in on an approximation to points in the space. However, it's not clear that this is going to be true for every space, every effectively closed subset. And indeed, that is not actually the case. In fact, it's a In fact, it's as far along as it possibly can. So the result is for every computable alpha, there's a computable space and an effectively closed subspace of M that has no zero to the alpha computable space representation. Okay, so now obviously this is kind of what one kind of thing you could look at, but in fact, there are also some other basic questions. In fact, there are also some other basic questions which apparently hasn't been answered up to very recently. So, for example, it is not known if, okay, so this, this, the answer to this, of course, is obviously a yes, but the question is, is there a simple Polish base that is not homomorphic to any computable one? For instance, I don't know, low or delta two or something? And certain limitations. So, if you consider only the countable ones, then they're kind of like ordinals, and you can use a similar analysis to. And you can use a similar analysis to show that these ones always have a computable copy. So therefore, we have to turn our attention to uncountable ones. And again, this result was more or less simultaneously obtained by some groups of people, which always is an indication that this is the right track, the right line of correct line of investigation. So there is a delta 2 home space which is not homeomorphic to a computable. Homeomorphic to a computable one. Okay, yeah, so this is for sure is a very basic separation result. Now, okay, this same question, by the way, I should just point out is actually trivial if you consider up to isometry, because, for example, if you take the closed interval zero alpha under the standard metric, anything alpha could be something like C but not computable, then this thing cannot be isometric. then this thing cannot be isometric to a computer isometric to a or even isometric to a um to a to a to a computable um space because if you have a computable space the the the diameter of the space is let's see you can measure the the the the the the two furthest points apart and that will give you a left sea approximation to alpha okay so but of course this is not true if you allow homeomorphism you can stretch and you can compress in any way you want Can stretch and you can compress in any way you want. So, so this is, of course, of course, a different question. Okay. So, since this is relevant to what we're going to be discussing, so let us just, I'm just going to introduce what will come out to be a very useful notion of what is called a star space. Now, so before we mention this, I just want to point out that the main difficulty in working Main difficulty in working continuously is that many of the notions that work for comparable structures do not work directly over here. Because for comparable structures, depending on the signature, you have full or limited capacity to encode stuff, where encoding and decoding can be done more or less easily. But because everything is kind of spread out continuously, so it's kind of difficult. So, it's kind of difficult. And this is one of the simplest, what I think is the simplest way of encoding information that can be really decoded into a computer polish base. So, a star space is one that contains stars and an n star. So, it's just one that is you just take close, you just join the close unit in the row. Yeah, this is a five. So, an n-star is a holomorphic copy of a space that looks like that. Everything is closed. And the star space is the disjoint union of countably many stars. Okay, so why is this useful? So this gives you a very simple indance that can be recognized or decoded relatively easily using the following lemma. If you have a computable Corruption presentation of a star space, Polish presentation of a star space that is sigma 3 to tell if the polish presentation contains a star as at least n. Important things that this is uniformly at this is uniform in x and n, which allows you to diagonalize. Okay, so just as a sample of the application, going back to this particular result, there's a delta 2 polish space which is not homeomorphic to any computable one, can be done in a Can be done in a pretty easy way. So, of course, none of the proofs in any of the literature about users' nices is kind of happening afterwards. But anyway, this can be used to prove this result. The first observation is: if you have a star space, then the set of all n where the space contains an n star is limit-wise monoponic relative to zero. Limitwise monoponic relative to zero double because the previous set was C in zero double. So you can kind of approximate from below this set here. And once you realize that, then you can relativize the well-known result that there's a DC reset which is not limit-wise monotonic to get sigma 3 sets X and T such that S minus T is not limit wise monotonic relative to zero double and use that in a Delta two space to build a space that realizes this. A space that realizes this. So, therefore, this space will be delta 2, but it cannot have a component presentation because its invariance, the invariance we encode is too complicated. So, while this example is known, it now becomes, at least now there is a grasp that now you feel hopeful that you can hopefully use similar encoding techniques to kind of transfer as much information you have from before. Transfer as much information you have from before into this setting is. It's a computable Polish presentation. So we have special points. Well, you know, some basis, you just take the set as a standard basis, right? Taking all rational balls. It's if It's encoding metric, yeah. So the presentation itself gives you the special points and the distance. So from that, of course, you can recognize some braces. Oh, and that's then that's a different question which I will also talk about. Yes. Okay, but that's a good question. So we'll answer that in due course. Mike, so right. So this gives us some hope that at least we can do something from the layer that we've. At least you can do something familiar that we were used to doing. Now, so once, you know, once we show a separation result like this, we then started to turn to certain other kinds of separation results. So here we extend or refine the two or computable presentability of a Polish space in a natural way. So we call the right C metric space as one with where the metric is a right C real. metric is is a right C real number again uniformly I and J and same thing for a left C metric space now you might start thinking oh this guy is desperate to get a result so he makes arbitrary definitions now this is not the case because these have I mean there are motivation to looking at these kind of spaces so both in the formal case and also on the intuitive level so on the intuitive level you can think of these as the analogs of equal Of these as the analogues of equality being C and Co C respectively in computer countable mathematics. But more and more, right? So it's more than just an analogy, right? In fact, theorems you can prove. I think Sasha will talk about some of these more in his talk. You can prove certain kinds of duality whereby C spaces corresponds to C presentation. Corresponds to C presentations of the underlying structure. So, for example, for discrete topological groups, these things have a C presentation, C for each presentation, even only if the underlying group structure is C has a C presentation. And that's also the duality for Boolean algebra, where C corresponds to C Boolean algebras and C spaces correspond to computer presentations correspond to computer Boolean algebra. Presentations correspond to computer cooling algebra. Yeah, so there are actually reasons for looking at these things. So once you look at this and then you start asking, oh, does every this and that have some other presentation? And in fact, we looked through all the literature and we could not find any of these. So here there's a picture which also you can see on the on the written, I've also drawn a similar picture on the board. Board. So the arrows here are the trivial applications. So on the top, you have the computably compact. Computer compact means you have a computable Polish presentation, which is compact. And furthermore, you can effectively list covers of any reliance that you want effectively. That implies computer Polish, of course, it's trivial. Computer Polish, of course, implies left and right C separately, individually. C separately, individually. And a right C Polish implies computable topological. And this one is also trivial because if you have a right C Polish presentation of a space, as Mark, as R, obviously, the standard basis that you extract from the right C Polish presentation itself gives you a computer topological one because intersection is C. Intersection of two basic balls is C. Okay. Okay, however, see and computable topological is not obvious if there's any relationship because points, if they get fathered, of course, there's no a priori reason why the same basis gives you a computable topological basis. Okay, so let's cover, so let's, I guess, for the rest of the talk, I will talk about some of the some of the separations. So the first one is okay, so I kind of Okay, so I kind of so these are these are some of the things that I'll be talking about in the next 10-15 minutes. Okay, so the first one is we are going to talk about this one here. An example of a computer polish space which is which does not have a computerly compact presentation. Again, again, this was. Again, again, this was also arrived at by different groups of authors. Now, again, so let me just in the context of what we'll be discussing, there are different rules. If you recall, so I think in Rupini Maurice of Penins, they had a connected example. In the first group, Horab Kehara and Selivanov, they had high-dimensional examples. So here, So here we can in fact use the again the notion of a star space the notion. Now one observation is usually as we know in a compact given a complex presentation generally it tends to reduce all the dressing by one jump. So what this means is that everything which was linear wise monotonic relative to zero double amount becomes linearwise monotonic relative to zero point. Now you just need to build a computable Polish base that realizes Polish base that realizes a DC relative zero jump set. And that you can do. Okay, of course, I mean, there's details which I skipped, but that's basically the reason why you can do this. Okay, so I will also mention that this can be used to produce a computable banach space which is linearly isometric to CK. And here the K is compact but has And here the K is compact but has no computably compact presentation. Okay, again, Sasha will talk about this tomorrow. Right, so that's the first separation. The second one would be this one. So you want to write C Polish space with more computable Polish presentation. Okay, so it turns out the correct version to look at is terroring through effective versions of Stone's duality. So first you prove that a Boolean algebra has a computable presentation if and only if the dual stone space has a computable Polish presentation. And then you show that you can do this replacing computable with C and computable Polish with white C Polish and computable compact for the reversal. Computable compact for the reversal. And we also show that if you consider less C stone space, that's just equivalent to computable polish. And this, if you combine it with the well-known famous results of C algebras, one can obtain the right C stone space with no computable or even messy Polish copy. All of this is completely done by looking at the separate. Looking at the separation on the Boolean algebra side, which we already know. Okay, so that's another direction. Okay, this one here is looking at less C Polish, but no computable presentation. Here, the approach is a little different. Little different. So to show that there's a Lat C Polish base that does not have a computable Polish presentation, one has to... So we have to think a little bit about what Lat C means or what is it about a Lat C published space that allows us to do things that a computable space cannot? Obviously, in a Lat C space, you are allowed to increase distances, which means Increased distances, which means that you can kind of think about pretending to be building a certain structure and you can kind of just build a top or you can just by moving a certain part of the gadget all the way to infinity. So this can be, of course, formalized in different ways. One thing you can do is, for example, you encode for each n. So if you have a set x, you can encode, you can put a copy of x and x n is the n-dimensional sphere. S n is the n-dimensional sphere, d1 is the n-dimensional disk, close disk, according to whether n is in or not. And you have to do some algebra to show that CX is a computable copy if and only if x itself is sigma 3. So now all that remains is to take a pi 3 complete set and encode that into a less C space. And this you can do because these things all reside at the correct level. Reside at the correct level. In the case where sigma 3, you could blow off the top of an n-dimensional sphere and turn it on your disk. In the pipe-free case, you end up with an n-dimensional sphere. So that's how you would do something like this. Okay, so this gives you a C with no computable Polish presentation. Right. Now, if I Right. Now, in fact, you could also do something a bit better. You can make a left C space with no right C Polish presentation, also. Okay, finally, well, not finally, but this is one of the want to do that and that so the next step was to separate A computable topological space from left sea, Polish, and right. So we want a computable topological space that has no left or right sea Polish presentation. In fact, we can do much better. In fact, as it turns out, the reason for this is because, as we mentioned before, this computable topological presentation is very weak. It is point-free. So, for example, if you have a computable topological presentation of a space and you Representation of a space, and you just remove one point, it's going to share the same basis, same computable topological basis. And you can imagine what's going to happen. Sn and, well, the n-dimensional open disk share the same computable topological presentation. So you can pretty much encode anything you want into the space. Just by toggling one point, you are going to mess up the homomorphism type. Morphism type. However, no matter what you do, they will always share the same computable topological presentation. Okay. So that gives you the ability to construct computable topological presentations of all of the same, all sharing the same basis, but all of which are different homomorphism type. Okay, one actually. One actually quite surprising fact is that this actually fails for topological groups. For topological groups, because you already have the group structure, it won't turn out that just having a computable topology is enough to recover a certain metric. Okay, so the result is as follows: every computable Folllows, every computable topological group will always emit a right C compatible left invariant metric. This can be viewed as an effective version of the well-known Berkhoff-Kakutani theorem. Okay, now as an immediate call, it's not immediate, but the color is that if you take either an abelian or locally compact topological group, then Then having a computer topological basis is already enough to recover a right-C Polish presentation. Now, unfortunately, one cannot push right series to computer world because there are going to be computer topological groups that do not have a computer Polish presentation. Unfortunately, and again, if you think about discrete topological groups, About discrete topological groups, you just take a C one with no computable, so some kind of gravity there that gives you the corresponding results for the topological presentations. Okay, okay, so right, so the last one is Right, so the last one is this diaphragm. Oh, no, it's a typo. Anyway, um okay should be should be. So recall that every right C polish space via the same basis because in the right C space, the points get closer. So intersection is definitely C. But in the right C space, this is not true, right? Because points get further away. So if you use the same standard basis generated by the method. The basis are generated by the metric, it's not generally going to be computable. However, there's nothing to prevent a different basis of the same space to generate the same topology. It turns out that, in fact, you can not only learn this, so every left C polish space will have a computer topological presentation, but in fact, every delta 2 Polish space will always have a basis. Will always have a basis given by a computable topological presentation, every delta 2 poli space. Now, so I'll just say a little bit about this, which I find well simultaneously surprising, but you think about it a little bit about it, you know, the component topological presentation is so weak, it's kind of, you know, it's a little bit easy to work with to cover different spaces. So, here the difficulty is if you So here the difficulty is if you in in a docker2 polish base, if you're given the docker2 metric, knowing whether two balls intersect or not in general is sigma two or pi two. And that is something that will have to be worked into as guessing into the proof of this theorem itself. Okay, so Okay, so finally, some further separations which could surprise, which could be a little surprising. Now, so this one here is kind of expected that there's a delta 2 complex space, compact Polish space that has neither left nor right C Polish copy. So it separates something there. But what we thought was surprising, and in fact, what we thought was fun. Surprising, and in fact, what we thought was false actually is the following. Now, there are many results that tell you that if you are approximable from below and approximate from above, then you are approximable. For example, if a room number is left C and right C, then it is computable. If a set is C and cos C then it is computable. This computer work, right? So, the natural question comes to ask: if you have a space which has a log C Polish presentation, at the same time it also has a right C Polish presentation. Does it also have a computer presentation? No. Well, so So so this question is that this question is not completely outrageous because the way that you use less CE is by moving things far apart. That's how you use the advantage the less CE space gives you. A right CD space is where you can squash things together. But if you have a presentation of both kinds, then they should be able to cancel out in some way and you likely could extract We could extract a special computer metric from this, but as it turns out, there is, in fact, not just a space, but a locally compact Polish space with both left and right C, but itself does not have a computable Polish presentation. All of this is up to homeomorphism, of course. Yeah, I mean, we actually, well, I don't know, but I actually thought very hard about this. I thought very hard about this for quite a while. But yeah, anyway, it was all going along the wrong track. But eventually we discovered that this was actually a pretty simple answer. Okay, so let me conclude with about 10 more minutes, right? So the second part, as I promised from the OpenSAT question session yesterday, so I'll talk about degrees of categoristicity. Degrees of categoricity after this. But let me just conclude this full section with some questions regarding presentations of these Polish spaces. So first question is, does every compact RAS C Polish space have a computable copy? Now, in all the examples we had of the LAS C Polish space, which is complicated, in all these cases, we use the fact that. These cases, we use the fact that we were allowed to make the space left C by moving points away far apart, all independent. So that, so if we do this, we do not, we can kind of reset the remaining structure in the main part of the space. And of course, we also will naturally produce a long compact space. Now, the question is: if you have a left-see polish space which is also compact, Which is also compact. What can you or you cannot do in such a space? And one question is: can you always have a computer copy, or maybe there's some clever way to use Lexi, you know, kind of in a very local fashion to kill computer homorphism copies. Another question is that whether every delta three Polish base will always have a computer topological presentation or not. Have a computable topological presentation. So, the result before was we had delta two. Every delta two polish space has a computable topological presentation. The question is: what happens at the next level? What about arithmetical Polish spaces? Now, the idea again is that Polish spaces are very weak. In fact, this is a related question. If you think, if you sit down for about five minutes and think about how you would construct a Polish point that does not have a computable topological presentation, it's not. Computable topological presentation is not actually that easy to think about. In fact, even if you assume the space is compact, just given a computable topological presentation, it is not clear what one is complex. I'm extracting covers from just a computable topological presentation. It's not clear at all. Of course, if you have a Polish presentation, it's one jump over the presentation, of course, but the Presentation, of course, but just in a computer topological presentation, it's not clear. Even in a compact case, it's not clear how you diagonalize. Okay. Yeah, so that's well then, of course, we want more questions, but I think this is kind of the few very basic and standard remaining questions that we had. Okay, so in the remaining, I don't know, a couple of minutes, I will just switch to this. Actually, I have. Just switch to this. Actually, I have given this part of a talk at various meetings already, but I just want to just in case, just to advertise, in case you have not heard about this. So, there is another one where you could try to measure how to calibrate the complexity of a space. So, following what we do in computer structure theory is the definition of Pokina. Of Opokina, Kalimuna and Miro, where they define a space to be categorical if every pair of, well, that's not the definition is the notion of a degree of categoricity of a structure that is the smallest degree that the smallest in computer an isomorphism between any two computable copies of the structure. So if you if you The structure. So if you take the same definition, you could also make that for computable Polish spaces. And you can call that Turing degree the degree of topological categoricity, just to differentiate. Here, the notion of effective homomorphism is to have a computable effective homomorphism, effectively continuous function both ways between the two. Both ways between the two structures. Okay, being comparable categorical is the same as zero categorical up to homomorphism. Okay, so what are some of the existing work that have been done? Now, some other authors have considered degrees of categoricity, but up to different notions of equivalence. So, namely, for example, for isometries and product space isomorphisms, a linear map. These isomorphisms, linear maps. And okay, so I think this question is repeated, so I'll ask this again at the end. Okay, so what is it that we do know for the standard spaces? What are the degrees of categoricality for the standard spaces? Now, you may think, oh, you know, if you want a CC space, let's try the take that example. The take that example. Take the infinite countable discrete space. Surely that is completely non-descriptive. That has to be CC. But it turns out that no, that still has degree of categories, zero jump. The reason is because in order to construct a homomorphism between two such spaces, even the discrete space, you need information about whether a given neighborhood is isolating or not. If you don't know it, Or not. If you do not only, you cannot recover. So to do that, you need zero jump, one jump over the presentation of the space. And you can show components, you can encode zero jump into this thing. So the degree of C is a zero jump. So that fails. Same thing by looking at odd knocks, you can realize zero to the alpha. Campus space, I think this is probably for ground or something. I don't know. Something, I don't know, but anyway, if you in this setting, it has a degree of categoricality. Zero jump again is the counter space is compact, and so therefore it's zero jump compact. So if you know zero jump, you can enumerate all the finite counters. Once you have finite converse along to the presentation, you can do any kind of, you can always extend the map correctly. Okay, when it comes to the best thing, the non-compactness of Bare space, the non-compactness of the best phase will cause a problem. For example, it will not be delta 2 categorical. I don't want to say a little bit too much about this. Just that the main obstruction to homomorphisms between copies of the bare space, well, there are many difficulties, but the main difficulty comes down to knowing whether a certain neighborhood is cloken or not. Um, is cloken or not, and that from an arbitrary Polish presentation, you don't know. Um, so yeah, there are some technical things you can prove if you restrict yourself to only having effective open basis. The closed degree interval has categories of degree of accuracy is zero double. Again, I think this is known to various authors in different forms. And same and same for component union interval. The non-compact case also has degree zero jump, zero double jump. Zero jump, zero double jump. Okay, so let me finish a general section with, I think, three questions about degrees of categories. I think this is the most important one, which I also mentioned yesterday in the open question. Is there an infinite computable polish space that is computably categorical? Okay. So some of the common structures have already been studied here, and they're all not CC. CC. Some things that we did not try is, for example, the C0, all the universal spaces, C01, I don't know, Eurozone space, you know, you know, Eurozone space, I don't know, maybe the Eurozone space, certain ones, but it's unlikely that that will be completely categorical anyway, because you know, these universal things are seldom, yeah. There are certain sufficient or necessary conditions that we know, but I don't really want to discuss that here, but I'll just leave this as an interesting question. The other question is, again, I think this is also one of the questions, initial questions, early questions for countable structures. Other than the standard jumps, is any other degree a degree of topological categories? So, for example, is any So, for example, is any or is every C degree other than zero jump, the degree of topological categories? The problem is we can encode, we can code stuff, but we do not know how to decode. That is the problem. Now, of course, in this definition, we restrict ourselves to considering only Polish presentations, computable Polish presentations of a given space. Given space. Of course, you could extend this to looking at all computable topological presentations. In a compact space, you could also restrict yourself to only the computably compact Holish presentations. Now, this may or may not be the correct definition for computable Holish spaces, but until we know a question, I think you know the answer to the first question, it's hard to say either way. So, but I do want to point out that if you restrict yourself to only the Uh, restrict yourself to only the computably compact Polish presentations, then CC is possible. Um, for example, um, in Stone Space, for example. Okay, um yeah, and this I didn't really discuss this about non-metrizable computable spaces, but of course I'm happy to discuss this if you like. But again, it's there's no reason why you could not study this also for more general presentations. Presentations. And I think that's the end of my talk. Thank you.