To introduce Denise Teffrey from Paris, I think, right? Yes. So it's later today there than here. So please ask questions again as it was before. I think it was a good discussion we had. Go ahead. Okay, thank you. It's a shame we cannot gather in this nice place that we see at the bottom of the. At the bottom of the title page, I hope we can do it some other year. So, this talk will focus on signaling regulatory network within one type of cell. So, and as I will show you through an example, these networks get really very complicated. Probably some of the methods that I will introduce could be transposed also to multicellular. Also, to multicellular models, but here I will focus on one type of cells, namely T cells. So these signaling regulatory networks are both large and complex. You are all aware of that. And we need rigorous, scalable methods to build and assess the dynamical models of such networks. Here we will focus on Boolean modeling. Here we will focus on Boolean modeling, it can be easily extended to multi-level modeling, and probably some of the concepts and the techniques could also be applied to, let's say, ODE or other quantitative modeling approaches. But I will focus on the Boolean framework. And I will insist on methods borrowed from computer science and that can help us to cope with large models. Large models of cellular networks. And in doing so, we pay a special attention to the reproducibility of the analysis. And this can be maybe some subtopics for discussion later on. And as I mentioned, I will discuss an application to the modeling of the impacts of T cells immune checkpoints. So the impact of the The action on specific membrane receptors, let's say, at the surface of T cells, on their behavior. So there are many methods that have been proposed to cope with large Boolean networks. Some are, in fact, called model reduction approaches, which enable us to compress. Which enable us to compress models a bit the way that people working with ODE will do when they start to reason about time scales. You can focus on attractors, in particular stable state are pretty easy to compute. It's a bit more complicated to compute complex cycles in asynchronous Boolean networks, but we have methods to do. Networks, but we have methods to do that. If the model is not too big, you can compress the results of a simulation using graph compression methods. And there are also a group of methods that we collectively call model checking methods that enable to verify properties, dynamical properties. Dynamical properties, the compatibility between a model and some specific dynamical properties, provided that they are written in a rigorous way, usually using temporal logics. And so computer scientists have developed powerful software that enables them to check these properties. Here, I want to focus on two On two relatively simple approaches that we have been in part developing, implementing, and using. The first one is the development of modular approach for model verification, which is very similar or directly inspired by what is called unit testing in software development. And the other is probably even simpler, and I will just Even simpler, and I will just call it value propagation. And as I mentioned, I want to illustrate this on a model for T cells, in particular for the response to specific immunotherapies that target immune checkpoints. So, here you have a drawing of a schematic. The schematic drawing of the tumor and different cell types that are involved in fighting the tumor. And I want to emphasize, in particular, these pink cells that are T cells, effector T cells that can be recruited and activated in order to destroy tumor cells. And there are And there are various types of these T cells, but they share several receptors, including human checkpoint. Here you have a scheme about the T cells and simplification of the different signals that the T cells must to integrate. Integrate or will integrate in order to warrant its fate. So for sure, there is the antigen recognition pathway and the co-signaling pathways here. There are also lymphokines that will be important in providing a context for the activation and the differentiation of T cells. But you have also. But you have also this so-called human checkpoint. Here we have two examples: CTLA4 on one hand and PD1 on the other hand, then can be also sense that can also sense signals presented by other cells. And in some cases, we'll In some cases, it will lead to energy of the T cells. And these immune checkpoints have been the targets of intense research. And this led to immunotherapies that seems to work pretty well for some cancer, in some contexts, for some patients. But with We still don't know very in detail what are the underlying pathways and why this immunotherapies work. And so this cartoon provides information about what was announced a few years ago about these two membrane molecules. Membrane molecules, CTLFO and PD1, and the way that they may interfere with the TCR pathway, so the specific T cell receptor that is crucial for the activations of T cell. And so you see that this is very, very simplified, and for sure, just the TCR pathway has been described in much more detail. And we still lack detailed information about how, in fact, CTLA4 and PD1 interfere with TCR and cosine pathways. So in the context of a collaboration with an experimental lab in Marseille headed by Bernard Malisen, we decided to try to develop a map. To develop a map of first the TCR pathway, a detailed map, updated map of the TCR pathways, and look for available data in the literature to complete and to connect or to human checkpoints with this pathway and the main proxy pathways. And the idea was at some point then to Us at some point then to integrate new data coming from the lab of Malisen using proteomics with specific techniques that will target the interactome of some key components downstream of the human checkpoints. Quick question. Question. So, it is my understanding that the PD1 and PDL1 suppressors or something, blockers, are the main immunotherapy for the like colon cancer. Is that correct? That's correct. Yeah. Yeah. They're used. Yeah. Right. So normally, I mean, the cancer escapes the immune system because these pediatric pathway is blocking the activation of T cells. Yeah, yeah. So, yeah, indeed. Indeed, the ligand can be presented by cancer cells in particular, and they will then provoke the energy of the effector cells in particular, and that way impede the fight against the tumor cells. Thank you. So, Celine Hernandez, in my group, doing a PhD. my group during a PhD systematically analyze existing data starting from the literature but also databases describing in particular the TCR pathways and related pathways, information from Minipot and so on. She automated a bit the process of data extraction and she built a And she built a map using the software called Cell Designer, which has become quite popular in the community of cell systems biologists. So in short, it's a series of conventions, graphical conventions to draw maps of molecular networks. I'm not going to cover that in detail, but I will show you an example. So the map that An example, so the map that was built for the TCR pathways and the co-signaling pathways. So you see that they get very complicated. It's a way, in fact, to make some kind of online encyclopedia with links to references, to entries in database, and so on. Each little green dots here represent a component. Here represents a component in a specific form, and the arcs may represent a transformation of a component. So, for example, a post-translational modifications or in some cases catalysis and so on. So, this is a part of the dictionary, the graphical dictionary that enables to distinguish between different, for example, species or different types of Or different types of interactions or relationships between the species, the formation of complex, the dissociation of complex, in that case, the use of molecules to transform specific, let's say, proteins and so on. And so Celine gathered all this information, confronted with the expertise of Confront it with the expertise of our colleagues in Marseille and quickly realize that you can identify or arrange this information into different modules, which correspond to not so well-defined, but relatively well-defined, let's say, pathways in the literature. So, for example, there is a large part that is related to proximal signaling is very important here. Proximal signaling is very important here because that's where we will see all the crosstalks between different signaling pathways, including the TCR pathways and the immune checkpoint pathways. You have a part dealing with cytoskeleton, a part dealing with calcium signaling, you have signaling pathways involving MAP kinases or the survival pathway in escapabe, DKTM-TOR pathways. Then there are modules. And there are modules that are more related to really the reactions of the cells, so in terms of proliferation, so the cell cycle module, or in terms of cytotine production, which is relatively simplified here because we need really just to know if the cells is able to cycle or to produce a specific cycle. Or to produce some specific cytokines, but not go into too much detail. So, these maps include over 700 components, 500 and so reactions. It's based on over 100 of articles. And for sure, okay, you can use it maybe to visualize proteomic data, put them into context or gene expression data. But to make a model, you clearly need further. You clearly need further abstraction. And so, in my group, we use the logical modeling approach. And so, CÃ©line decided to derive a Boolean model. And in fact, she developed the Boolean model side by side with building the map. And there was, let's say, a reinforcing process where she realized that there were things missing to. There were things missing to make sense of the Boolean model, and she completed the map and so on until that stabilized, more or less. And this is the Boolean model. So in terms of components, it's more modest. There are only 226 components because we would have only one component accounting for different forms of proteins, and we will simplify that by saying the proteins can be active or inactive. Proteins can be active or inactive. There are 450 arcs. But the big problem that we are facing then is: how are we going to define the logical rules? In some cases, it's pretty easy, like it's theory, because you have just one regulator, but when you have several regulators converging towards one target, we may have some hints from the literature, but it's very difficult to derive precise. To derive precise rules in terms of logical operators and so on. So, the usual way to do that is first to build a regulatory graph, to delineate Boolean rules, do some kind of dynamical analysis, identify stable state, trap space if you look for more complex attractors. You can perform reachability analysis doing simulation on. Analysis, doing simulation or model checking. And then you can do dynamical simulation per se to, for example, follow the behavior over time, maybe do some kind of stochastic Boolean modeling to be a bit more quantitative and confront with experimental data. And when you do that, even with simpler models, usually doesn't work very well in the first go. And so you go back and you refine your model. But when you face model, But when you face models with over 100 components, of a few hundred components, this becomes really hopeless. Yeah, and you can also imagine in some cases you need multi-level variables, which we do, but for small models, it's relatively easy to define. For large models, for sure, it gets very tricky. So the challenge is on one hand, it can become very easy. Can become very easy in terms of computation when the model increases in size, the number of possible rules increases exponentially with the number of regulators. And usually, we have also when you want to confront the behavior of a large model to data, you also face the problem that usually the data are pretty fragmentary. It will correspond to sub-parts of the model. So, you will see in some papers. So you will see in some papers experiments where people have checked, for example, cytoplasmic calcium, the calcium pathways, but not so much, for example, cytokines or whatever other aspects of the cell behavior. And an interesting thing also is that often these large models, and it is the case a bit for this example also. This example also often comes from the composition or the extension of previous models. So, this is something that you should take into account as explicitly as possible, also when you try to set the rules or to verify the rules. And so, this led to the idea to try to have a more modular approach in the definition for the definition of the rules and for the verification of the model. And for the verification of the model. And for that, we got inspiration from unique testing in software development. So what is unit testing? So if you look in the popular Wikipedia, it tells you that it's a way to automate the test used by a software developer to ensure that a section of a code. A section of a code of an application meets its design and behaves as intended. So, how does this translate into the context of modeling? So, we would have we can compare the code to the model itself or a module within the model that we can define as. As we think it is consistent from a biological point of view. Then we need to define some dynamical properties and formalize them. This can be defined at the level of the complete model in some cases, but more interestingly, it can also be defined for different modules separately. You need then to specify. To specify this and including the initialization of your system. So, for example, if you start from specific initial conditions, together with the dynamical properties, you expect some behavior. So, this translates to some expected values for some variables, not necessarily. Variables, not necessarily all the variables, but some subset of variables of your model. And the test then consists to compare the observed value with the expected value. And if there is currency, then the testing is successful. Otherwise, it means that there is some incurrence. And so, usually, you can start with some default rules based on what is well documented and maybe some simplification or default formulation of the rules. And you can enter then in iterative cycle to modify these rules until the values agrees. Agrees. So, some example of global specification for our model, it will be a bit abstract, but this translates into values of specific nodes. So, for example, for cells, in the absence of stimulation, we expect the cell to be quiescent and to have a metabolism. A metabolism based on glycogenesis. I will not go through all of that, but for an optimal simulation, you would expect differentiation, L2 expression, proliferation, and so on. So this amounts to have some specific nodes activated. And finally, for the human checkpoint simulation, you would expect the cells to be To be suppressed or in a questioned state, in that case. So, this is for the global behavior. But if you focus on the module, so here I take a small part of the large model that we have seen. And the way that the module is defined is the user will decide what is a module. In that case, for example, we have put all the nodes that are involved in calcium. Involved in calcium fluxes in this model in a very simplified way. And based on the list of the notes of a module, we develop a little algorithm that will extract also all the nodes that feed directly onto the core module because they are important. Because they are important naturally to specify the behavior of this module. And then once you have defined the module, you can define different tests. So, for example, if you decide that at the initial state you don't have stimulation of IPA3air or and you have calcium in the endoplasmic reticulum, then the expect base. Then the expect behavior is that you maintain the calcium in the endoplasmic reticulum, and EPR3 remain inactive, and so on. So, you can define elementary tests like that, a long list based on what you know about the system. And then we have done that for all the different modules that. All the different modules that were shown in the initial map, and this led us to converge to a set of rules. Now, I switch to a complementary approach. What we often do with a model is to check its behavior, is to use Used perturbations. In fact, experimentally, that's a mean to explore the behavior of a system also. So, for example, change in culture condition conditions, mutants could be gain of function, loss of function, and so on. And in the specific case of a logical In the specific case of a logical model, it's relatively straightforward to define formally such perturbation. Usually, it consists just to rewrite the rule. If it's a loss of function, is to force the value of a variable to zero. If it's a bit more subtle, it's a more subtle rewriting of the rule. And it then turned out to be really interesting to develop techniques. To develop techniques that efficiently assess the impact of such perturbations, and one of these techniques is what we call value propagation. So, let's illustrate with a very simple example. Here you have a small fraction of, let's say, of a model where you have three components here, A, B, and C, which are just input here, feeding onto D and E. Feeding onto D and E, and I've written a relatively simple rule: D will be activated if A is activate or if B is not activated. So the vertical bar here means or and the exclamation marks means not here. And E in turn will get activated if we have either deactivated, no, if we have deactivated. No, if we have D activated, and in that case, it's and not C activated. So if C is inactivated. So just a simple example to show what happens now if we decide that we perturb the system and we block B. So this enables us, in fact, to infer the value of D at some point. D will be switched on because one of the conditions and One of the conditions enabling its activation is fulfilled. In the case of E, we have the solution for one part. We get a value for D, but we don't have the value for C. So the propagation of the value D enable us to simplify a bit the rule, but E will still depend on the presence or the absence of C. The absence of C. So, in short, the propagation of fixed values that arise because of some specific perturbation just consists of some kind of iterative rewriting of the logical rules that is very simple to implement. And so, we did that in a specific Java library. The name is not very important. And now, let's illustrate what happened. And now let's illustrate what happens when we apply that to our model. So here you have the model that I showed you before, but now we focus on the activation of PD1. So in the context where PD1 is activated, what happens is that a series, so the value will percolate. So, the value will percolate and a series of nodes will become frozen either in the value zero or in the value one. And some of the nodes will remain free or more or less free because they will still depend on other variables. And so, here all the nodes shown in white are frozen in value zero, whereas all the nodes frozen in Frozen in shown in yellow are frozen in value one. So some of them are frozen because they are given at the initial value. But what is important is you will see is to compare the situation when you act on PD1 versus when you act on the other image checkpoint, CTLF4. CTLF4. So just look at the slides right now. We'll switch for the other CDKs. And here you see that we get much more component frozen inactive. Maybe I go back just to give you convey the impression. You see that we lose a lot of these three blue nodes that become no white. We can quantify that. We can quantify that by counting them and so on, and you see that indeed the number of nodes that are frozen inactive in the case of the activation of CTA4 is much larger than when you activate PD1. In fact, one set is completely included in the other one. In the other one, almost completely. And so, this suggests that the impact of what is it explained because it is known, then the impact of targeting CTLA4 is much stronger than targeting PD1. So, sorry, can I ask a quick question? Sure. Can I ask a quick question? Sure. So, so this value propagation depends on the choice of logic rules you chose on, right? Because if you choose different and how much variability, how much, if I obviously you cannot probably check all possible rules you can assign and then all possible results, but yeah. Yeah, so as I mentioned, this approach is complementary to the preceding one. So you need to converge to some set of logic. Some set of logical rules. Maybe in the discussion, we can also at some point discuss about different strategies, maybe to try different sets of logical rules. It's not really covered by this talk, but there are people working on ensembles of models. But here we focus on one set of rules that has been obtained by Been obtained by doing this unique testing-like approach. But for sure, it may not be the only set of rules working properly. And it may at some point be called also for revisions. But what is interesting here is that you have a ways to look at at least global properties. At least global properties of perturbation that are really fast and easy, let's say, to repeat and to compare. That's the key idea here. So, in terms of biological insight, we see that we can understand to some extent the strong adverse effects of CTLA4 or immunotherapy. CTLAFOR immunotherapies because they get much widespread impact on the behavior of the cells, maybe too wide. And in particular, if you look more into the details, I didn't show that, but you get a general inductivation of the key transcription factor that regulate IL2 production that is necessary for other cell types that are important in the human response. In the case of PD1, we can also look in more details which transcription factors are affected based on the percolation. So in that case, it has a quite strong effect on some transcription factor, but not on all the transcription factors that are important for T cell response. This observation is also to some extent consistent with current strategies to try to complement PD-1 immunotherapies with other things without going, you know, as, you know, hamming so strongly as, you know, when you ham through CTLA4. So a few words about the implementation. Implementation. So there is a large community developing Boolean models and different software tools to define and analyze these Boolean models. And this community has started to organize itself to, on the one hand, define a common format to store and extend models called SBML Qual. Maybe some of you have heard about SBML. Some of you have heard about SBML, so it's an extension of SBML specific for qualitative models. On the other hand, some groups have tried also to ease the use of different tools, taking advantage of this common format, and propose a virtual environment where you can run different tools. And so we implement We implement the two methods that I just described in this package. So it is part of a Java library that enable to extract automatically modules once you have defined the components that you want to see in the module. That also includes a library that was already existing in Python language. In Python language to proceed with the verifications. And all that is distributed on the one hand as a conda distribution for the Python code. And on the other hand, as a virtual environment using Docker. And this is the work of Aurelian Aldi and Celine Hernandez while they were in my group. Selina and this while they were in my group. In the meantime, they both left. So, in terms of outlook, I described some kind of divided and conquer approach to specify logical models, particularly the rules, by delineating modules and specification for these modules. And this helps to cope with large and complex models and refine the rules. And then the other approach. And then the other approach, which is in fact very simple, is in our hand quite powerful to assess the effect of different kind of environmental perturbations or genetic perturbation. We apply it also in other systems for mutations, for example, to assess the impact of mutations. And in terms of the specific example, we do. Example, we did gather some interesting biological insight about the differences between CTLA4 and PD1 immunotherapy impact from the modeling point of view. The model itself and Jupiter notebook that include all the analysis that have been made are available. Are available and can be used, for example, to perform extension or to explore combinatorial therapies. If you are interested, we published this in a paper last year, and the other reference are more general references about logical modeling and the Kolomoto Consortium and Toolbox. And toolbox, if some of you are interested to learn more about it, I think I have just one more slide about the contributors, and I'm ready to take questions.