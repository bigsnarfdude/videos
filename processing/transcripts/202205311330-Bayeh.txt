I would like to thank the organizer for inviting me and for this great opportunity to be able to show my results. So this is the work on somehow generalizing the idea of equivariant topological complexity. So we are considering configuration. Configuration space of like a robot or any mechanical system, which is symmetric. So that means there is a group action on the configuration space. And we are trying to find out a good motion planner for that. So that was my main goal. But at the same time, I was looking at the real-world problems and specifically navigator robots and try to find a good A good motion planner for navigator robots which are symmetric. So let's begin by the story. So we know that the motion planning algorithm is a section to this map pi. And so we have this x cross i going to x cross x. And if we can find the section back, so we call that section emotion planning. Section: a motion planning, motion planner or emotion planning algorithm. Now, the point is: if X is not contractible, there is no such S. So that's why we try to break down this space X cross X by open subsets such that for each open subset, we can actually find this motion planner. And then the least number of motion planner minus one. Motion planner minus one gives us the topological complexity of that space X. Now, when it comes to symmetric navigator robots, actually when it comes to just navigator robots, the configuration space can be explained as a cross product of two different spaces. The one space is the navigator area. So, navigator robots are robots that they are supposed to navigate some space. Space, another planet, or you know, a room or any area. So, this can be M with some obstacles in it. And so, this is the navigation area. And then we have a robot which has its own structure. And it depends on how many legs or arms this robot has. There is another configuration space coming from. Their configuration space coming from the structural part of this robot. So, therefore, let's say this is the robot that's going to move. Okay, my drawing is not good, I know. But, and it has some legs and arms to do this other jobs and navigating and perhaps taking photos and taking samples and so on. So, basically, the total configuration space for this setting is going to be the cross product of. Going to be the cross product of these two configuration spaces. Now, let me show you some beautiful symmetric robots first in real world. So, this is a robot which has Z4 symmetry, as you see. And another robot I have here, this one also has a Z4 symmetry, and another one with a Z6 symmetry. Now, the main job of this robot is going for. Main job of this robot is going from one point to another point, but at the same time, they may have other tasks to do. For example, taking samples, taking photos, or cleaning room if they are like vacuum cleaner robots, right? So assume that we have a navigator robot, this N1, and it has just three states, state zero, state one, state two, and it has a Z3 symmetry. That means these three states are basically the same. Basically the same. So it doesn't matter in which state this robot is, the function of the robot doesn't change. So it's pretty the same. That's why when you consider the navigation area and you ask the robot to go from point 0, x0 to point x1, now it really doesn't matter the robot is in this state or this state. However, when you look at the motion planning algorithm, the input of this algorithm The input of this algorithm is going to be so for this case, it's going to be a state 0x1. This is the initial point for this motion planner, and the terminal point is going to be a state, which state is that, a state 2x1. So, we want a motion planner such that the initial point and terminal points are these two, but for the sake of functionality of this. Of the functionality of this robot, it really doesn't matter in which state it has. So we can ignore the S0 and S2 part and just look at the configuration space. But in that case, we would lose the information about the current situation and the structural state of the robot. So, what we are expecting, we can say that, okay, if we are looking for a motion planner for this symmetric navigator robot, we can just ignore the structure. Ignore the structural part and we just focus on the navigation area. And if, for example, the robot is the initial point is this one and the terminal point is this one, we just find a path to go from here to there, no matter what's the state of this robot. But in that case, if the robot is just walk a robot or navigator robot, that's okay. But if this robot has some other task to do, let's say it wants to take some sample, it wants to take some samples. Wants to take some sample, it wants to take some photos. And in terms of taking photos, the robot is not symmetric. So, for the sake of walking, the robot is symmetric. That means it doesn't matter in which situation this robot can move towards this way, this way, and this way. It doesn't need to turn and switch between positions. But in terms of taking photos or taking samples or do another task, the robot needs actually to change the state. The state. So, if the motion planner that we are considering just ignores the first part, then we are losing this data from the structural state of the robot, and we cannot actually keep track of that. So, basically, in this case, we are looking for a motion planner that somehow, for just walking's sake, for the sake of walking and movement from one point to another point, it can ignore the structural part of the robot. Structural part of the robot, the symmetric robot, but at the same time, it keeps track of the state of the robot. So, if, for example, at the destination we want to take the photo, so this robot can change the state based on that algorithm that we are given to the robot. And so, for example, I have another robot with S1 symmetry. So, in this case, this robot can rotate 300. 360 degrees and also can move to any direction. So, for example, it can move in any of these directions and it doesn't need to change the direction. There is no specific phase for this robot towards the target or to go. So it can move around. And in this case, if you look at the configuration space, the configuration space is S1 cross M. And because it has a S1. Because it has a S1 symmetric, so we have S1 acting on X, but it's just acting on the first part, not the navigation area. So in this case, we have a group action, which is S1, acting on X, but on the first part, it's acting by just multiplication. On the second part, it's just trivial action. So that's why I So that's why I will tell you about the covariant topological complexity, the different definitions later on. And you will see that for those cases, we have a group action on the total configuration space. But in this case, if you see the group action is not on the whole configuration space, it's just on the partial on the part of that comes from the structure of the robot. So for this, I'm going to For this, I'm going to actually, for this one, for defining a motion planner, I'm using the concept of transversal, and I'm going to tell you a little bit about the definitions first. So, a group action is a topological group, I mean, and my space is usually a host of topological space. And so we have, we say that G acts on X if we have a map such that it satisfied. map such that it satisfies these two properties. And then in that case, we call X a G space. And so for the isotropy subgroups are just all the points from G such that they fix X and the orbits are just taking G, I mean acting on one single point of X and then the orbital space. And then the orbital space XG is the set of all equivalence classes of orbits. And now we say a subspace of X is G invariant if, of course, it's invariant under the action of G. And also we call a homotopy G homotopy if the homotopy actually periods there of the action. That means if we consider G times consider g times h xt then it's the same as h of g x and t for all t and all x in u now a subset of u a subset of x u is called a g equivariant or g contractible to a if there exists a homotopy such that on the on the On the first, one side of the homotopy is just the inclusion of U inside X, and the other side of this map goes to A. And we say it's just G contractible if it's G contractible to an orbit. And now the transversal. So if we have a If we have this orbit map or the quotient map pi to xg, so we have a group action on x and we can consider the quotient map. A cross-section for the quotient map is a continuous map such that if you take this composition, it gives you identity. So we call that cross-section, and then if there exists a subset of X such that it intersects each orbit in X exactly once, then we call that subset a transversal. And it's nice to know that if we have a group action on X, then considering the identity of the group times X, this Q. And times x, this q is a closed transverse for the space gross x. I'm going to use that later. And there is a well-known theorem that if we have a compact group, then every closed transversal gives a cross-section and every cross-section gives a closed transversal. Now, I'm going to use this idea of transversal because what is happening here, we are It's happening here. We are working inside the quotient inside that closed transversal, and we are using the motion planner of that closed transversal to be able to give a motion planner for the whole space. I'm going to give you some pictures, so don't worry, if this one is a little bit confusing, but I'm going to make it more clear. So, how I'm going to define this special motion planner? Special motion planner. First of all, I'm going to consider this space. So I'm taking the product of g cross qi. Qi is the path of all, is the set of all space of all paths inside the quotient. And then times g. And I'm going to take the equivalence relation modulo, these two relations. And now I defined a special motion planner, an algorithm which gives which assign to every pair xy inside x cross x a triple death such that the g0 inverse of x and g 0 g1 inverse of y, they are the initial and the terminal point of the path. Point of the path. Okay, so basically, what the idea is here, if we have this closed transversal, so for example, if you consider this S2 and we have actually closed transversal, I have a beautiful picture of this later on, so don't worry. And so this black one is gonna be the closed transversal. Now, whenever you have two points on this space, let's say X to Y. Is let's say x to y, instead of finding a path from x to y, what I'm going to do, I'm going to find the associated point inside the closed transversal to x and the associated point to y. And then I'm going to find a pass inside this closed transversal. And then I'm going to use this information G0 here to go. G0 here to go back and give actual path from X to Y. So that's the idea. And then I define the spatial topological complexity to be this sectional category of this map P. So in fact, to any triple G0 lambda G1, it assigns, so lambda is a pass. Uh so lambda is a pass in Qi so that means it's a pass from I to Q so it has initial point and terminal point and now G zero lambda sorry G zero gamma zero is going to be my X and G one gamma one is going to be my Y. So basically I get a motion planner assigned to any initial and To any initial and terminal point X and Y. And some properties of this special topological complexity is, first of all, if we have the spaces G contractible to an orbit, and that means there is a G homotopy that sends the whole space X to just one orbit. In that case, the spatial topological complexity is zero. And in general, it And in general, it falls between the topological complexity of the closed transversal and the topological complexity of the space. And if G acts freely on X, then this spatial topological complexity is actually equal to the Tc of the cross-transversal. And then obviously from here, we can see that this falls between the category of the closed. Of the closed transversal and two times LS category of the space X. And also, we have a lower bound in terms of the cohomology class. Now, let's see what happens in actual problem. So, assume that we have this situation and we have this state of the robot is S0 and X0, and this is the initial point. And this is the initial point, and now the terminal point is going to be s2x1. So we're looking for a pass go to go from this point to this point, right? But now what this motion planner does actually, it gives this pass. So it actually sends you the pass from here to here. This is the solution. But this passes from But this passes from S0 X0 to S0 X1. This is the solution that it gives you. And remember, I told you that this robot is symmetric. It has Z3 symmetric. So it really doesn't matter the robot at point X one is in this position or this position. For the sake of walking, these two are the same. These two are the same. So, this is the solution that this motion planner gives you, but at the same time, it gives you information about this S2. And it tells you how to get S2 just in case, for example, if at that point, at this destination, the robot wants to change the position to take a photos or take a sample or something. So, it also keeps the information that the state of the robot was supposed to be S2, but now the state of the robot is S0. The state of the robot is a zero. So it keeps track of the structural state of the robot. But what it gives you is you don't need to actually turn this robot and you don't need extra movement. So we can save energy in this way. Otherwise, if you really wanted a point, a motion planner from S0 X0 to S2X1, then you have to at some point, whether on the initial point or at the The initial point or the terminal point, or any point in between, you have to switch the state of the robot. So you have to somehow move and you need an extra move for the robot. But for the sake of just walking, because this robot is symmetric, we don't need that move. So that's going to cost us extra energy and we don't need that. It's not necessary. So in this way, by defining this motion planner, we can avoid that extra movement. Can avoid that external movement for the symmetric robot. And we can actually generalize this idea to any situation that we have a symmetric configuration space, but we have to have a closed transversal. So the closed transversal is a must. We have to have it. It's a required condition. But in that case, if we have that, we can actually generalize this idea to any symmetric. To any symmetric configuration space, not only for symmetric navigator robots, for any configuration space. And in fact, we can define the equivariant version of topological complexity using this idea. And a class of example would be, for example, quasi-tauric manifolds when we have like a torus action on manifold and the quotient is usually a polygon. So that's a closed transverse. Also, we can. Transverse, also, we can see a bunch of examples on those. For example, in this case, let's say we have S1 acting on S2, and the action is by rotation along the Z-axis. So, this is the rotation. And we have a closed transversal, which is going to be this along here. So, I can just make it like here. So, this is the point. Is the point 0, 1, and this is the point 0, negative 1. And now let's say we are looking for a pass from this point A to this point B. Okay, so now what motion planner here gives us, it just finds the point which here is going to be G0 inverse of A. A inside the so this is the q, this is the closed transverse of this action, and then it's going to find here g1 inverse of b and now to this pair a and b it's just going to assign this g zero gamma g one where gamma is this pass is a pass inside this Is a pass inside this closed transversal. So it gives you this pass. Now, the actual pass that the robot's going to use is this pass. Not good color, different color. So this is the pass that this robot is going to use, and it's going to go from this point A to this point B, but this is not actually B. B, but this is not actually B. This is a point inside the orbit of B. But because we have a configuration space which is symmetric, any point on this orbit are the same. So this point and this point and this point, for the just sake of this symmetric, for the function of this robot, they are the same. So we are saving energy. The robot goes from A to B and at the same time, we have this information G0 and G0. We have this information G0 and G1, so we know the distance from the actual point, the initial point, from the point inside the closed transversal. And also, we know the distance from this point to the point inside the closed transversal. So if we really, for some situation, we really want to go to B, we can then act on that and we can go to B. But usually, because it's symmetric, the concept Because it's symmetric, the concept of being symmetry means it doesn't matter in which point you are, as far as you are in the same orbit. So, because this point and this point, they are both on the same orbit, so it really doesn't matter where we go. Now, there are so I want to generalize this idea to equivariant version of topological complexity. So, as I said so far, I need to have So far, I need to have a closed transversal for this space X for the configuration space. If we have a symmetric navigator robot, we always have a closed transversal. So for that particular case, we always have a solution. But if you want to generalize it to just like configuration, symmetric configuration space that necessarily are not for symmetric navigator robots, they are something, you know, for just sake of mathematics, mathematical concepts. Mathematics, mathematical concept. Then we have to have the closed transversal, and so far I cannot define it in general, but this is actually a work in progress. So I'm trying to somehow generalize this definition to any GS spaces, basically. But let's see if we have this concept, if we have this closed transversal, therefore we can define this special ontological complex. Find this special topological complexity. What's the relation between this and the other equivariant topological complexity? So, for equivariant topological complexity, if you remember from the classical one, so we have stupid x and then we have this pass space, and we are looking for a section to this map, and usually we cannot find it. And usually, we cannot find it, so we try to cover it with some open subsets such that for each open subset, we have a section. Now, when we are talking about equivariant version, that means we have a group acting on X. And now we want everything be somehow nice and preserve this action. So, we need to turn everything into a group to a G space and all the maps to the G maps, the maps that preserve the action. That preserve the action by G. Now, there are different approaches. So, this space, pass space, it admits a very nice natural g action. So, because it's a space of all pass inside x, so we can actually act on this gamma by just defining it to be g times gamma of t for every t in r. For every t in i. So there is a nice g action, natural g action on x to the i to the passive space. There are two different g actions on x cross x. One is g action by diagonal action. So it's basically g x and y is just g x g y. That's the diagonal action. Another action is by product action. By product action. So it's a component-wise. So we have GH acts on XY by G acts on X and H acts on Y. So we have two different actions on X cross X and we have one natural one on X cross on the passive space. Now, how we can define everything in terms of this one action. Of this one action. So everything should be whether considering the action of G or considering the action of G cross G. Now there are four different approaches to this equivariant topological complexity as far as I know. The very first one is introduced by Coleman and Grant. They call it equivariant topological complexity and use it this notation for that. And then Dranishnikov said a little bit. Such a little bit change this definition and called that a strongly equivalent topological complexity. And okay, that's a store actually. And then Mazientowicz and Lubowski defined another version. They call it invariant topological complexity, and they use this notation. And then Blaziskis and Blaziskis and Kaluba, I'm not sure if I pronounced his name correctly, but they call it effective topological complexity and they use this notation. And as you see, the two notations, they are using subscript G and the other two definitions, the notations, they are using superscript. And when I was about to actually denote my special topological complexity, I had some options like I had some options, like as my supervisor told me, to put the G behind that, but I decided to just change the notation of TC. So, in that case, I would have also option to, you know, do this and this. So, I can have two different definitions as my own. Anyway, that was a joke. So, let's see each definition and then I'm going to tell you what's the relation between the spatial topological complexity and these four definitions. Complexity and these four definitions here. So, the version of Coleman and Grant, which they call it equivariant topological complexity, so what they are doing, they are considering everything with action of g. So, they are considering the diagonal action on x cross x, and they are using the natural action on the passive space. And now they are asking this open subset to be G invariant open subset, and the maps just g maps. So they turn. Just G maps. So they turn everything to G spaces and G maps. And so now they are looking at the equivariant sectional category of this map Q. Now by equivariant sectional category is the same as sectional category except everything should be compatible with the action of the G and all the maps should be G maps and so on. So this is the definition of equivalent. So, this is the definition of equivariant topological complexity. The next one, as I said, that Dranishnikov, he little bit changed the definition. Instead of considering the G action on X cross X, he considers the G cross G action on X cross X, but he doesn't change the G action on X cross I. So, still we have the G action here. So, that's a G action. So that's a G space, but this one is a G cross G space. Now, for the open subsets, it's asking the open subsets to be G cross G open subsets, so G cross G invariant. They are invariant under the action of G cross G. And then at the same time, it doesn't change this map. So this map should be a G map. So he just basically changed the action of these maps and their spaces by instead of G, he's considering G cross G. And he called this a strongly equivariant topological complexity. And of course, it's again the equivariant sectional category of this map. And this strongly equivariant topological complexity is always greater than the equivalent. Always greater than the equivariant topological complexity. The other definition is by Lubowski and Marzantowicz. Now, what they are going to do, they are trying to consider the G cross G action on X cross X, but for the passive space, they cannot use, there is no obvious action of G cross G on this passive space, so we need somehow to We need somehow to define something like under action of G cross G. That's why he is proposing this space. So he is taking the passive space cross-passive space and he take the modulo this relation. And basically what he is doing, instead of just considering all the paths inside X, for example, considering just gamma inside X, he is considering Gamma inside X, he is considering two paths, gamma and delta. But instead of asking that the end point of the gamma is exactly the same as the initial point of the delta, it's asking if they are in the same orbit or not. Okay, so what it does, it started at some point, let's say x0 and ended at some point x1, but in between it can move. Between it can move from one point inside the orbit to another. So basically, if it was the navigator robot, it's changing the state of the robot at this point. And it's asking this, and then he's defining the map P from this space to X cross X. And it just sends this gamma and delta to the initial point of gamma and terminal point of the delta. point of the delta and this g cross g sectional category so a covariant sectional category of p with respect to g cross g action he calls that invariant topological complexity so in this case he tries to turn everything into g sorry that's it cross g cross g action and then the last one is by kaluba and his Uh, Kaluba and his co-author, and they are generalizing the idea of Mazanto Vixandubolsky. And now, instead of just taking two paths, they are taking the sequence of paths. So, they are taking, for example, here, gamma one and gamma two, gamma three, and so on until gamma k. And at each point, and at each uh, like here, what they are doing, they are considering that the uh They are considering that the terminal point of one pass is in the same orbit as the initial point of the next pass. So these points are in the same orbit and these two points are in the same orbits and so on. So they are allowing different changes in the status or structure state of the robot and then they are sending this to again the initial point and the terminal. The initial point and the terminal point. And they call it the effective topological complexity. Now, for the case that we have this closed transversal, so if the closed transversal exists, then I prove that all these equivariant versions of topological complexity are higher bound for the special topological complexity. So basically, this special topological complexity gives a smaller number. A smaller number, and that means you need a smaller number of motion planning algorithms to write. And that's a good news actually for programmers because they prefer less number of algorithm. But now still the question is whether we can generalize this idea to any geostaces that whether the transversal is not necessarily closed. And I'm still working on that. Thank you so much. Thank you so much. Thank you, Marcia. Any questions either on Zoom or here in the lecture room? Well, in the meantime, I have one. I think, I don't know if you mentioned this. Don't you need some kind of connectivity? Don't you need some kind of connectivity condition on the transversal in your constructions? Okay, by definition, okay, yeah, I didn't actually, I wasn't precise about the definition. Yes, I need connectivity and the transversal that I'm defining is a very special one. So it's a one that is coming from the cross-section. Yeah, so it's the transversal is coming from cross-section, and cross-section is a continuous map. And it's, as you see, it's yeah, it's connected. So definitely it's connected. But we need this condition that X must be a G connected. So that means if we have, for example, let's say we have a space with we have a space that We have a space that is disconnected. So the robot cannot go from one point to another point. There is no way, right? If you have a, for example, let's say walk a robot, navigate your robot, and it wants to go from Europe to US, that's not possible because it cannot swim. So we have to have this configuration space connected, and we have to have some specific condition on that configuration space. Otherwise, sometimes even I didn't mention exactly this, but those. This, but those equivariant topological complexity, for example, if you have a fixed point set and the fixed point set is not connected, then three of those equivariant versions, they give you infinity. So they cannot actually give a motion planning if the fixed point set is not connected. So not only we want some connectivity condition on the space and on the closed transversal, we also want some connectivity condition on the fixed points. Condition on the fixed point set, and so on. Although, for this definition, for the special topological complexity, we don't need the fixed point set to be connected, actually. Thank you. Any other questions either on Zoom or here? Can I ask a question? Go ahead. Yeah, so in your example of S2 with rotations, you showed us a motion planner between two A motion planner between two sort of free points. What about if you go from like one pole to another pole? What do you oh, that's the same thing. So if you want to go from one pole to another pole, so because they are both both points are in the transversal, that's actually the point that fixed point sets are always inside the transversal. So you just go, it just gives you this. It just gives you this pass, which is inside the closed transverse hole. So basically, it's just this pass. But what about the group elements? So you just pick any group elements and then it doesn't matter what you pick. So, right? Yeah. In that case, they always work with E. Okay. Okay. And in fact, for the motion planner, it always looks at the initial state of the robot. So, for example, if it's S0, let's say X0, then it just keeps this S0 unless we necessarily need to change the position. So, for example, it doesn't change the state of the robot at all. That's why when it gives you this pass, really, what the robot's going to decide is whether it's going to change the state of the robot itself or not. Of the robot itself or not. If it doesn't, then all the motion planner, when what all the motion planner that gives you is just moving from one point to another point by the very first state of that robot. So if, for example, the state of the robot was in that case was E, then it's going to stay until we decide manually or by any other functions or tasks to change this to something else. Thank you. Any other questions? Well, if that is not the case, I think we can thank the speaker. Thank you.