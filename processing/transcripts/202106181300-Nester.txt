To the schedule, we've got Chad Nestor talking to us about concurrent material histories, unless I'm mistaken. I think that's what everything's alleged, as far as I'm concerned. Yes, so do you are you able to share screen as appropriate? I think so. Give me a minute to set that up. All right, do you see my? All right, do you see my screen? I don't. Well, I guess it works. I'm going to assume everyone else does. So I suppose take it away. Sure. Thanks, Spoon. So hello, everybody. I'm glad that you're here to listen to me talk. I'm happy to talk at FMCS this year. I'd wanted to come in person, but too bad. Come in person, but too bad. My name is Chad Nestor. I'm a PhD student at Tallinn University of Technology with Pavel Sobyzynski. So, before this, I was a student with Robin for a long time in Calgary. So that's why I'm sort of here. And, you know, the joke is that I'm not sure it's allowed, but I'd like to tell you about a foundational method in computer science I've developed that also happens to use category theory. And the sort of central idea is it's about processes. It's about processes, this notion of a process, and the idea is that a process is a lot like a slug. So, here we have our slug on the right, and this is like our little process cloud on the left here. And as our process evolves in time, it's going to leave behind material history, sort of the things that have happened in the material world as a result of this process evolving. And this is like the slime that a slug leaves as it moves in space. So, processes, slime, they leave this sort of residue of history. Residue of history. And the structure of this residue, this process slime, is captured very well by symmetric monoidal categories. So, in particular, we might take a free symmetric monoidal category, strict in this case, generated by atomic objects like bread, dough, water, flour, and oven, and say generating morphisms allowing us to mix water and flour into dough, to knead dough into dough, and to bake dough in an oven to get bread and an oven. And then we can do things like draw. And then we can do things like draw string diagrams like this, which is a resource transformation that indicates. So, in this one, we see that the two input pieces of dough are baked one after the other in the input oven to get two pieces of bread and the oven again. And so this is how we sort of capture this material history that our processes are going to generate algebraically using string diagrams from amoidal categories. And the other thing about reading these is that two string diagrams might sort of represent different processes. Sort of represent different processes, like in this case, where if we were to add a generator sift that turns flour into more flour, or just flour, and impose the equation that sifting flour twice does the same thing as sifting flour once. And we understand this to mean that the sort of the procedures these two string diagrams represent have the same effect, just in case they are equal as morphisms in the monoidal category. And the thing we're going to do with our processes now, the sort of the Going to do with our processes now, the sort of the contradiction of this talk or of my work, is that we'd like to be able to take a sort of composite concurrent process, this PQ thing over here on the right, made up of a process P sort of interacting with a process Q, pictured here on the left. And what we'd like to be able to do is sort of take the material history that PQ generates as it executes and express it as a history generated by P and a history generated by Q, sort of separately. IQ, sort of separately. So we want this compositional material history so that we can use it to reason about concurrently interacting processes. So, like, a concurrent system is just one with components whose material history is interleave from this perspective. And the way we're going to do it is by adding these corner bits to our string diagrams from anointable categories. So they allow things to sort of flow between two cells. And so formally, what we're going to do is work with single object double categories. So these are double categories with one object. So these are double categories with one object. In particular, that means that the horizontal and vertical edge monoids of our double category. Oh, sorry, I see something in the chat. Oh, it looks good. Okay. Are let's get back on track. Right, are both monoids. And so here, the horizontal edge monoid is this one containing A and B along the top and bottom boundaries, and the vertical edge monoid is this one with X and Y along the left and right boundary. And so, of course, our double category is composed of cells, and we can compose these cells both horizontally. Compose these cells both horizontally, pictured here on the left, and vertically, pictured here on the right, when the boundaries line up appropriately. And what we're going to do to get to these concurrent material history things is we're going to build a double category with one object from A, where A is going to be our sort of resource theory. If you think of it as the theory of bread we talked about briefly. And so how we're going to do that is say, okay, well, I want one cell with top boundary A and bottom boundary B for every arrow F from A to B of my monoidal category. A to B of my monoidal category, where the left and right boundary are the unit of that monoid, which we'll write I. And any way to get to sort of get a morphism of the resource theory A into the double category has to be the same. So like this one says that if I take the cell corresponding to F and I take the cell corresponding to G and I compose them horizontally, well, that's the cell corresponding to F tensor G, and so on for composition and for the identity map. So that's all very good. And then so we're going to also add, sort of take in this double category as Sort of take in this double category as things, as cells, conjoints. So for each object A, each sort of type of resource or collection of resources in my monoidal category, symmetric monoidal category, I want two cells, one that sort of has A coming in from the top and leaving out the right, and one that has A coming in from the right and leaving out the bottom, satisfying these Yanking equations. And these Yanking equations sort of say that this movement between cells horizontally doesn't really do anything to the resource itself. Really, do anything to the resource itself. And dually, I want companions for each collection of objects A, so each object of my monoidal category. And this is sort of the dual. So this one, the resource comes in on the top and leaves along the left boundary, comes in along the right boundary and leaves along the bottom, satisfying these yanking identities again, so that it has sort of no effect on the resource involved. So it turns out that if you ask, that's all we're going to ask for. That's all the structure. Ask that's all we're going to ask for. That's all the structure. We sort of take our monoidal category and we add companion and conjoint structure to make it into a double category. And if you do this, then you get this cool bit of structure that I'm going to call crossing cells. So the generic crossing cell is pictured here on the left, where x is sort of any object of the vertical edge monoid, which we'll talk more about in a minute, don't worry. And so in the case that this vertical edge monoid element x is a circle, where a circle we had to introduce. Circle, where a circle we had to introduce in order to have our corner cells make sense. Then you sort of do it like this by using one of the corners, then using the symmetry map from our symmetric monodal category, and then bending it back. And then you do it similarly for the a bullet thing that we had to introduce to make our companions. And you define them inductively. And these crossing cells make our resulting category into a monoidal double category in the sense of Mike Schulman's work on framed by. Sense of Mike Schulman's work on framed by categories. So the tensor product of cells is where you sort of put them diagonally next to each other so that they don't really touch using these crossing cells. And then it turns out that this is a pseudo-monoid in the strict2 category of strict double categories and strict double functors and vertical transformations, I think. And so once we've done this, this is sort of the big idea here is that now cells in this double category we've constructed are like concurrent resource transformations. Concurrent resource transformations. So, here on the left, we see a cell that transforms water into nothing by obtaining flour along the right boundary, mixing it with the water, and sending the resulting dough out along the right boundary. Then in the middle, similarly, we've got one that transforms an oven into an oven. First, flour passes through it using the crossing cell from right to left, then it gets in some dough along the left boundary, bakes it in the oven into bread, and that bread leaves along the right boundary. And then finally, we have this one up top where it transforms flour. This one up top where it transforms flour into bread by giving the flour away and getting in some bread. And because these are cells in a double category, we can compose them horizontally. So notice that the right boundary of this one matches up with the left boundary of this one in the middle, and the right boundary of the one in the middle matches up with the left boundary of this one. And then when we do that, we can use the Yankeing equations to get just a morphism in our original monoidal category. And so composing horizontally sort of lets all of these concurrent transformations interact. These concurrent transformations interact. And that's the main thing. That's like the big idea that this structure is exactly what you need to represent this. So yeah, if you have questions, just ask them at this point, because everything from now on is less important. But just unmute yourself and say. Right, so this double category is kind of interesting, actually. The vertical cells. kind of interesting actually. The vertical cells, which are the ones with trivial left and right boundary, these turn out not to be very interesting. We've kind of axiomatized it so that these are the original resource theory, the original monoidal category. But the horizontal cells are pretty interesting. The horizontal cells with trivial top and bottom boundary are sort of a monoidal category of exchanges. So now we're going to come back and talk about that vertical edge monoid that we sort of glossed over before. The vertical edge monoid is the free monoid on polarized objects of Polarized objects of A, the monoidal category. So it's going to be a sequence of things like A circle, B bullet, C bullet, where this tensor is the sequence operator here. And the way we're going to interpret these is that these are sort of A valued exchanges, where so A circle tensor B bullet tensor C bullet dictates that if say Alice is on the left of the exchange and Bob is on the right of the exchange, then we'll to sort of do this, Alice must give Bob an instance of A. Alice must give Bob an instance of A, then Bob must give Alice an instance of B, and then Bob must give Alice an instance of C. And that's sort of what the objects of this category of horizontal cells are. And it turns out that exchanges that you might expect to have the same effect, sort of morally, or sort of somehow be the same exchange, are isomorphic in this category of horizontal cells. So, for example, if I have A circle, tensor, B circle, that's kind of Alice gives Bob an A and That's kind of Alice gives Bob an A and then Alice gives Bob a B. Well, that's kind of the same thing as Alice giving Bob a B and then Alice giving Bob an A. And this is witnessed by an isomorphism in the category of horizontal cells. In this case, it's sort of, but both components look the same, but their types are different. And so that's pretty cool. And we get this for everything that we would expect to be sort of equivalent in this sense. So for a bullet, it also works. Giving somebody nothing is the same as not doing anything, where I is the unit of the free. Where I is the unit of the free monoid here, so do nothing. And they're giving somebody A and B at the same time is the same as giving them A and B separately in both directions and so on. It's sort of important that not everything is isomorphic to everything else in this category. That would be boring. And it's not, because there's an arrow going from A circle tensor B bullet to B bullet tensor A circle, where it's this one pictured here, where sort of this is the one where to participate in both of these exchanges, one on either side. What my cell sort of does. One on either side. What my cell sort of does is gets in an A and gets in a B, sends the A out on the other side and sends the B out on the other side. But there need not be a morphism in the other direction at all, which kind of makes sense if you think about it, because what I would need to do to sort of I would need to send away a B and send away an A before I got an A or a B. So I would need to give something away before I had it. And that's sort of morally why this isn't possible. Although also technically, it's not possible, which is important. Which is important. And in particular, this means that our category of horizontal cells doesn't need to be symmetric monoidal. And somehow, this plenarity embodies a causal structure, just this idea that I can't give something I don't have away. And so I'm very interested in this category of horizontal cells. And I have more things to tell you in the future, but not right now. That's sort of part one. That's the foundational method in computer science part: is this horizontal cells. Part is this horizontal cells and concurrent transfer, or sorry, this corners and concurrent transformations using companion and conjoint structure on simple double categories. There's something I've been working on that you can do with this that is, I think, maybe useful and at least maybe interesting, where if we start off with this category of spans of reflexive graphs interpreted as transition systems with boundary, so if I have a span of reflexive graphs here with R at the apex, U on the left, and V on the right, then we Left and v on the right, then we think of the edges of my graphs u and v as events, sort of things that could happen along the boundary of my system. And r is the transition system itself, so its vertices are the states of the system and its edges are the transitions of the system. And then the legs, delta 0 and delta 1, tell me what happens along the boundary when a transition happens. So each transition corresponds to some boundary events, and that's what delta 0 and delta 1 encode. And that's what delta zero and delta one encode. And now, composition of these transition systems is just by pullback of spans. And this is sort of saying, okay, give me the part of both of these transition systems that is consistent along the shared boundary so that the same event will happen there all the time. So, because that sort of makes sense. And then we also, this is a monoidal category with lots of structure, actually. It consists of a category of spans. And the tensor product, where you just take the Cartesian product in the category of performance. Take the Cartesian product in the category of reflexive graphs of each thing. This is sort of you compose the systems independently. And because we have reflexive graphs, there are these trivial edges that allow the systems to execute asynchronously. And so it's sort of a model of concurrent systems with boundary, this category of spans of reflexive graphs. So for example, if we took a boundary reflexive graph, we're going to use this M, where M has one vertex and two edges, one up and one down. The idea is that we're going to. One down. The idea is that we're going to be looking at sort of part of a gear and observing whether or not the teeth of the gear are moving up or down as the gear rotates. And then we defined a span of reflexive graphs from M to M called gear, where I've sort of drawn it so that the apex is in the middle here. The left and right boundary are both M. And so the apex has two things that can happen. Either the gear can rotate clockwise or can rotate counterclockwise. And the coloring indicates the legs. So that if it rotates clockwise, well, the teeth on the left are going to move. Clockwise, well, the teeth on the left are going to move up and the teeth on the right are going to move down. And if it rotates counterclockwise, then vice versa. The teeth on the left will move down and the teeth on the right will move up. And then I can compose my gears as spans of reflexive graphs by pullback. And when I do, the result is this span of reflexive graphs. Oh, sorry. Where if the first gear rotates clockwise, then because they must agree on their shared boundary, the second gear must rotate counterclockwise, and the teeth on the left and right boundary of this counterclockwise. And the teeth on the left and right boundary of this composite system move up, and in the other case, they both move down. And that's the kind of how you think of spans of reflexive graphs. This is the kind of composition you get. And so we had that vertical edge monoid of exchanges, where we're going to glue spans of reflexive graphs to these material history cells of this double category. And to do that, what we need to do is think of those cells as a span of reflexive graphs. And the way we're going to do that. And the way we're going to do that is sort of take our double category and squish it a little bit into a reflexive graph, where the edges of our graph from, say, A to B, so the vertices are going to be the objects of our monoidal category A, these are going to be cells, alpha, with top boundary A and bottom boundary B. And then we get a span of reflexive graphs from this sort of squished thing, which is angle brackets A, to the vertical sort of exchange monoid on each side by just taking that left boundary on the left. Taking that left boundary on the left and taking that right boundary on the right. And so we're treating that monoid as a graph with one vertex and one edge for every element. All right. And then we're going to say that an A-situated boundary is a reflexive graph with a reflexive graph morphism into this sort of single vertex graph whose edges are the possible exchanges. And so the way we think of this is that And so, the way we think of this is that edges of u are events that could happen along the boundary of my transition system. And what this tells me is when that event happens, which things enter and leave the system along that boundary and in what order. And then we can do this for whole transition systems as well, where if I want a transition system between boundaries, situated boundaries, u v u and v phi v, well, then I need a span of the underlying reflexive graphs, u to v. Graphs u to v, pictured sort of here on the top of this diagram, together with another one of these graph morphisms from the apex r to this sort of squished double category, this graph of cells where we don't care so much about the left and right boundaries. And I need this diagram to commute, which just says that, well, the sort of behavior at the boundary, the event at the boundary corresponding to some transition in R, well, that transition better corresponds. That transition had better correspond to a cell whose right edge is the same as what leaves and enters the system when that event happens. It's a bit of a mouthful, and the same on the left. And this is to ensure that when we compose our spans by pullback, the sort of cells that we've associated with them, with these VR morphisms, will be horizontally composable so that we can get the material history of composite systems. My time is almost up. I was going to try to do an example. So, there's this notation for situated transition systems where this graph on the left is the sort of graph morphism maps each of its edges to the trivial thing in our monode. So nothing enters or leaves the system. And the idea is that the two vertices correspond to the sun being down and the sun being up, and the two edges are sort of sunrise and sunset. And then some other stuff happens. Set. And then some other stuff happens on the right boundary, but that's less important. And so this system is intended to model an owl, where in the underlying resource theory, the objects are the resources are sort of what appears here labeling the edges, and these cells down here are what appears labeling the vertices, so that we can sort of describe all of this information. I think I'll just direct you to a paper I have on the archive that explains this in a reasonable level of detail because I don't want to run over time. Of detail because I don't want to run over time. But so the idea is that there's an ape and an owl, and the owl is active at night, and the ape is active during the day, and they do mostly the same thing. And you can sort of run the system and watch it generate material histories like, oh, the ape eats a bunch of things and then poops and then the owl starves to death. So it's a toy example, but I think it illustrates the space of possibility reasonably well. Yes, so these A-situated transition systems, these sort of transition systems with boundary and material history, composably, History, composably, form a monoidal category. You have to be a bit careful about how you set it up, but they do. And it's pretty well behaved. And if your original symmetric monoidal category was compact closed, then this category of situated transition systems, this is also compact closed. And in particular, if you pick the monoidal category of integers from, I guess, Joy Allen Street's paper on trace monoidal categories, then you sort of get a You sort of get a generalization of this work by Katis, Sabadini, and Walters on transition systems with Partida Dopia accounts. So they have an account balance which changes coherently with value flowing into and out of the system along the boundaries as transitions unfold. And I'll cover that there's this unpublished paper called En Partita Dapia that I've sort of referenced down here. And that's really the inspiration for the situated transition systems idea, because what I've done is show how to do this, but for any monoidal category, not just the category. Any monoidal category, not just the category of integers. Along with that cornering and two, you know, the cornering concurrent transformations thing. That's its own thing, but this is here too. We're getting close to time. Yep, Mom. Don't worry, the last slide. Thank you, though. So yes, that's what I wanted to tell you about. If you find it interesting, there are a couple of papers. One actually appeared on Wednesday. It was voted the best paper at a conference called Coordination, where most of the people there had like written programs and were talking about. There had like written programs, and we're talking about them, so I feel pretty proud of that. And then, also, there's something will appear at Applied Category Theory this year on these situated transition systems, and it's on the archive now. So, if you'd like to read either of these, I encourage you to do so. Get in touch if you think this is interesting and want to talk about it. Thanks for listening. I'm done. Let's just quickly thank Chad and we'll move into questions.