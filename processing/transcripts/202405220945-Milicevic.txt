So let us proceed with our second speaker, Lisabeta Dilicevic. And okay, I hardly understand a word in the title. Application. Applications. So I'm really looking forward to that. Thanks. Thanks very much for. Um, thanks very much for the invitation to speak, and actually, more importantly, thank you for to the organizers. Um, some of them are on Zoom. Hi, I miss you for the Cortona workshop because what I will explain today is actually written up in the Cortona volume. It was a good excuse for me to sort of put into writing some of the different perspectives that I have on how to calculate NGKM theory, which I think at least pieces of which will sound. I think at least pieces of which will satisfy maybe more so some of the people in the spline community, but remains to be seen. I'll see how you think after half an hour. This is joint work based on like a decade-long conversation that I've had with Kaisa Taipel, who's actually a director of data science at CH Robinson, which is a transportation logistics company. So she's in industry and does really interesting problems involving, well, lots of data science, but also. Well, lots of data science, but also, yeah, time series and other things. But you won't see any of that detail here. It'll be combinatorial primarily, but also very geometric. Okay, so I can't advance apparently in this mode. Ah, there we go. Okay, so as an overview, what I promise to do in this talk is to teach you via example how to Via example, how to actually calculate, say, some of these basis classes in GKM theory in a setup that I believe is convenient for encoding slides more generally. So I think about algorithmic and implementable vantage points. I work directly on the triangulations. I do not dualize. I never have. And I never have, likely never will. And I hope to convince you why that's a very natural point of view algebraically. And I've also taken a lot of the things that we've known how to do for decades in GKM theory on the algebraic and topological side and infused randomness into the story. So you have to fuss to choose a minimal walk to use certain formulas in a lot of those contexts. Laws in a lot of those contexts, and that all vanishes if you think geometrically and you work on the triangulations. So, okay, so here's the kind of picture that I'll explain to you throughout the course of the talk, and then I'll explain how to do some GKM calculations using pictures like this. So, this will sort of be a talk that proceeds in two phases. First, I'll explain the tool. So, I'll explain how to, what I mean by construct. How to what I mean by constructing a picture like this. And then I'll show you how to do some GTAM theory using this tool. So, okay. What I will do is build a triangulation for you now. It's going to be a triangulation in the top. It'll be a triangulation of the plane. What I will also pair that triangulation with is a group, a different group than the ones that have been referenced so far by the other algebra. That have been referenced so far by the other algebraists. So I will be associating this triangulation to elements of a certain coxeter group, a certain affine coxeter group to be more specific. But all you need to know for now is that this is a group that will have, in my picture, so that I can draw them in the plane, will have three generators. And your choice of group will dictate the angles. You know, this triangulation is starting out as a right triangle there. Is starting out as a right triangle there in the middle. For those who care, this is G equals SP4 is the choice I'm making. This is a type C2 picture, but whatever. So, okay, so I just have some linear and affine transformations. So the origin is here at the intersection of the red and blue lines. And I can reflect across any of those three colored lines that I've drawn. So I have the boundaries of kind of an initial Kind of an initial triangle in the triangulation, all right. And reflections across these boundaries will be most of the time linear, and then there will be one affine reflection. That's the green reflection. And so now I will start with that kind of initial data, that starting triangle, and then reflect across these different red, green, and blue lines. And I'll do that in all possible ways. So I'll show you an example. Along the way, I'm building an element in the group because I'm just going to. An element in the group because I'm just going to record what reflection I did as I went. So, this like A0, that's kind of my starting. I won't be able to stop myself from saying alcove. Alcove equals triangle. Actually, alcove equals simplex in general, because this whole story I had on the other slide, I can do an RN as well. But, anyways, so okay, so I have a starting triangle, my base alcove. I won't be able to stop myself from saying it. And then now I've reflected. Saying it and then now I've reflected across the green. The green generator was the S0, so I will label that triangle by S0, just record what reflection I did. Then I could reflect again, say across a different colored line, reflect across the red, and I get the triangle that's up there. I'm recording that triangle now with the name S1S0. So this is just a label in a group of S1S0. And then I could reflect to process two, and I get this. Reflective process two, and I get this triangle down here. So S2, S1, S0 produces this triangle. And I hope you believe me. I just did a sequence of three of these, but if you do these reflections in all possible ways, you really do cover the entire plane with this tiling. So I have now created a triangulation, a particular, very highly symmetric. I can't excuse that for myself. My triangulations and my simplest, you know. Triangulations and my simple, you know, triangulations and higher dimensions by simplicies, they are all very regular and have a lot of symmetry. But so I've created this triangulation. Along the way, I've also built a group for you. This is an example of an affine coxeter group, but I always think of them as triangles. The elements are triangles. The elements are alcoves. So I think about this group very like literally, geometrically. Okay, now we're going to take walks in this. Take walks in this triangulation. So here's the same picture. And I've just, I'm just crossing, this, I'm just crossing from, this is my base alcove, just crossing from one adjacent triangle to another adjacent triangle. And I will call that an alcove walk. So I'm always passing from one adjacent triangle to another adjacent triangle. This particular walk. Particular walk, I have secretly labeled using a right instead of a left action so that I can sort of more conveniently record the label to this walk. But if you believe the construction that I just did, you could check in the same way that I just showed you how to do all of the sequence of reflections. First here, here, then S1, then S0, then S2, and then S1, and then S2, and you would get this triangle here. If you label the faces in a slightly different way, The faces in a slightly different, very periodic way. It's systematic. Then you can actually record, let's see, left or right. First, I cross a two and then a one and then a two and then a zero and then a one and then a zero, but whatever. Options, that's all. Okay, it's not important whether you prefer left or right actions. You can use either. Okay, so alcohol walks correspond to words in that. Correspond to words in that oxider group that I built because even though I'm showing you a minimal one, you can just walk and walk and walk and walk and walk, double back, cross multiple hyperplanes more than once, you know, just go around randomly. So you would get a word in the generators as you do so, may or may not be reduced. You know, there's lots and lots of different words that represent the same group element. So walks are encoding to all those. So, walks are encoding to all those words for the same underlying group element. Okay. All right. Checking in with Carla. So we have a triangulation. These, that's all I mean by alcove triangles. And we're taking walks. Are we okay so far? Okay, let me tell you how to fold now. Okay, so good. I like to explain folding. Okay, first of all, I need to. Okay, first of all, I need to tell you, I am also going to now choose an orientation, just positive or negative, on every single one of the hyperplanes that I've drawn naturally within this triangulation. I'm only showing a few sample hyperplanes here in this picture, but so for every hyperplane, I have to tell you what's the positive side and what's the negative side. That's the only last thing. Okay. Only last thing, okay, for the combinatorics to that's all the combinatorics that we need. Are they consistent? Sorry, that's interrupted. Like, you got a half identified one. Oh, yeah, I'll show you that this is my jam. I tweak these orientations like you wouldn't believe. You can answer so, so many, many, many different questions by choosing slightly different versions of this orientation. So, I'll be very careful. Let me show you how it starts, and then I'll show you sort of how it extends to all of the hyperplanes. All of the hyperplanes. So, I like to explain this combinatorial tool in the following way. All right, we are people and we're happy when it's sunny. So, you put the sun somewhere and you define where is the sun. And every hyperplane that faces the sun is positive because it's like, yeah, relax in the sun and you're happy. If you're facing away from the sun like we are today, then you're on the negative side of the hyperplane. So, I will choose for this episode. I will choose for this application. I will choose to put the sun in the starting triangle. So, in the base alcove is the sun. And everything that faces the sun is positive. So, as an example of a few of those relevant hyperplanes, I have this one happy, happy on that side. This one, happy on this side, this one, oops, this one, this one, happy on that side. But then it will extend. It will extend, well, as it needs to, in order to capture that. And you'll see pictures later. I think not right now. Or maybe you'll see a few more samples. Okay. So here is an example of an alcove walk that has folds in it. What a fold is, is just, okay, so I take a step here and then I like started to cross over this way. Started to cross over this way, but instead I just bounce back off the wall. So this pink step has just been folded. And then I'm like, okay, well, I'm going to go over here. Nope, just kidding, bounce off that wall. So I have like two folds in this example. And then I finally do cross somewhere in the end in the final step. So I have a pink fold and an orange fold. And I just want to highlight which of those folds are positive and which are negative. So on the positive. Are negative. So on the positive side, you see the pink fold, it bounces off a hyperplane, which is happy because it's facing the sun. Here's the sun. The sun is in one. Okay. But the orange fold is sad. It's cold. There's the sun on that side. And this orange fold is on the negative side. Okay. So there's, you can also bounce off of a wall and not take a step. This is an option. This creates. This is an option. This creates a folded alcohol, and there's orientations that you could assign to such. Okay. All right. So pink fold is positive, orange is negative. I will, it might not look like it to you, I will actually show you two different theorems. And only one of the theorems requires that all my folds are positive. The GKM one does not. M1 does not. So don't stress about positive or negative folds if you only care about a GKM application. Does the order of folds inside the path matter? So is there orange before peak or peak before orange as any difference? In fact, the answer is that it turns out not to have any difference in the aftermath, but that's not obvious. And it won't be obvious to you because. Be obvious to you because the way that I will show you how to fold will be sort of algorithmic, and I will start by choosing an actual unfolded walk and then fold pieces of it. And so it will happen sequentially in the way that I explain it. But if you just like look at all the images of these guys, they sort of the ordering works itself out. It's weird. Yeah. Okay. So here's a bunch of different outfalled algo blocks. I like to draw them kind of jointed, especially for the GPAM applications, because I think of crossing perpendicular to the face of the triangle where I'm sitting or the face of the simplex. But you can smooth it out, or you could even attach it to some underlying lattice in your triangulation. All right, so now I'll just show you how to fold. I'll just show you how to fold walks up, and this will feel very algorithmic and it'll feel like order matters. Yeah, so here's the rules for this particular, the first theorem is you can only do positive folds and you have to like decide tail to tear. So for example, here's an unfolded walk. This one has no folds in it. It's kind of smooth, but so I've decided to take a step here and I've not folded. And I've not folded as you look to the other pictures. And I can't go back and change my mind later on. It messes up the underlying group theory. So once I've decided not to fold here, then I choose to fold here. And what fold means, now fold is a verb, but fold means take this hyperplane and reflect the tail across it. And what that does is it creates one of these little folds in your walk right there. This is a positive fold facing the sun. Bulg facing the sun. And I could look at the next step and decide: do I want to fold it or not? And here I chose to fold it. And again, that's a positive fold. Fold means take this hyperplane now and the tail and just reflect it across. So I have some example of a folded walk in the end of this process. Okay. All right. This is not the application that you'll be most interested in. That you'll be most interested in for the spline folks. So I'll just try to say maybe quickly that now, if you just collect all folded alcove walks into a set in the following way. So I've chosen a sun to be sitting in my base alcove. So that's a zero. And then I pick two other coxsetter group elements, an x and a y. So two other triangles. Just pick two other triangles, x and y. Okay, start. Now this for. Start. Now, for this theorem, I also need the word minimal. Start, don't double back on yourself. Just get there as directly as possible with a walk from that starting alcove to the triangle labeled by X. And then end in the alcove labeled by Y, potentially different cops of group element, and be positive, have only positive fold. Have only positive folds. If you throw all of those folded alcove walks into a set, then you get a parameterization for affine tuberculos cells. I think this theorem is only going to be interesting to the algebraists. This is an open affine Richardson for experts. And then, okay, but yeah, but for the purpose of the GKM. Purpose of the GKM, I just have to say that what I've actually done is I've taken some actually completely giant group and I've decomposed it into a bunch of cells and I've built a combinatorics which captures the intersection of two kinds of cells. And I am like expert at changing the combinatorics to meet your particular favorite. To meet your particular favorite kinds of orbit interceptions. That's actually what I do for a little bit. So, anyways, this is just an example. But what we've actually done is we're seeing this group. I didn't even tell you what it is. I will briefly. I popping up and somehow what we're doing is watching folded alcohol walks tell us a story about double. Story about double cosets and I. So, this is this, these two slides or a couple of slides will be only for only really interesting for the experts. But so what we're really doing algebraically when we choose a triangulation is that we're also choosing a whole bunch of other group theoretic stuff. We've got some upper triangular and lower triangular matrices, we've got some diagonal matrices, we've got some permutation matrices, and there's versions of. And there's versions of, as you fuss around which triangulation that you want to look at, there's versions of like which example collection of favored subgroups that you would have. So I am actually, I have a bunch of these subgroups in the background. Oh, that was also a slide that was just about complex valued matrices. So now I'm going to do something weird, which is instead of to think about just matrices with complex entries, I'm going to jump up to LaRohn's series in a very Jump up to LaRont series in a variable t. Sometimes just Laurent polynomial ring, so no negative powers of t required. Sometimes maybe a unit in that ring of integers where I have to have a constant term and like stuff higher. But that subgroup I that was popping up previously is the pre-image of the upper triangular matrices where I work with this like larger power C. Larger power series and matrices and power series, but then I kill off that T. I send T to zero and I just see what matrices would have gotten sent to upper triangular format as an example. I mean, this is a terrible way to think about this group. Actually, it's the stabilizer of the base alcohol. But if you need to write down matrices, you do stuff like this. So you have units on the diagonal. You've got, you know, stuff where you have, sorry, so you have. stuff where you have sorry so you have to have a constant term on the diagonal you're not allowed to have a constant term below and you have power series above like I don't know you can work out what this group is and you can think about the quotient by that group that's kind of where those double cosets were really what one side of the double cosets was really coming from is that we're working with some particular choice of a flag variety which is quotient by this subgroup i that I just built in the most awkward but algebraic In the most awkward but algebraic way for you. And this quotient admits a bunch of different, not just these, but a bunch of different decompositions. And this is where the affine Schubert cells are kind of living. But basically, the example, the application to GKHAM theory that I want to tell you about is happening on GMOT I. So we're actually computing the aquagarian cohomology of GMOT I. Of Gmod I, if we're looking at triangulations and folded alpha blocks like I just showed you. So, okay, there's like, yeah, anyway, now you can sort of have a little more context for that result, but I actually want to switch out of that like more group theoretic result and get back to the combinatorics and specifically apply it to GKM. So, this is like the end of Rebecca's talk. Was that okay? So, I have some. Was that, okay, so I have some space. I don't care about what the space is, especially don't think about it as like post-nots of the group that I just showed you. Just think about it as admitting some triangulation with particular angles on like where all the triangles are, kind of how they're coming together. And the equivariant cohomology of that space admits an especially nice basis. It's called the Athen-Schubert basis. In this context, the Schubert basis. But where you really Um, but where you really, if you're a GKM theorist, where you really want to play, is in the image of this localization map that Rebecca explained. So, by the time we're passing through this map, we're grabbing a polynomial. And we're grabbing a polynomial which has values at every element of every triangle, every element of the Coxeter group, and polynomials in these things, which I will explain like what those are. I will explain what those are. But we are going to construct now a suite of politics. We're going to construct this function, okay, using the combinatorics of Alcove walks. And the ring structure of the original space in question is, as Juliana was also just explaining, is completely determined by the pointwise product of these polynomial functions. Okay, so I'm going to now show you how to compute an Show you how to compute an example of one of these functions. So, what we'll need as an input, and here's where I don't care anymore if you're starting out with a walk is minimal or not. So, here's a highly non-minimal walk to here, from here. And this starting walk is W. So, this is actually where you're evaluating the function is that starting walk. Starting walk. And I'm going to need to label the hyperplane. So, this is actually the full answer to Rebecca's question. So, this is the fuller answer. So, all of my hyperplanes. So, now I'm just recording a normal vector. Well, I'm actually only recording two normal vectors, but so look at the blue family. So, these hyperplanes here are all normal to this direction vector. Alpha one is an actual explicit vector. It's rooted at zero, and this is h alpha one. And then the other. One and then the other, um, the other affine hyperplanes that are like sort of in that alpha one family, I just record like how far away are they from the origin with this delta. So one far away, two far away, three far away, four far away is like going like this. And then I sort of do something. I switch direction. I'd make my alphas negative and switch direction if I go past my starting point. And then I have those labels in all. Those labels in all directions, but this is just like this is God given by the triangulation that you chose. There's nothing, I'm not doing anything, I'm not making any choices right now. I'm just explicitly showing the labels on these hyperplanes to you. Okay. All right, here's an example. We're gonna calculate one of these GCAN images. Fix a W. This is where we'll be turning out where we evaluate. will be turned out where we evaluate. W, I've just chosen whatever is S1 is 2S1 is 0. And I happen to show you in this, just for ease, this example, a minimal walk to that particular triangle right there from the starting origin. But you can fix any. Okay. All right. You also need to note, oh, the hyperplanes crossed. So actually what I'm doing here, H alpha, that's where I crossed here. that's where I crossed here H alpha 1 plus alpha 2 H alpha 1 plus alpha 2 plus delta here and then an H alpha 2 so I'm actually like just noting along the way where my original what where were the crossings that I originally made okay now V enters the story and V is just going to be something that's related in for experts this is just in F and Bruha order but this is a subordinate 1, 0 is a sub, S1S0 is a subword of that W, right? I could take S1, S0, or I could take these last two, S1, S0. So the partial ordering is just taking subwords, okay? And then I form all possible subwords. So for each way, I could write V as a subword of my initial W. I do so. So patents leave out. So leave out these first two and just take the last S1S0. S1S0. What that will turn out to be is a folded alcove walk, not necessarily positive anymore, but this one turns out to have two positive folds, whatever. But what's crucial for the GKM calculation is actually not where you fold, it's where you stepped. So the crossing, the step here and the step here in the two last places, and where they originally stepped across, not where they step across now, because they. Not where they step across now, because they went somewhere from the original, but instead the fact that I originally crossed here and here, that's what I remember. And I take a product of those indexing polynomials in alpha, i, and delta. And then you do this in all possible ways. So leave out the middle two, you still get v s1 s zero. And the important thing there is then the steps that you. Important thing there is then the steps that you took, how you're forming the actual V at the first and the last place. And so we get a slightly different, we get actually one of the same. This is a common, whatever, a common hyperplane to both of these examples, but I get a different one in this first step. That's an alpha one. Let me just record that. Okay. And just a reminder that this was the example where we saw the pink is positive and the orange is negative, and I don't care. And the word is negative, and I don't care in this application. I care sometimes and not others. So, the theorem, another theorem that's in this paper with Kaisa in the Cotorno volume is that we have just calculated the, we've evaluated all of those polynomials. So, I showed you how to calculate those products where you're reporting where did you step and where did those steps come from. The steps come from, take products of those, but then do that. Then look, look for V as a subordinate W in all possible ways. That's going to give you all the folded blocks which end in V. Right, I didn't emphasize that, but if you actually do the folded thing, you end up in the same alcove in the both in the both examples, previous examples. The only minimal ones, are the all filter ones, or is it only? Any. Yep. Any yep, it all cancels magically. You don't have to remember. Um, the triangulation knows everything. So, the this, um, yeah, so this result is both a geometrization of what's known in the GKM crowd as Billy's formula, but it's also a generalization because I relax the minimality condition that she has, for example. Um, and so, yeah, just to complete this example, what the theorem is saying there. What the theorem is saying there is that we found V in two possible ways as a subword of this chosen W, and you just take the sum. So you get some polynomials, polynomial in alpha one, alpha two, and delta for this particular triangulation. And if you stitch them together, this is an infinite picture. This triangulation goes on forever, but here's like a snapshot of somewhere around the origin. Here's what you would get. Origin. Here's what you would get for the first bunch of alcohols kind of closest in to zero. Here's the one we just computed right there. So you can see nice symmetries. Like you don't have to keep calculating for everything around a vertex in this same kind of cluster. They have the same values. And that symmetry changes a little bit depending on which elements you're picking. So here's another. So here's another closer instance snapshot of a different V. So now I'm calculating S1 and you'll note that the symmetry kind of shifts. Now instead of being symmetric around black vertices, I'm symmetric around blue vertices. And just to match the picture for people who do GPM theory, I drew one time in my life the dual to this picture. Dual to this picture. So, if you actually put a vertex in each of those, say, first six triangles and connect them sort of in all possible ways, which are really coming from how does one thing reflect to the other thing, which is why I like to see the actual like geometry of the triangulation, but that's what all these like little connecting green edges are about. And if you just look at these values that I've highlighted in green, then you would get. In green, then you would get the Schubert class corresponding to S1 for the finite flag, GMODB, just for the GKM spec, GKM experts. So a pair of zeros, a pair of alpha ones here, and then the longest street alpha one plus alpha two, they aren't there. But my story has like goes on forever. I'm just looking sort of locally at a snapshot. But okay, I think I'll stop there. Thanks. Thank you very much. Comments? Questions? So please. So did your proof really benefit from looking at the affine, like the full affine picture? Or do you think you could have seen it just in the finite case? Oh, yeah. If you, this is what that was also one of the points of doing this example. The points of doing this example is that, um, the same theorem, I don't have to like change the proof at all, I can just do g and b instead of g and i, um, and you get this same whatever story that I just tried to, this same theorem, b, w, b, b minus v, b. And what that turns into geometrically is just focusing on only those triangles which touch the origin. Which touch the origin and just taking that picture, like literally copying and pasting it. Yeah. Please. Yeah, so right in the GKAM picture, there are also some longer edges between outcomes that are not related to each other. Right. Do they end up not mattering? They don't end up mattering. And I was thinking about this question. So Nellie had asked about, like, do you get higher degree conditions ever on that initial graph? And my. Graph and my instinct was actually: yes, sometimes, because I was thinking about all of those other affine edges, but actually, no, it's enough to put in just sort of these initial, just the edges that would be kind of coming from. I mean, that's how I'm under, like the underlying motivation for how I'm labeling the hyperplanes, right? It's just to record like what reflects, you know, what reflects the. What reflects, you know, what reflects to what and what across what hyperplane. It all comes out in the wash, yeah, it just all comes out in the wash. And actually, our proof is like, like we just literally check the GKM conditions, which is kind of exciting to do in this way because it takes you immediately to the space of non-minimal walks. So you have to like pre-concatenate walks with other walks that are given by the reflection. Other walks that are given by the reflection you're using. But you are still taking minimal spellings. No. Well, I have to check. We have one technical difficulty in the paper. I can check in the paper. I can check. We tried to relax everything we could, but I think that you're right that there's one corner case related to W that I have to say. And it's probably that, and it probably amounts to that. You're taking G. And it probably amounts to that. You're taking GKM class, so they're homogeneous, so that means that they have to have. Yeah, yeah. I don't want to have an extra degree when I shouldn't have. Yeah, so you're right. Minimal spellings of the moral? So you said that you go through by checking all of the GKM conditions. If you were to, say, throw away methodically some of those GKM conditions, is there any? Conditions. Is there any correspondence where it's like, okay, well, I didn't need these walks. Maybe like it'd be interesting to see where if you don't need certain subwords. I'm thinking like Hessenberg, Schubert. Yeah, if you throw away Chicago, you get more classes, right? Yes. But you're still going to get, well, you're still going to get the same number of generators and just going to be different. Yeah. Yeah. Yeah, I would just tell you in summary that I would first start out by understanding the one parameter subgroups of the underlying algebraic story on the group theoretic side of your question. And then what should the label folded alcohols and what should their orientations be is just like flows from that initial understanding of the group theory. So, yeah, I don't know literally. Group theory. So, yeah, I don't know literally the answer, but that's how I would figure it out. Okay, thank you.