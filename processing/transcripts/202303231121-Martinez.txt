I've been to before, but it's my first time being here remotely. So it's always exciting to be somewhere for the first time, even virtually. So thanks again. And it's been really nice to be part of this conference and listen to the talks before. I have to admit that this one will be of a slightly different flavor than the ones we've seen at least today and some of, and probably most of the talks. But I want to preface my talk by saying. But I want to preface my talk by saying that I come from the analysis of PDE community, and I got into studying some problems from data simulation parameter estimation from that point of view. And in particular, the main motivation, at least for me, was to try to understand what are the underlying mathematical mechanisms that either come from the equation or the algorithm itself that lead to convergence for some algorithms. Okay, so what Okay, so what I want to describe today are two particular scenarios of parameter estimation. And in particular, we're going to apply this to the two-dimensional Navier-Stokes equations for incompressible fluids. And what we'd like to do is to consider the problem where you have observations on the velocity field of the fluid, but you don't observe all the scales. And from that, Scales. And from that information alone, what can you say about recovering an unknown viscosity or an unknown external force? Okay, so I want to point out that the setting that I'm going to be considering is going to be extremely idealized. In particular, it's very much outside of the practical situations in which we apply data simulation. Data simulation. So, in particular, the model is going to be perfect and the observations are going to be perfect. And the difficulty we'll be dealing with is that we don't observe all scales of the motion. And so, in some sense, we're just trying to isolate the difficulty to see what are the mathematical difficulties that come just from not observing all the scales with regards to being able to recover unknown parameters in the equation. Okay? Equation. Okay? So as I said, the main system we'll be studying this particular problem for will be the 2D Navier-Stokes equations. And so I'll write them here. So, of course, the second set of equations is the incompressibility condition. U denotes the velocity vector field of the fluid. P is the scalar pressure, and grad P is the potential force in the fluid just due to internal pressure gradient. And the viscous forces is being represented by nu times Laplacian of U. And the external source is going to be given by F. So this is our external source. This is the viscosity. And so the two. So, the two problems that I would like to study, and in particular, present today is suppose that F is given. All right. And also that you observe some projection of the solution, some finite dimensional projection of the solution. In this particular case, for the purpose of the talk, we'll be restricting ourselves. We'll be restricting ourselves to the periodic box. Okay? So zero to two pi. All right. So the velocity field is, so the system is supplemented with periodic boundary conditions on both sides, in both directions. And this projection, Pn, is going to denote a projection. And it is going to denote a projection onto finitely many Fourier modes. So in particular, we're going to be looking at, we're going to assume that we see the four, that we observe the Fourier modes up to wave number of size n. And so this will effectively represent our observations. So again, you see there's no model error here. There's no model error here. The velocity field that we observe is the one that corresponds to the solution of this system. And what we would like to do is to recover the unknown viscosity. Okay, so this is one problem. So, of course, the other parameter that appears in the equation is the external force itself. Is the external force itself. So, in the second situation, I'd like to assume that we know new. And these are the observations that are given. Same observations. And we'd like to recover the force. Okay, so these. Okay, so these are the two parameter recovery problems I would like to address today. So, in other words, to what extent does observing finitely many scales of the flow enslave the parameters of the system? And the main statement that one can prove mathematically is the following one, that as long as you observe sufficiently many scales, then in fact the viscosity and the forcing are uniquely determined. Forcing are uniquely determined. Okay, so that would be the clean mathematical statement I'd like to make by the end of this talk. And that, of course, has some very interesting consequences for the system itself. And I'll hope to mention that by the end of the talk, if I have time. Okay, so what I'd like to describe next are the difficulties that one has to face in Has to face in, let's say, the parameter estimation problem where you're trying to recover or reconstruct the viscosity. So again, we have finitely many Fourier modes, and we'd like to reconstruct the viscosity. And one can see the difficulties very quickly. And in fact, it's the same difficulty in both. But let me Let me write down a few things first so that you can see where I'm going with this. So, what we'll do is we'll first project the equation onto the subspace that we observe, which is the subspace spanned by those first few Fourier modes. So, I'm just going to introduce some notation here, u n equals p n u. Okay, so just a shorthand. And then what we'll have here, and by the way, just for convenience, I'll project away the pressure so that we'll. I'll project away the pressure so that we'll project the field onto divergence-free vector fields. So this is P sigma. P sigma is projection onto divergence-free vector fields is so that we don't have to worry about the pressure. So we have u dot gradient u equals nu Laplacian UN plus Fn. And of course, F subscript N is just the projection of the force onto that. Of the force onto that subspace that we observe. And if this is so we project onto divergence-free, so we don't have to write the divergence-free condition. Okay, well, if we write down the energy balance from here, okay, so what we do, of course, is we take the inner product in L2 of this equation with the observations un and we obtain. And we obtain the following energy balance. And so, of course, if we wanted to reconstruct viscosity, well, we could just solve for it from this energy balance, right? It's a constraint on the equation. And so one could automatically reconstruct. Well, one could automatically reconstruct viscosity just by throwing everything on the other side of the equation, like we tell our students to do, you know, in calculus or differential equations. Very elementary thing to do. And now we subtract the work from this and we divide by grad UN squared, right? And one, one, maybe, maybe. Maybe if we told our students to do this, they would declare victory. But of course, we all know that we didn't quite solve the problem because this nonlinear term has information that we don't have access to. So this nonlinear term is equal to the low modes plus the high modes. And so we're missing this high mode information. So this High-moded information. So, this formula is missing information that we don't have access to, and that appears to be what the obstruction is for reconstructing the viscosity exactly. And so, whatever algorithm one proposes to try and estimate the viscosity, it needs to overcome the difficulty of not having access to the unobserved scales of the flow. So, the question, of course, is: what algorithm could give you? What algorithm could give you, could reconstruct those scales while simultaneously reconstructing the viscosity? Okay, so we need access to the high modes. I'll call it, this is the complementary projection of U, which I've been denoting as U superscript N. So for high modes. Okay, and let me now turn to the other. Problem of estimating the forcing. The problem is slightly different. I mean, the main obstruction is the same, but it arises in a different way. So again, we have access to UN, so we know this, and we don't know what the external force is. Well, you may recall this very kind of trivial statement that. Trivial statement that any velocity field, okay, a divergence-free velocity field, is actually a solution to the Navier-Stokes equation for some force, right? So what can you do? You take any velocity field, you just plug it into the equation, and it spits out a right-hand side, right? And so that right-hand side, that would be the forcing that enforces that vector field that you, that arbitrary vector field. Vector field that you, that arbitrary vector field you gave to satisfy the forced Navier-Stokes equations. Okay, so one naive guess would be to just take the observations you have, plug it into the equations, and it would give you a right-hand side. Of course, you know that's not going to give you the correct forcing. It'll give you the forcing up to some error. And of course, what is that error? So if we just plug in the low modes directly into the equation. The low modes directly into the equations again will project onto the divergence-free vector field, so we don't have to worry about the pressure. This gives some force, G, right? But what is G? G is equal to the force, the true force, but plus the nonlinear term projected onto the observational. It onto the observational subspace minus the nonlinear term corresponding to generated by the observations, right? So the low mode, low mode interactions in the flow. You'll recognize this, that this is essentially the Reynolds stress of the flow, because we're trying to commute some averaging procedure, some spatial. Uh, averaging procedure, some spatial averaging with the non-linearity, and of course, it doesn't compute with the non-linearity, and so it forms this. You form the stress term. And so, whatever algorithm one comes up with to try and infer the forcing from low-mode observations has to overcome, the difficult has to overcome the fact that a Reynolds stress is present. In particular, if one comes up with an algorithm to recover the forcing, it needs to in some way systematically decrease the error. Some way systematically decrease the errors coming from the Reynolds stress. Okay, so reconstructing force requires the Reynolds stress to go to zero somehow. Okay, so these are the two main difficulties. They're essentially coming from the fact that we don't have, that we made, that we don't have access to the high modes. We don't have access to the high modes of the flow, which are which precisely represent the unobserved scales of the motion. And the algorithm needs to systematically reconstruct those modes. Okay, so let me show you two algorithms now which will do this. So the algorithm I'll present is based off of A relatively recent algorithm introduced by Azuwani, Olson, and Titi in 2014. It's not anything particularly complicated, and it's in principle been known by, you know, from the beginning of data simulation. In particular, it's nudging. And so, what Azuwani Olsen and Titi did was they introduced a new system where they directly insert the observations as a feedback control. Okay, so here are the observations right here, and it's inserted as a feedback control. And of course, the observations are P and U. And they showed that, of course, there's a diagram-free condition. They showed that as long as you observe enough modes, you can always tune your parameter μ. This is the tuning parameter in the algorithm. So this is. The algorithm. So this is a tuning parameter that V converges to U. And so if so the theorem by Azumani, Olson, and Titi is that there exist constants C1 so that the ratio between mu The ratio between μ and μ, as long as this is satisfied, okay, where C1 is a constant that depends on the size of the viscosity and the force, then you can reconstruct the unobserved scales of the motion, at least in L2, asymptotically in time. And so basically, this is saying that if you have a time series of sufficiently many scales that of Of the scale of the fluid field, and you can observe sufficiently many scales, then this, then integrating this system, which we'll call the nudging, which we'll call the nudging system, okay, right here, nudging, can asymptotically reconstruct the unobserved scales of the flow. All right, now, of course, this algorithm assumes that one knows the viscosity. The viscosity and the forcing beforehand. And so the issue we're addressing now is: what if you didn't know what the viscosity or what the forcing was? Can you simultaneous and so then the problem becomes simultaneous reconstruction of the unknown parameters and the observed and the unobserved scales? All right. So one algorithm which was devised by Carlson, Hudson, in Larios just a few years ago. Just a few years ago, was the following. They did numerical simulations of this Oswani-Olsen-TT algorithm, and they were thinking about this problem of how one could reconstruct the viscosity. What they found was if you look at the difference between V and U, let's call it W, and now Call it W. And now, as I said before, we don't know the viscosity. So they're going to insert a guess for it, nu tilde. So if we take the difference between this nudging algorithm with the false viscosity and the original Levier-Stokes equations, which is representing the truth in this setup, one, of course, obtains this type of equation. Type of equation. Now, R is the difference in pressures, but we can essentially ignore it because we always projected divergence for vector fields. And the forcing vanishes, and you just have mu times W n. have mu times W n on the right-hand side, right? Because of the nudging term here. So that's mu times Wn. Okay. And then you look at the energy balance, but only through scales that you observe. So you look at one half d dt W n squared, and you'll get the nonlinear terms. Let's project onto divergence-free vector fields again. Divergence-free vector fields again. So, we're going to put this take the inner product of those three quadratic, those three terms, one which is quadratic in the difference, the others which are linear in the difference. And one gets the following. So, note here, I'll add and subtract. Let me make this a different color. Nu tilde minus nu of Laplacian V N, W N. W n plus new or minus new grad w n squared minus mu w n squared. And what they observed from numerical simulations is the following: that this becomes small eventually, or this becomes so that the error becomes constant. These effectively become small. These effectively become small, and this effectively becomes small. So essentially, all the terms which are quadratic in W become small eventually. And what one retains is the quadratic term in W with being multiplied by mu because mu is taken to be large in practice. And what this led to is the following approximate identity. Okay, from which one can now solve for viscosity. And so one gets that viscosity is approximately equal to nu tilde minus mu W n squared Laplacian Vn Wn. All right, so just solving for a viscosity. And now this gives an iterative algorithm for updating values of the viscosity as you collect. Values of the viscosity as you collect observations in time. So, notice we have access to all this information now. WN is the difference between the nudging system, the solution to the nudging system and the observations, right? Or and the Navier-Stokes, but only on the substrate which is observed. And same thing with V, that's generated just by inserting the observations as an exogenous forcing term. And so we have access to all this information. And so we have access to all this information on the right-hand side. And so we can now use that to iteratively create new guesses for the viscosity. So, in particular, one has the following, one can generate the following sequence of viscosities. And the only thing the user has to determine, essentially, is what time to make that update. Okay, so you have to select some judicious time. All right, so I'm going to pull out of my drawer here that I've prepared. So they showed here are the original numerical simulations of Carlson, Hudson, and Larios testing this algorithm in the 2D Nager-Stokes equations. And you see here, so this is the vertical axis is the parameter error. So this is new n minus. Minus new and it converges to machine precision after some time. So this bump was some kind of artifact from the numerical error, but you can see there's a steady convergence to zero of this sequence. And of course, one is in their setup, one is observing very few modes, I think only 10 or 12. modes, I think only 10 or 12 modes, and they're resolving and they're resolving the entire flow. So I believe the resolution is 2048 squared for the velocity field. Okay, so it looks like it's working. And so why is it working? And so what last two years or so ago, one, I was able to prove that this algorithm I was able to prove that this algorithm is indeed conversion under the assumption that this denominator remains bounded away from zero. Okay? It's an expected condition for this algorithm. So provided that this quantity remains bounded away from zero, then, or so let me say, to make that more precise, greater than or equal to Make that more precise, greater than or equal to some epsilon for some epsilon positive. So you can bound it away from zero. That's what I mean by that phrase. Then there exists mu and n sufficiently large so that one can guarantee a type of geometric convergence. Okay. So, this algorithm is indeed working. And in numerical simulations, one actually does not see the non-degeneracy condition being violated, which is why they see convergence through the simulation. All right, so if there are any questions about that algorithm, I'll certainly be happy to address them later. But what I'd like to show right now is just But what I'd like to show right now is just some insight as to why this was working, why this was one can ensure this type of convergence for the viscosities. And may I ask how much time I have left? I'm like five minutes. Five minutes? Yeah. Okay. All right. So I'll show this. The forcing algorithm is much more interesting in my opinion. Much more interesting, in my opinion. But let me show the ideas for the proof of this viscosity recovery algorithm, and then I'll stop there. Okay, so ideas for the proof. So if one wants to study convergence, one of course has to look at the parameter error. And what one can do is rewrite this error. Rewrite this error as follows. You just add and subtract the previous value, the previous guess for the viscosity. And one notices that from the update rule, one has this identity. So you just subtract Vn plus one from Vn, and you have exactly this quantity. On the other hand, from this difference, one can go back to the equation. And so from the equation, we see we have this identity, right? So this is viscosity coming from the previous guess and the true parameter value. And so one can just And so one can just solve for that difference. And so one sees, I'll just copy and paste all of this. So we'll just move these terms over to the other side effectively. Okay. And this becomes a plus. And then we divide by Laplacian Vn Wn. What we notice here is that when we add this term, we have this very beautiful Observation that the mu times Wn squared cancels with mu times W n squared here, coming from the update rule. Okay. And so what that means is that whatever the terms that are left are essentially just the function of w and u divided by this quantity, which is assumed to be bounded. Which is assumed to be bounded away from zero. Okay, and so the goal then is to obtain estimates for W, which are of the order nu n minus nu divided by mu to some power p with some p positive. Okay. Okay. And so, of course, if one can show this type of estimate, then one can close the estimate for the parameter error and get something of this form. And so we see here that the tuning parameter is actually what ends up giving the convergence to the true parameter. To the true parameter for this algorithm. Okay, I'll stop there. Thank you very much for your time and again for the invitation. Thanks for the talk. Time for a few questions. So maybe it's obvious, but if the But if the viscosity and forcing are unknown, do you have to observe all the modes? Or are there conditions when you can determine both? No, you don't have to observe all the modes. So that is absolutely a very natural question if you can do all three simultaneously. It's actually something that I'm working on with a graduate student at the grad center. So it should be doable. And I believe that. And I believe that one can use effectively the same order of modes that one needs to guarantee convergence for these algorithms theoretically. But yeah, the point is that you only need finitely many modes. It's a very large number. It's a completely impractical number, in fact. But the numerical simulations, I suppose this might be a good opportunity to show. Well, I have it for the forcing algorithm. Well, I have it for the forcing algorithm. That you actually need much less modes when you're doing setting up the numerical experiments to observe that actually lead to convergence with these algorithms. So the practical implementations of this, as far as we can tell from the numerical simulations, require far less modes than what the theorem actually asks for, which of course gives some hope for the implementation. You know, the implementation of these things. Although, I have to, like I said, there's been no work yet on incorporating observational noise or model errors and studying the subsequent convergence analysis. Okay, so that's still work to be done. A lot of work to be done. So, related to the question about the Related question about the formula. So, can I see the equations you write for the truncated equation? Which problem? Big effort in the difficulties you listed there. Oh, the difficulties, yes, yes. So, yes, here. So, in the first part, the advisory part, you use a full with the low modes and high modes. Low modes and high modes, u dot origin u here. And this is not the same as what we use in the spectral method, right? Where we use the truncated nodes. And then it will change the anti structure and little related stuff. So comments about the difference to use this full field and what we use the truncated mode for the non-linear part. Right, right, right. In fact, Right, right. In fact, so I don't believe that anybody has studied that yet to use that, has just studied it rigorously, but there have been people who have done numerical experiments. One of my collaborators, in fact, Jared Whitehead, where you do use exactly that. You use that additional information. You try to reconstruct as much as you can of the convective term, and you insert it into the algorithm. And it turns out that there's Into the algorithm. And it turns out that there's not that much gain from using that information. Somehow, that's already getting taken care of under the hood through a mechanism of the equation itself. Okay, so some of you might be familiar with this mechanism, but there's something that the community refers to as the Fourier Prodi mechanism of determining modes for Navier-Stokes equations and many other hydrodynamic systems. Many other hydrodynamic systems. The property is the following: that if you observe sufficiently many scales of the solution, then those scales are sufficient to asymptotically reconstruct the remaining scales. And so already having access to sufficiently many modes is a very powerful piece of information and the prevailing And the prevailing belief is that that property, the fact that the large scales asymptotically enslave the small scales, is related to the dissipative length scale in turbulence. And so, of course, after some wave number, there's a cutoff in the energy spectrum and the energy beyond those scales decays. Beyond those scales decays exponentially. And so, effectively, the dynamics of the flow are parametrized by finitely many degrees of freedom. And this is the underlying nonlinear mechanism in the equations that is being exploited for these algorithms to work. Related to the previous question. So, in the theory, does it mean you need finite modes and large enough so that they need to cover the spectral up to the distributive sphere so that you can use the complicated state tool? But the other part, unresolved part, is only restrained in the distributive part so that you can screen that with new. Yes, precisely, precisely. So the theorem requires, is effectively requiring that. Yeah. I think it's also the time for us to have lunch. So Time for us to have lunch. So, yeah, thank you. Yeah, thank you. Thank you very much, everybody. Looking forward to seeing the remainder of the talks too. Have a nice lunch. You can put as many equations as you want. I had something. I had so many more questions about that. Off this yeah, so it's not just the idea in our own.