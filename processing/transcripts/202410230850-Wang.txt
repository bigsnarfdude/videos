So I'll be talking about some numerical methods for multi-phase problem. I've been working on multi-phase problem, including moving contact line and so on, which fits this workshop. So, this work that I'm going to talk about is a joint work with Jim Peng and Li Lu, my former students, now at the University of Macau. So, as I mentioned, I've been working on many multi-phase problems. So, recently, So we have been involved in a project on in-jet printing and draw formation problems and as well as this track reduction by input the gas to speed up moving vehicles. Okay, so there are multi-phase problems including involving boundary and solid boundaries and so on. Okay, so the model that we are using is this Canheillier-Navi-Stokes equation. So you have in particular, there's this model that proposed by Model that proposed by these three authors. If you have a single phase problem, that will reduce to some reduce to the usual can hear Levy Stokes, but there's an extra term here, okay, with the flax, which is non-zero in the Which is non-zero in the interface region. The advantage of this model is that you can derive energy dissipation law, where you have the total brain edge, including the kinetic energy of the fluids. So the goal The goal for us is to develop efficient numerical methods which preserve this NH decaying property at the discrete level. Efficient means you have, because this is a very complicated system of equations, non-linear and so on. So you want to have. Linear and so on. So you want to have some decoupled scheme and also high order scheme. So to motivate this, let's look at the simpler problem, which has people have for work on this, various numerical methods for Core methods for a gradient flow system, which also has this NH law. So, in particular, this NH stable scheme starts from the convex splitting, IEQ, SAV, which has been very popular in recent years, and some different version of Version of SAV for this grading system. Senjie has done a lot of work in this and his collaborators. So the basic idea, so our approach will be also based on this motivated from this SAV method. So the idea is to So, the idea is to introduce this scalar auxiliary variable, okay, so that this system becomes in the modify NH becomes quadratic. And then you can design NH stable scheme easily and also. Also, you can generalize to high order using this approach. So actually, I've been following this using their methods to this multi-phase problem. During this process, we find a We find a different approach, a slightly different approach, which can be generalized to a more complicated fluid problem. So we call this constant SAV. So if you go back to this original SAV approach, okay, so Approach. Okay, so the idea is that this factor here in front of nonlinearity is supposed to be zero at the continuous level, supposed to be one at the continuous level. So the basic idea is this is supposed to be one, and so we let R of t is this ratio, and you can derive And you can derive ODE for this for R, which is supposed to be identically equal to one in the continuous label. And the right-hand side, it should be zero if you do the calculation. And because the right-hand side is zero, you can multiply by any factor. It should still be zero. In particular, we In particular, we keep the numerator and multiply by a small parameter, alpha. So this alpha you can choose arbitrarily, small. The idea is that this would slow down the dynamics of this R because R because suppose at the continuous level, it doesn't matter, but after you discretize the problem, R may not be equal to what, right? But if you let R false small, this would slow down the change of R and therefore increase the stability of the scheme. So, the idea is to modify the original SAV to this with an extra factor R. So this would help, as we'll see, as we'll see from the numerical results. So the NH law. Uh, the NH law is still the same, but with an extra factor, okay, um, where r is supposed to be one. Okay, so this is a constant, okay. Theoretically, it's a constant, okay. You can, uh, based on this, you can design a numerical methods with the NHDK property. Decaying property at the discrete level. And this, in particular, the dynamics, the change of R, the evolution of the constant variable R can be solved explicitly, because it's explicit here, so that you can solve five. That you can solve phi m plus one, mu m plus one from a linear system from the first two equations, and then you update the constant variable. This still is energy decaying, okay. And you can write down a second order scheme also, okay. Scheme also. And you have a similar property. Again, the R is explicit evaluated. And you also have the energy conservation. So you can, the behavior of the this This R constant variable, you can show that when R goes to zero, this Rn goes to one. So you can actually choose arbitrary small R file. And in particular, because there is a factor, right? There is a factor in the There is a factor in the modified energy. And you can show this thing is close to a constant. Alpha is small, which is given here in the second. And the era goes to zero, as alpha goes to zero, also. And it's bounded. I mean, bounded by delta t squared. t square okay and this alpha here okay um so therefore this is this limit when alpha goes to zero this is not a singular limit okay uh in fact if you look at the original scheme alpha goes to zero it goes back to the uh this uh uh implicit uh this scheme okay uh original uh Original people have used that scheme. So here's some numerical results for this. I think it's Kenheeler or Elenka. Anyway, for this bubble, I think it's going here. So you can see the This constant factor, if Rn, the factor of R5, if Rn is R5 is one, then this factor changes, okay. And if you choose R5 0.001, then this remains almost, I mean, no change, okay? No change, okay? Very small change, as you can see. And this is the convergence you can look at also for different alpha. So this alpha to stabilize the method. And this is the convergence for different alpha. You have the second order. Okay, you have the second order for the second order scheme, you have the second order accuracy. Okay, so let's go back to the Kiter Navy SUX system and the NH law, okay, and the NH law. How do we def uh design NH An energy stable scheme for this more complicated problem with variable density and variable viscosity. So I think the Yang Xiaofeng and his collaborator in Collaborator in a few years, two years ago, published a paper in the science, China. So they notice that when you derive the NH law, there are many terms. When you do multiply equation by, for example, first equation multiply by mu, and the second equation, you multiply. And the second equation you multiply by the velocity, you multiply when you derive the energy law, okay, you have integration by parts, right? Then there are some during the integration by parts, there are some so-called zero contribution terms, okay, zero NH contribution term. They are They actually cancel, right? Some involve boundary terms, some cancellations, okay? So that in the end, only these three terms, which is the NH term, kinetic NH and free NH functional, only these three terms remains and there are derivatives of time. And there are derivatives of time, right? And other terms, they cancel, right? They cancel. The problem is if you, after discretizations, after time discretization with different types of methods, those terms may not be. So to design any decaying property, you have to In the end, you have to have this term, also, and maybe some modified energy, right? But still, you have to, after discretization, you have to make those terms cancel also, right? In the in the numerical after-time discretization, at least. So he He noticed those terms, okay, they're zero terms because, so as you can see in this, I denote those one, two, three, four, five, six, okay, those terms. And then you can observe one and two together, they cancel, three and four, and four, five, and six, they cancel. So you They cancel. So, you use this property. So, you can design, you can introduce some auxiliary variable Q and R. And then the right-hand side is based on those. So the right-hand side is zero. And so that at the continuous level, they're identities. Their identities, right? Q and R one constants, okay? But use this, okay? So this is very similar to the SAV, the idea. So you can use this extra auxiliary equations to help you to design a scheme that is NH stable. Okay. But their method is Their method is that you have to do some extra work, many extra work to, in the end, get the energy stable scheme. So the key issue is you deal with the zero energy contribution terms, right? So the question is: how do you deal with the control? So, the question is: How do you deal with the non-zero energy contributions? So, which means those terms that are non-zero eventually appears in the NH. So the key is to deal with those terms. So, let's see what's the issue. For example, In the Navy-Stokes equation, when you do integration by parts, you multiply u and do integration by parts using the boundary condition, then this at the continuous level, this is derivative of the kinetic energy, right? But if you discretize in time, the left-hand side, you do this discretizing time, okay. Discretizing time in this way, let's say, okay, and then you do integration. On the right-hand side, you discretize. So this is what you wanted, right? Because you want the kinetic energy to decay. So this is how you prove the, at the continuous level, how you prove the energy decay, right? Because this is the H decay, right? Because this is the derivative you're discretizing in time, that will be decaying, right? So, in other words, you have this time conservative discretization, okay? You want this to be true, okay? But actually, this is not. This is not true, usually. So, therefore, so we our idea. Our idea is to, even though this is not true in the discrete level, okay, but this, if you move this to the left-hand side, that equal to zero, right? That equal to zero. So again, you can use this in a way, zero, can zero. Zero identity. You design, you introduce another auxiliary variable so that you have two terms here. At the continuous level, they are equal to zero. They are equal, right? So k equal to one, if k equals they are equal. But when you discretize, you use different form, right? This is so that when you do discretization, this left-hand side, there is a connection. If we using this ODE, there is a connection between the non-conservative discretization in time and the conservative discretization in time. Okay, by using this 44, okay. This 44. Because for ODE, you can discretize in the for this term, you can discretize in the conservative form. And for this, you can discretize whatever you want in the original scheme. Okay, so this is the idea of dealing with those non-conservative terms. Okay, so by doing that, Okay, so by doing that, so we have we introduce five constant scalar auxiliary variables, RQRTK for some the first three, RQR for the I mean Q and R is similar to the to the Yan Shao Feng paper. Paper. But we also modify with extra factor Q and R here. And also we have this factor of alpha, which we call stabilizing factor. So that this is going to be this is equivalent to the original system at the continuous level, but Continuous level, but after time discretization, you can play with this extra ODEs and so that the scheme is NH stable. So the modify NH has those extra constants. Those are constant factors. So you can easily see. So you can easily see after you have we have three step scheme. Step one, again, you have for the for the canhiter equation. Okay, so what you can after discretization, you have 56 and 57 can couple to solve phi m plus one, mu m plus one. m plus one mu m plus one okay because everything else is explicit okay and uh and then afterwards you update the uh the constant uh variable okay explicitly okay and then for the navy-stokes equation you have uh uh uh you can use the uh um projection type of method okay um so but the uh So, but the good thing is only linear systems need to be solved for, and they're decoupled, okay? Phi m plus 1, mu m plus 1, and the velocity u m plus 1, p m phi plus 1. And the auxiliary variables are explicitly updated at each time step, okay? So, so that this is very efficient. You only saw Efficient. You only solve a few couple of linear systems and you don't couple with the auxiliary variable. And they're explicitly updated. And you can generalize this to 2D, second order, sorry, second order with similar properties. With similar properties. So I'm not going to the details. The details. And you can show that the NHGKM property, we did this for the second-order scheme. And numerics, so you do some accuracy test. So you have the second order accuracy. We call it our method decoupled constant SAV. constant SAV. Okay, so they're second order accurate accurate. And you look at the modify NH. So for different delta t, okay, 10 to the minus 5 up to 0.01. So there looks convergent. Looks convergent. Okay. And this is the energy conservation. I mean, not energy can the mass conservation, which is also pretty good, very good. And some benchmark problem, this bubble rising problems. Okay. So we did some comparison with some benchmark results. Benchmark results. So you can see the first order scheme has, this is the center for mass of the bubble rising up. As you can see, that the second order scheme has much better performance close to the fits the benchmark result very well. Okay. And And the auxiliary variables, okay. You want them to be close to one, right? So, as you can see, this is for five different auxiliary variables. They're very close to one. Okay. When you choose very small alpha, alpha stabilizing alpha, 10 to the minus 5. If you choose alpha equal to 1. If you choose alpha equal to one, we actually look at the particular one, q. So it varies. I mean, it cannot remain to one. Okay, so this is the effect of alpha because alpha, we can just choose arbitrary, okay, small, so that you slow down the change, okay, which doesn't slow down. Which doesn't slow down, it doesn't change the ori dynamics of the original system, okay, only change the dynamics of the variables. And this is my last, we did this for some benchmark problem, so that looks very good. Yeah, we actually did some comparison also, okay. 