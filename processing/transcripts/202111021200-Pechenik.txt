The pandemic hit my first hybrid talk ever, so I have no idea what I'm doing, and my first time attempting to use a smart whiteboard. So please let me know when things explode halfway through the talk. So my talk is sort of a commentary on the previous talk. Brendan had these four historical eras that he talked about, and the first two were very nice. And the first two were very nice, dynamical algebraic combinatorics. And then it turned into sort of an algebra talk from there. And I am going to have the same first two historical errors, except I will not tell you anything about them. So all of the actual dynamical algebraic combats will not appear in this talk. I will instead start up where Brendan started his third historical era and tell you an alternate version of that. I don't have any fermionic diagonal. Fermionic diagonal coinvariance. But I do think that somehow my talk must be equivalent to what Brendan was just telling us. And Jean, what you were saying at the end, I didn't really understand, but I think somehow you were explaining how my talk is going to be the same. And so maybe at the end of my talk, you can tell me how it is the same thing again. Okay. Great. So I'm talking about this stuff, and this is all joint with Becky Petrius and Jessica Stryker. And I think I can change slides like this. And I think I can change slides like this. Okay, so this is really just a talk about spec modules. So, speck modules are the irreducibles, irreducible representations of the symmetric group, and they're labeled by partitions and partitions of n if you're looking at sn and i want to think about these things not sort of abstractly but as sort of very concrete objects uh made up of very particular things they're going to like be Things, they're going to like be made up of global sections of some line bundle somewhere. And maybe for people visiting this conference, maybe you might find these kind of scary words, but I promise it's going to be very concrete. We're going to be able to very explicitly write down the elements of these things and work with them very directly. And as Brendan was telling us, it's not enough to just have your module, like the isomorphism type of your module. Isomorphism type of your module, you really want to, you have all these different ways of building your module, constructing things that are all isomorphic to each other. And every construction you have doesn't just give you the module, it sort of for free builds at the same time a special basis of your module. And if you do this in the right way for whatever problem you're studying, you're going to find a basis that's well adapted to your problem. And in commentatorics, of course, we'd like to. And in combinatorics, of course, we like to think a lot about how you move between bases of these sorts of things. So we're gonna do that. We're gonna build it very explicitly. We're gonna get nice bases. So here's what we're doing. So we're not gonna talk about all the spec modules. We're gonna talk about just this sort of weird two-parameter family of spec modules. Two parameters, I get to have two rows at the top of some particular length. A particular length, and then they get a long column of ones. And so, Brendan was calling these flag-shaped for a while. We've been calling these flag-shaped, but now that we have these flag varieties floating around, I think that maybe gets confusing. So, I want to notice that they're not sort of normal flags. They're particularly long, skinny flags. And so they look like pennants somehow. Okay, so what we're going to find is that in these cases, there's a really nice basis, a really nice diagrammatic basis that lifts these famous stories, this temporary leabe stories, these web stories of Cooperberg into this pennant setting. And it's not just It's not just that the combinatorics look a little similar. It seems like you really are lifting that algebraic story in a nice way. And we're doing this in order to explain things in dynamical algebraic combinatorics, but you should be able to do all the other things that on the algebra side people like to do with webs. So there should actually be a way to enrich all of this to a quantum group structure. And this should give you the Q that you wanted, Nathan. It should come out of sticking in this quantum. Nathan, like, should come out of sticking in this quantum group. So, someone tell me how to do that, please. Like, it should tell you stuff about geometry of spring-ray fibers. There's usually a nice cluster algebra story attached to these things, like the Flamin and Piliovsky work. And so we should be able to do similar things here, we hope, although we have not really pursued this. So we were talking at first about this like Catalan thing, this SL2 webs here, and Here, and we're going to enrich that to this story with pennants, where instead of having non-crossing matchings, you have non-crossing set partitions where all of your sets have size at least two. And I won't talk too much about the three-row version of this, but there's a corresponding story of SL3 webs doing something very similar. And I claim that what we're doing with these pennant combinatorics. With these pennant combinatorics, it's not really a one-off thing. There's an analogous story that is mostly conjectural at this point that gives you sort of a like a hypergraph extension of this SL3 story related again to some Tableau combinatorics. And this was really our motivation for doing all this. We want to understand the combinatorics of these mysterious sort of webs here. And we realized we were having some trouble. We realized we were having some trouble and we should go back and clean up the algebra on the setting, the pendant setting, where we understood the commentator. So I'm going to tell you our understanding of that algebra and our hope is that you can then apply it to these places where we don't understand what's going on. Okay, so these SL3 webs, these are some kind of planar bipartite trivalent graphs. And the extension you get over here, these are also planar and in some sense. Planar, and in some sense, bipartite, and in some sense, trivalent, and in some sense elliptic, but they're not hypergraphs. You got something analogous going on there. Okay. Okay, so let me tell you how to build new spec modules. So I'm going to question from Vic. There's a question from Vic. Yeah, Oliver. I can't see the chat at all. In those question mark webs, Oliver, are the corresponding standard Tableau. Are the corresponding standard Tableau like a three-row pennant and then a post? No, no, I don't know what the standard Tableau story is. It's not the right dimension to be a spec module. Okay, thanks. Yeah. So I'm not sure what that is, but it corresponds to increasing Tableau, sorry. Okay, so here's my spec modules. So I have 2n variables, and I want to think of polynomials in these 2n variables, and I want to think about These two n variables, and I want to think about an action of SL2. And so, for me, what I'm doing is I'm thinking about my variables as living in this two by n matrix, and SL2 is acting by left multiplication. And so I get these, you know, this change of matrix. And I would like to know which polynomials here are not affected by applying this thing. And there are some polynomials you can write down. For example, You can write down, for example, it's pretty easy to check that like this 2x2 determinant here and this 2x2 determinant here, they're going to be the same. What I did didn't change anything. And so that's an invariant polynomial. And it's not just that one. It's actually all the two by two minors here. They're all invariant in this SL2 action. And of course, then they can do things like add them together or multiply them together, and I get more invariants. And so sort of a very invariants and so sort of a very classical piece of invariant theory is that that's actually everything. So your invariant ring is just generated by all these two by two minors. Well if you write down these products of two by two minors you get all of your invariants. And so what algebraically does this invariant ring correspond to? Well it's the homogeneous coordinate ring of your Grassmannian of two planes. Of two plants. And so we sort of labeled things a little funny. So these two by two minors, right, these are my flicker variables. I can almost write. It's not super legible. So those are my Plicker variables. And so this is not quite the normal story people tell. And usually you think about your homogeneous coordinate ring as being a quotient. You have a polynomial ring in the Plicker variables, and you mod out. Polynomial ring in the Plucker variables, and you mod out by some Plucker relations. But I'm doing the same thing here because these two by two minors living inside this other polynomial ring, they satisfy the same relations. There are relations among these two by two minors that just come from understanding how determinants work. And they're exactly the Blooker relations here. So it's the same thing, but we realize it not as a quotient. So we have explicit polynomials for everything. Okay, so I have. What does GIT stand for? Oh, it is coming from geometric invariant theory, right? It's telling you how to turn an invariant ring into geometry. And it's a big machine that you don't need to know anything about. So, what I know is that my invariants are spanned by products of these Blicker variables. So, they're spanned by these Blicker monomials. Variables so they're spanned by these flicker monomials, and I would like a way to write down Plicker monomials. So, a Plicker monomial is a product of a bunch of two by two minors. To specify a two by two minor, I just have to tell you which two columns to use because I have a two row matrix. So, I need to tell you a bunch of pairs of numbers. And I might as well arrange them in a nice little array and like this. And I can have some. And I can, I have some, you know, control over how I write things. I might as well write these columns to be increasing columns, because it didn't really matter. I just need to specify two columns. And also, like, multiplication is commutative, so it doesn't matter which order I write my minories in. I might as well sort my pairs here so that the first row is a weakly increasing row. But then, like in the second row, But then, like in the second row, I can't really do very much. I sort of just have to take what shows up there, and it doesn't really have any conditions on it. But I look at a set of these sort of weird objects, and they correspond to my flicker monomials. This is a spanning set for my invariant ring. Okay, so if I'm looking at like this, what is it here? So, I'm looking at this column of my matrix, that's telling me to think about this. Telling me to think about this 2, 5, minor. So I'm using the second and the fifth column of my matrix of variables, and I throw them all together into this thing. Okay, there's another kind of picture I could draw if I wanted something more visual. I could just take the numbers one through n, where n is the number of columns in my matrix, put them around a circle. And every time I use the ij minor, I could just draw a line from i to j. And so I get some kind of picture like this. I get some kind of picture like this and notice that like I can have like multiple edges here because I can have the same looker variable showing up twice and I have lots of things crossing each other and like these diagrams don't look super nice but they also encode the same data or dear okay so what you learn out of so standard monomial What you learn out of, so standard monomial theory is also this sort of big subject, but among other things, what it tells you is you have these spanning set of flicker monomials. You might like to know, can I restrict the spanning set to a basis? Well, of course you can. And can you do that in a nice way? And it turns out that what you want to do is look at your things that were kind of like Tableau. And most of them, the second row was a mass. Row was a mess. But just think about the ones where the second row happened to also be weakly increasing, just like the first row. The first one you could sort of do by force, by sorting things, the second row you had to get lucky. But just think about that the plicker monomials where the second row happens to also be weakly increasing. This is very few of the things that you started with. But standard monomial theory tells you that that is a basis of. Is a basis of the degree m part of your homogeneous coordinate ring. So here I'm taking a product of seven Blooker variables. And if I look at the thing that's spanned by all degree seven Blooker monomials, they're spanned by things coming like this. Okay, so this means you can count the dimension of the space because you're just counting semi-standard Tableau. If you have a hook content formula, you know what the dimensions of things are. You know what the dimensions of things are. So, this gives us a basis of something, and I want to extract the spec module out of this. So the spec module is going to be sitting inside here. What we have is, this is my, I have an n by n, whoa, I don't know what that is. I have n by n diagonal matrices, invertible diagonal matrices, looking at the right multiplication on this matrix. So I'm scaling the columns of my I'm scaling the columns of my variables. And so I can decompose into weight spaces. And I want to look at the all-ones weight space. What this means is I'm going to look at products, Plooker monomials, the products of Plooker variables, where every column of my matrix is going to show up in exactly one of my dubai minors. So I'm going to have every column is going to be in one of them, and it's never going to show up twice. So I'm going to look at this like the special set. To look at this, like the special set of looker variables. And now I have an action also of the symmetric group. The symmetric group can also write multiply by the symmetric group. And the symmetric group is just permuting the columns of this matrix. And so if I look at the space of things that correspond to using every column exactly once, and then I Column exactly once, and then I commute the columns, I'm still using every column exactly once. And so this space of polynomials carries an SN action. And you might wonder now, it's an SN module, which SN module is it? And it is exactly the spec module. So what this means is that you can sort of build your spec module as being made up out of exactly these polynomials, and you can write them down very explicitly. Very explicitly because what your standard monomial basis was telling you was that you were supposed to use a semi-standard tableau where every column was used exactly once. It means every number between one and n should show up in your tableau exactly once. So these are standard Young Tableau. Okay, so this standard Young Tableau here is telling me take the 1, 4 2 by 2 minor, the 2, 5 minor, the 3, 7 minor, the 6. You have the 3-7 minor, the 6-8 minor, the 9-10 minor, and you just multiply those five minors together. And this is some very explicit polynomial that you and all of your linear algebra students can write down. And so we know the dimension of this thing, right? You get this Catalan number. We're just counting standard Tableau. So this is not the way that most textbooks tell you how to construct a spec module, but I think it's the only way I've ever really felt. The only way I've ever really felt like I understood what was going on. What I like is that we're not taking a quotient of anything anywhere. The elements of my spec module aren't equivalent classes, they are like actual polynomials that I can just write down and act on. But the action is just permuting the names of your variables. Don't you confuse M and M very frequently? No, I don't think so. No, no, not at all. So, what I have now is that n equals to m. n is the number of columns of this thing, and m is the degree. I'm looking at the restriction of O of M. Yeah, but if N is only even, then you only get even Qatar numbers. Numbers? No, no, no. So m is the number of columns here. N is the total number of boxes. The number of boxes in this tableau is n equals 10. That's right. So for example, last sentence, that's the mth catalog number. Yes, the m oh I see. So here I am wrong. You're right. Yeah, thank you. But I think all of my other But I think all of my other M's and N's on this page are correct. Okay. Yeah, I think it's, but this one's wrong. Yeah. Okay. Yes, thank you. M and N are such similar letters. Okay, so again, we want to understand like how the symmetric group acts on the space. And in particular, for the reasons that, like, Brendan was telling you. The reasons that, like, Brendan was telling you, like, from the DAC reasons, you in particular care about like this nice coxeter element, the thing that just cycles around. And you want to understand, like, this is one of the easiest permutations to write down. I would like to understand how does this permutation act on this basis. Well, what's it doing is it's taking my matrix of variables and it's cycling the columns cyclically. And so if I think about what that And so if I think about what that does to a basis element, it just takes the numbers in your tableau and it permutes them cyclically. So here I'm taking all the numbers and I'm making them one larger, except that I'm doing this mod something so that 10 turns into one. And so the action on this basis element, because my basis element, it maps to this thing, which isn't really set up correctly, right? I was supposed to. Isn't really set up correctly, right? I was supposed to sort my columns to be increasing, so I should have written 110 over here, and then like I should have sorted the columns into a nice order, so I should have put the 110 column at the front, and so I should have gotten this tableau. But like this tableau is not a standard tableau, the second row is not my friend. So like now what I'm supposed to do is to rewrite, rewrite whatever polynomial corresponds to this. To this tableau here, just to rewrite it in terms of standard tableau, like using essentially the Flicker relations, which I interpret as some kind of straightening law on this tableau. And so I do this and I do this over and over again, and I end up with some like large sum of basis elements. Oliver, should that vertical swap cost you a sign? Because it's a matrix minor. Yeah, I'm sort of glossing over a lot of the. Sort of glossing over a lot of the signs in this talk. Okay. But they're all going to be okay. Sounds good. In the end, you're going to be able to control the signs. Okay, so this is not great. This is the wrong basis. If you care about this particular coxature element, you're in the wrong basis to understand. You're in the wrong basis to understand how this thing acts. And so the question is: can you move to a better basis for this? And you can. And so this is coming out of the temporally leave theory. So again, remember we had this alternate picture of Looker monomial corresponding to some way of drawing lines between boundary points on the circle. And if I'm restricting to the things coming from my. The things coming from my spec module, then I'm looking at matchings. I'm looking at all ways of pairing up the boundary points on my circle. And there's lots of these. And again, there's like way too many of them to be a basis, but they do correspond to some things in my strike module. And it turns out that if you restrict to those pictures where your matching just like randomly happens to be a non-crossing matching, well, there's Catalan many of them, which is the right number. There's Catalan many of them, which is the right number of them, and in fact, that's a basis. And in this basis, you can understand what the long cycle is doing. A long cycle is taking a basis element, and again, like I'm ignoring some signs, sending your basis element to another basis element. Not to some big linear combination, but just a single other basis element. And it's even not so hard to see which one it's going to be. You just pick up your diagram and you just spin it around and like the Spin it around, and like this one, you just get the next thing. Okay, and so like I'm supposed to be able to take crossing diagrams here and write them in this non-crossing basis. And this is giving you like one of these on-crossing rules that Brendan showed you, right? This is basically the Fooker relation on GR24. It's right here. Okay, and so I claim that these are very different bases. I mean, you can sort of see that. I mean, you can sort of see that from the fact that this action is nice and the other action was not nice on the basis. But, like, we can see this very explicitly. If I think about what's going on here, let me imagine I'm numbering these things around my cycle. Well, then the corresponding tableau, so this one here means take the 1, 3 minor and then take the 2, 4 minor. And then take the 2,4 minor. And this one here means take the 1,4 minor and then the 2,3 minor. And this one over here means to take the 1,2 minor and the 3-4 minor. And what you want to notice is that in terms of, so we have these three Plooker monomials, these are the three Plicker monomials of degree two. And the web, the this This web basis here is to take these two things that are non-crossing. But the standard monomial theory is telling me to instead take the two things that correspond to standard Young Tableau, namely this one and this one over here, and to get away this, get rid of the one in the middle, which is non-crossing, but corresponds to a bad tableau. Corresponds to a bad tableau, standard monomial theory bases. But I really do have two different bases, right? I could write down a polynomial for each one of these three diagrams, but I'm going to pick a set of two of them to be my basis. Okay, so this is something you can't do in general, right? This is something sort of very special. When you can do this through your spec module, you're very happy in all sorts. spec module you're very happy and all sorts of nice things happen so i'll tell you sort of briefly like what the three row version of this is so now i'm going to have a matrix of three by n matrices and now instead of sl2 acting i have sl3 acting and uh again the same thing happens uh i am algebraically generated by my three by three minors right the maximum minors again and uh again i have this this torus i have diagonal matrices scaling my columns and i can restrict to this mate space My columns, and I can restrict to this weight space where I use every column exactly once. And this is again going to be an irreducible representation of the symmetric group. And again, it's going to be exactly the spec module corresponding to this rectangular shape. I'm going to get spec modules for three-row rectangular shapes. So for example, this one here is telling me to take the three by three minor using columns one, three, and five, and then the two, six, ten column minor, and then the four, eight, eleven minor, and the And the 4, 8, 11 minor, and the 7, 9, 12 minor. And I just multiply those 4, 3 by 3 minors together, and I get some big polynomial. And that big polynomial is one of my basis elements. And again, this is like an easy basis to write down, but it's not going to behave nicely with respect to the action of cyclically shifting your labels. But it turns out that there's, again, some kind of web basis. Some kind of web basis that behaves much better in this way. I put a whole bunch of names on this theorem, and maybe it should have Cooper Berg by himself, also. So there's some kind of these diagrams, I'm not going to tell you exactly what they are, but there's some kind of planar bipartite quivalent graphs with some other conditions, I'm not saying. And there's some way to associate a polynomial to such a diagram. You're sort of feeding a bunch of determinants into each other. A bunch of determinants into each other. You write down some big polynomial. And again, this turns out to be a basis of your spec module. And now it's again very nice to see how your favorite group elements act. The cycle is again going to just pick up your web and it's going to spin it around. And W naught is going to do very nice things. It just picks up your web and it flips it over. You can, again, like the science that I'm hiding. So this is. So, this is nice, and you would like to do this in general. We don't have this very well in general. So, there's definitions of webs for like higher-rank Lie algebras, and they do some of the right algebra, but combinatorially, it's not exactly matching up with the things that you would like them to. And so, we don't have like analogous ways to approach cyclic sieving through these higher-ranked websites. Okay, but strangely, we're going to find what seem to be like web invariant polynomials for this higher rank thing, except it's not going to be all of SL D. It's going to be just some big parabolic subgroup of it. So my matrix of variables is now completely generic. I have a D by N matrix. D can be whatever you want. But instead of acting by SLD, I'm going to pick this. SLD, I'm going to pick this block lower triangular piece of SLD where I force some zeros in the top two rows. And why you would do this is not apparent. But this is the particular parabolic subgroup I care about. This is a subgroup where you can just see that you multiply these things, you stay inside. And again, I have determinant one. So I can, you know, this is acting by left multiplication here. And I can ask what the invariants are. And again, you have this very nice story. So, definitely, all the D by D minors are going to be invariant because they're invariant under the full action of SLD. But you'll get some extra invariance. The 2x2 minors will also be invariant if they're 2x2 minors that use the top two rows. And this is everything. So, if you take that you can build out of D by D minors and top justified 2x2 miners. And top-justified two by two minors, you've got your entire ring of invariants for this parabolic subgroup. And the geometry here, you're no longer getting a Grassmannian, you're living on a two-step flag variety. And it's not a generic two-step flag variety. You get to pick one number D, and your other thing is two. So I'm looking at the parameter space of ways of. Space of ways of taking a e-dimensional subspace of CN and then picking a plane inside it, like an actual two-plane inside that. This is some sort of strange flag variety to be thinking about. I think this was a big part of why we were confused for so long. We really expected everything to live somehow on a Grassmania in some way. And Grassmania is the wrong place to be looking. It lives over here. So, what I said is existed to be able to take like products of D by D minors and top justified two by two minors and multiply them together. And you get this kind of like, you know, by grading. You have a grading by how many D by D's did you use and how many two by twos did you use? And I want to look at just this one weird graded piece. I just want to restrict to the case where I use a single big minor and then as many as I want little. Minor, and then as many as I want, little two by two minors. Again, it's not obvious why that is the thing to restrict attention to, but you can do that. And again, like you can look at this torus acting by scaling your columns, you can restrict to the case of using every column exactly once. That means your column either shows up in the D by D minor or like the top two rows of it show up in one of the two by two minors and not both. And okay, so you get this thing and you can write them down in kinds of tableau. And phenomenon theory, again, And phenomenon theory again tells you what a basis is. You have a basis given by standard Young tableau of this pennant shape. So here you look at your flagpole here, and that tells you a six by six, so D equals six now. You have your six by six minor, and then you have some two by two minors, this one and this one using columns four, five, and columns seven, eight, but you don't get to choose which rows you're using. You're using specifically rows one and two. Rows one and two for both of these. And so this is some like huge polynomial, and you have to actually know how to compute determinants to write it down. But you write down this polynomial. And this is one of your basis elements for this spec module. Just write these down explicitly, even if they're big. Okay, but again, this basis is not helpful if you want to understand the action of the long side. Like the action of the long cycle, because it's going to cyclically shift your labels in your tableau, and then it's not going to be standard anymore. And you have to do lots of straightening laws to fix it, and you get some big linear combination of things. So, what we want is something like a web basis. We want a basis where the long cycle acts nicely. And the answer is non-crossing z partitions without singleton blocks. Without singleton blocks. And so, like, we know, we know, like, what Brendan did was he took this set of combinatorial objects and he built the formal span of these combinatorial objects. And he, by hand, built an SN module structure on it with the appropriate properties. But we would like to sort of like find this module structure in nature. And so, like, Brendan found it living inside the fermionic diagonal coin. The fermionic diagonal coinvariant ring. And we're going to find it just like in this basis of sections of this line bundle. We're going to write down these polynomials that correspond to these things. So I want to attach a polynomial to every such picture. And I'm actually going to get one for all the set partitions. They don't have to be non-crossing. It's going to be a sort of uniform description of how you write down this polynomial. But it can't be quite the obvious thing. Can't be quite the obvious thing because the obvious thing to do is look like I have a block of size three, and then I have a block of size five, and then I have this block of size two. You might like be tempted to take a three by three minor and a five by five minor and a two by two minor. And like that can't be the right thing to do because I'm supposed to, in the end, be in the world of things that are six by six times two two by twos. And this lives somewhere else if you try to just do this naively. If you try to just do this naively, so we're going to sort of do this anyway. And our polynomials are going to be a sum over some kind of tableau. And we're calling them Ranier Shimazono Tableau, because that's the first place we've seen them show up. And Vic, you're in the audience, so maybe you can tell us if they are, in fact, like first in your paper with Mark. But we have these Tableau. They have like, you know, the Swiss cheese sort of tableau with whole. Swiss cheese sort of tableau with holes all over the place. And I'm going to associate such a tableau to my set partition, can't have crossing, but just any set partition whatsoever over here. And now I'm going to take some minors. And my minors, you'll notice, are the wrong size. I'm going to look at this column. This column has four things in it. I'm going to take a four by four minor. And this column has four things in it. So I'm going to take, you know, this four by four minor. And this is my two by two. And so I'm going to take this two by two. My two by two, and so I'm going to take this two by two minor. Um, so the minors are the wrong size to live in the space that I want, and uh, also they're not top justified. So, the rows that I'm using are the rows where my boxes show up. So, this first column here, I used rows one, two, three, and five. And so I'm using columns one, sorry, I'm using rows one, two, three, and five in my big matrix of variables. So, these things are definitely not the right kinds of objects. Right kinds of objects. This polynomial does not live in my spec module. And yet, if I take the set of all of these tableau associated to this set partition, and I take the corresponding polynomials, none of which live in the right place, and there's some sign that again, like I'm ignoring. And you add up all these polynomials that all live in the wrong place. Their sum lives in the right place. And I get a polynomial that I claim really does live in. Polynomial that I claim really does live in my spec module. And so, somehow, like this is very much not obvious. And so, here's how you find that these things live in the right place. So, first of all, it's not clear they live in the space you're talking about. It's not clear that they span anything whatsoever. And it's not. Whatsoever, and it's not clear that they're linearly independent. But all of these things are true. And so, here's the first you have to argue they're in the right space. And what you get is this five-term relation on these polynomials. So, here I'm drawing out the set partitions, but this is really a relation on these associated polynomials. What this is doing for you is like the different terms in this. Because, like, the different terms in this relation, they have blocks of different sizes. They have the same number of blocks, but I'm changing the sizes of them. And this one over here actually lives in my space. It looks like one really big block and then a two by two block, maybe a bunch of two by two blocks. And the things, everything else looks like the wrong kind of object. But the point is that you can use this relation recursively. Use this relation recursively to like keep rewriting. You take your diagram, like whatever it is of weird block sizes, and you use this relation to keep inductively rewriting stuff until you eventually get it as a sum of things that are of this form, where you just have one big block and everybody else is in pairs. This means you can take the polynomial associated to any set partition, and you can have some way of writing it as a linear combination of things that definitely. Linear combination of things that definitely live inside your spec module. So all of these polynomials. What are you inducting on? I don't know how to measure progress. What are you inducting on? Well, the amount of stuff that is in blocks of the wrong size is, I think, the right way to think about it. You have big blocks. You have your one big block, maybe, that you're happy with. Big block, maybe, but you're happy with. And then you have a bunch of smaller blocks, and you want to like deal stuff out of your smaller blocks to make them all the way down to size two and push that into your big block. And I agree, you can't just stare at this and see quite how to recurse out of it. But in fact, you can. In fact, you can use this relation to get everything. So this is like the part where The part where our paper becomes very technical is you have to prove this relation among these polynomials, and these polynomials, you know, they're fairly complicated looking polynomials, and you verify this relation with like some large calculation. This is some sort of surprising identity about the terminants. I don't know a slick way to see it. You just compute that this is true. Cute because it's true. And the nice thing is that you can restrict this big rule here. If you set it up correctly, it restricts to Brendan's crossing rule. So what this is doing is it says, take something that may or may not have blocks of the appropriate sizes. It doesn't really matter. But instead of recursively rewriting it so that it has blocks of the sizes you want, let me instead recursively. Let me instead recursively rewrite it so that all the crossings go away. You can also recursively do that. And what this means is that not only do all of my polynomials live inside my speck module, but the space, my speck module, is actually spanned by the polynomials corresponding to non-crossing set partitions. And if I'm spanned by them, I know they have to actually be a basis because there's the correct number of them. Uh, there's the correct number of them, and we know the dimension of this thing is the number of standard tableau of that shape, and that's the same as the number of these diagrams. So, we get to actually have a basis of these things here. And so, so, like, this is Brendan's crossing rule. So, like, Brendan found this crossing rule by somehow amazingly guessing that this was the right one, and then like computing. Was the right and then like computing it for like six pages, and like to verify that you actually get an SN module. And I think, like, what he's doing in his new like Permianic story, and like, what we can also do is like, this is no longer a thing that you guess, it's something that you compute. You write down all the objects, all the polynomials here, and you just compute that this is true. And you don't have to like, you had to be clever to like figure out how to associate your polynomials, but then once you've done that, you don't have to be clever to figure out what the relation is going. Be clever to figure out what the relation is going to be. It just falls out. Okay, so I want to sort of like clarify the story because a lot of stuff sort of going on. So what you get is like every set partition has some polynomial associated to it. It's not just any polynomial. It's a polynomial that's invariant under the action of this random looking parabolic subgroup. And if you look at the space banned by all these polynomials, Band by all these polynomials, they're like these polynomials are not linearly independent, you have way too many of them. And if you just look at the ones that come from the non-crossing set partitions, that's the basis of your space. And now you can really understand like very directly like what the Sn action is doing. Because all it does is it takes the points around your circle and it literally permutes them. And now you have crossings in your diagram. Crossings in your diagram. But in terms of the polynomial, all you've done is you've renumbered your variables. You can very easily see what your new polynomial is going to be. And now, if I want to like expand my new polynomial in my basis, I don't have to like iteratively use this non-use, I don't have to iteratively use this rule to uncross things. I used to have to do this operation that was like, That was like taking running time proportional to how many crossings there were to get rid of. But now I have some explicit polynomial. If I want to write it in my basis, my running time is going to be proportional to how big the answer is. I just write down whatever this polynomial is, and I pick off a leading term. And then by triangularity, I know which basis element to pull off. And then I find a new leading term, and then I pick off, you know, use that leading term to pick off the next thing. And I can just really write down very quickly computationally what I'm supposed to. Computationally, like what I'm supposed to end up with. So, all of these crossing resolutions, you can find them in this way. Okay, and so now, like, in the end, like, you can do these cyclic sievings. You didn't really need any of this to do the cyclic sievings. Like, Brendan's hand-built gain module was enough to get the cyclic sieving structure. But now you sort of understand where that's coming from more systematic way. Okay, so here's things that I Okay, so here's things that I think we should do. So the first question is like, is this secretly like have I have I rediscovered the same thing that they did without fermionic things? Because somehow it feels very similar. But if you really believe that these are some kind of, like they really are generalizing the story of webs, and these polynomial invariants really are generalizing. Polynomial invariants really are generalizing the web invariance associated to these objects. And it does seem to be being very nice. And so, what you're supposed to be able to do in that story is you take your SLQ, your SL3, and you replace it with UQ SL2. You get this quantum group, and then you get the thing Nathan wanted, where some Q's are going to pop out. And you have a zero, you have a Q Hecker algebra acting here. And so I feel like you should be able to put those back in. Those back in. Somehow, the kind of torque is very similar. Okay, and Jim was asking also about the quantum link invariance. So when you have these quantum group queries here, what you get is you get these quantum link invariants. And the point is, if you zoom in really close on like a link diagram, it looks basically like a non-crossing, or it looks basically like a matching. But it looks basically like a matching. And then you think about how to resolve your matching. So our things don't look like zoomed-in versions of links, but they look like zoomed-in versions of like spatial hypergraphs. And so I wonder if you're getting some kind of like quantum invariant of a, like an embedded ways of embedding hypergraphs into like a three-sphere sort of thing. Okay, and so now we have some combinatorial problem, right? We want to be able to extend this, like the SL3 web story. The SL3 web story and understand there's some tableau dynamics associated to this. Hopefully, we have some more insight now that we can actually write down polynomials to go with things. And so, finally, in the classical web stories, there's this nice cluster algebra story, nice cluster structure coming out of work of Famin and Polyovsky and some more recent work of Chris Frazier. And I don't know. And I don't know how to do this in our setting, but it would be really nice if we also had a cluster algebra story here, somehow coming from like cluster algebra stuff is often really nice on coordinate rings of Grassmannians. And this thing is a two-step flag variety, but it's like almost a gun. And so you might really hope for a nice cluster algebra story going on there. And I don't know if this is even related, but when I was first thinking about Related, but when I was first thinking about the dynamics, there were some tropical freeze diagrams that showed up. And freeze diagrams are like the simplest cluster algebras that could show up. And maybe that's some shadow of something. I don't know. So I'm just going to out of time and I'm going to end, but I'll just end with a picture of one of these freeze diagrams and maybe the cluster people in the audience will be inspired to tell me something useful. Okay, thank you. Okay. Questions for Oliver? There are a number. Okay, let's just go with Brendan. Brendan Runs. That was an absolutely beautiful talk, Oliver. So if you go back to the thing with the crossing resolution, the purple and gray stuff, please. Yeah, this one. Yeah, exactly. So we have more general block operators that are indexed by two sets. And what you wrote down there. And what you wrote down there, I'm quite sure, is a relation that they satisfy. So there's like a kind of five-term relation that looks kind of analogous to that, a little bit closer to the thing that you wrote above, actually. So maybe what you discovered is like a representation of the ring that you get by, well, taking commuting variables corresponding to subsets and modding out by, well, quadratic relations that look something like that. That look something like that, which is, in a sense, kind of arising from our operator picture. Okay. I don't understand your picture really still, but okay, sure, sure, yeah. I agree that somehow it must be the same. Yeah, but those relations show up. I guess that's the main thing I wanted. That thing you had on top. Yeah. Do you have like an easier way of seeing this relation being true? Because for us. This relation being true. Because for us, it's like a third. Yeah, actually, with those block transfer operators, it's pretty quick, actually. We have a pretty quick proof of this. Okay, before we take another question, I just wanted to mention that some of the speakers will be sticking around in breakout rooms after the talks. So don't leave. We'll take some more questions, but then we'll go to breakout rooms. Okay, so JSON? Jackson? Yeah, thank you. I might have missed, but is there a bijection between standard tableau dependent and the non-crossing set partitions you mentioned? Yeah, yeah, you can biject them. This is like a really homework, homework, you should go do this. If that's the case, you can consider a transition metrics between the ordinary, I mean, spec basis and Euro web basis. Basis and Europe basis. And is there any interesting phenomenon like triangularity or positivity? That's a great question. We haven't done it. But there's probably a very interesting change of basis matrix to look at. But you often, often in these settings, you're going to find some nice positivities and some kind of something like that. But we have not tried. All right, let's take one more question from Ricky, and then we'll go to breakout rooms. You can ask all the questions that you like. Uh, ask Oliver all the questions that you like. Uh, hi, Oliver. Uh, thanks for the talk. Um, I have a question which might be uh easy and I just don't know the answer, which is you mentioned that one way to interpret the standard versus the web basis for SL2 is that you have this three-term fluker relation, and you're sort of choosing two of them to form to like sort of to straighten the third one. Um, if there's If there's, of course, another choice that you could make, right? Because there's sort of three things in that relation. What do you do what you get? Do you get a basis in the same way if you try to like resolve? I don't know how you but definitely you could take the other two things. That is a basis in that one example. Yeah. I don't yeah, what whether you get Whether you get, like, if you does this allow you to sort of straighten things to a basis, and if so, what basis you end up getting is the question. I'm unaware of that third basis arising anywhere, but maybe someone in the- That would be like, right, if you think of the standard basis as being sort of like a non-nesting condition and the web basis as being a non-crossing condition, it would be like the third thing. The third thing that relates to that. Yeah, it's sort of like interpolating, it's sort of like on the way between non-questing and non-nesting. Probably that means it's like a bad basis to look at, but I don't know. The other really reasonable basis to think about is Kajanlustig, and Kajlenlustig in this setting corresponds to the non-crossing work version. All right, uh let's