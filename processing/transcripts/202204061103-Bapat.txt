It's a chopo talk, so I'll have to go a bit quickly. But what I'll try to do is I'll try to tell you what a bridgeline stability condition is, at least give some flavor of it. But I might skip some details. Okay, so I want us to really understand an example. And so I may skip some details, but I'm happy to talk to you about them later on. Okay, so I just want to work with one example in this talk, just one, and a very simple one. So I'll work with a quiver. So I'll work with a quiver, and my quiver will be the following. And I'm sure many of you will have seen this before: it's the A2 quiver. So all my examples will be here. And I'm going to think about repQ. So this is the category of representations of the A2 quiver. And if you're unfamiliar with this, it consists of representations of Q. Of Q complex representations. And so it consists of: it's an abelian category, but it has three indecomposable objects, and I'll write them. Running the C. Okay, so I'm schematically, this is what the category is, and it has direct sums of all things. And it has direct sums of all of these. So these two are simple as modules, and this is an indecomposable module. So this is my category. In general, I'll be thinking about abelian categories, so I'll put up those words because that will be important. Okay, and then the next level up is: I'm also going to think about DB RefQ. And I understand that not everybody here has worked with these things, but for us, these are just going to be. For us, these are just going to be: so, what are objects here? It's a bit complicated to state in general, but for this category, it's not too bad. So, I'm just going to think of, there's actually even an easier way to do this in this category than you are. So, I'm going to think about this as finite chain complexes, okay, where each of these, Vi, V. V K lives in red Q. So these are chain complexes of representations. So D squared is zero. And these are all up to a certain natural equivalence, which I'll ignore. So you should think of objects here as shape complexes up to some other fancies. Fancy. Okay, so in general, so in general, this is an abelian category. In general, what I want to think about are triangulated categories. Okay, so again, if you're unfamiliar with that, we can just simply look at this example. And the main thing to remember is that you have a shift operation, which is written like this. And it goes from db rep q. db rev q to db rev q. It's a functor, it's an equivalence, and what it does is it takes a complex like this and it shifts it one place to the left. So v so if I take a complex and I take a shift and I compute its kth term, then by definition it's v k plus 1. So that's all we need to know right now. And I'm about to draw a picture of this guy again in a moment. In a moment. So, I'll introduce these objects and then I'll say a bit more about why we care about all these things. So, this strip is going to be my db repQ and it will be divided up into these windows. And right here, and you should imagine that this goes on infinitely in both directions, and right here in the middle is rep q. Is that Q? And let me get my indexing right, I'm going to get it wrong for sure. But what happens? And so here I have red Q shifted by 1. I never know whether to put a 1 here or a minus 1 here, but that's not always. Yeah. Whatever. So this is, you should think that this is the 0th piece, and this is the first piece, and second piece, and 3rd piece, and minus 1th piece. A minus one piece, so it's a z indexed break, you know, you're breaking up your category into like pieces indexed by z. And this picture, what does this picture mean? Remember I told you that this category Q is abelian. So I'm going to start referring to this category as A. Okay? And I've given, this picture represents a decomposition of this category into abelian pieces. What does this mean more formally? And there are some. And there are some, I'm hiding all the technicalities, so don't worry about it because we won't need them in this example. So, what does this mean more formally? So, every, so this breakdown means that every object has a unique filtration. Which looks like this, again indexing, sorry. I'll write it down and then maybe I'll say something about what this means if you've never seen anything like this before. So, unfortunately, dbrebq is not an abelian category, so we don't have kernels and co-kernels and exact sequences in them. So, that's a problem, but we can still talk about filtrations using what are called exact triangles. So, we have some replacement for exact sequences, which are called exact triangles, and they look like this. And you should, in your head, you should be thinking that A sub A. you should be thinking that a sub a is the quotient of xa by xa plus 1. That's not strictly true, but that's how one can think about it. Okay, so the filtration then looks like this. If you've never seen a picture like this before, I'll leave it here. But the way to think about this is that this is an injection and this is a quotient. And that's not strictly true, but that's the flavor. So then these objects here, so I have Objects here, so I haven't completed my sentence, has a unique filtration of this form where A J, K K, I don't know, lives in this fancy A shifted by K. Okay, so these are all going to be objects and they live in various shifts. So this picture is a decomposition of X into pieces that live inside these various shifts. That lives inside these various windows. So that's how we're thinking about that object X. And this, for those of us who've seen this before, this is called a cohomology filtration. And you can compute this explicitly by taking an object, taking its top or bottom, I don't know, some bottom cohomology, and then continuing. So it's a kind of inductively, each object can be written as some extension. Can be written as some extension of its cohorts. So, if this is all getting a bit technical, this picture is what we want. Okay, so every object can be broken up uniquely into pieces like this. Okay, but now, let me abstract away once more. So, I'm sorry, it's going to be a little abstract before we come back to that example. So, this, a structure like this, so a picture like this. So, this is a schematic of what's called a bounded t-structure. And I'm about to say the same thing, but I'll just write it in abstract language so that we see how to generalize. So, it's the same sort of thing. So, what does that mean? About t-structure consists of on a triangle. A triangulated category C. And if you're unfamiliar, please only think about that example. So what does this mean? So this consists of two things. An abelian subcategory satisfying technical conditions which I'm hiding, not that many. I'm hiding. Not that many. And two, a decomposition exactly like this. So that's all it is. So, in general, if you have a triangulated category C, saying that you're giving a bounded T structure on it is equivalent to giving On it is equivalent to giving two pieces of data like this. So, and this is, and our example is simply doing this. So, there's a reason why I'm introducing it in this weird manner. But you'll have to bear with me to find out. So, any questions? Okay, I'll keep this stuff up and then let's see what we can do. Oh, yeah, let me draw. Okay, so I'll expand on the picture a bit. So let's go back to our example and I'll draw a bit bigger. So remember the middle piece basically has these three objects. It has other stuff but the other stuff is just direct sums in our case. In our piece. And you can think about, if you haven't seen it before, you can think about what are the maps between these objects and so on. But this window, repeating to the left and right, is a bounded T structure on DVRevQ, where Q is our quiver. The great thing is, it's not the only bounded T structure. So that's where I'm heading into this part. So the reason why we chose. So, the reason why we chose this as our boundary structure was because it was particularly easy. I mean, we know exactly, we have a name for this window, and it's called web Q. But from this point of view, this is not necessarily the only thing you could do. So, here, let me show you another one. So here's another one. I hope I've got this right. I mean, I so the squiggly window is now a new window. And that's that. You have to check certain things. I'm claiming without any kind of proof that this squiggly thing gives you a bounded p-structure. What do I have to check? I have to check that it's an abelian subcategory, which is an exercise. And you have to. Exercise, and you have to check that there's a decomposition of each X, as I mentioned, which is another kind of not obvious exercise, but it can be done. So, this is another bounded distribution. And you can do all kinds of things. You could try like bearing the squiddles more to the right or left. This is, by the way, was called a tilt. If you know what tilts are, I think it's an example of tilt. Anyway, but there are other things you can do, but the problem with just tilting, I mean there's But the problem with just tilting, I mean, tilting is great, right? You can kind of try to find these structures in the wild by taking one and kind of like moving a little bit. But the problem with doing something like this is that it feels a bit ad hoc and it's not a bit discrete, like it's not continuous. You're like removing this and throwing in this other thing. It's kind of like brutal somehow. So So, what I want to say, I want to say that there exist other bounded thing structures. And how do we find them? And you might be wondering, why should we find them? So, let me answer that in one sentence right now, and then maybe we can. There are many answers to that question. There are many answers to that question. Okay, why would anyone ever care about finding other bounded t-structures when we have a perfectly good one? The one answer to that question is that finding other bounded t-structures often reveals symmetries of this category that you wouldn't have seen if you had only looked at the extra structure, there's a reason we go to derived categories, and the reason is that there's extra structure. And the reason is that there's extra structure on them. And one way in which it can sometimes be revealed is by looking at other variable structures. So that's a reason. So these reveal non-obvious symmetries of dB rep Q, or I mean any finite. Q, or I mean, any final category which are not don't arise from symmetries of the and it's the structure in here can be extremely rich and I want to tell you that if I can. Okay, so the question is this, how do we find them? And the answer of how to find them, one answer of how to find them is given by these things called Britain's stability conditions. So these are really beautiful, it's a really beautiful construction. Okay, just go. Okay, so let me now tell you how to come up with one such thing. So let's back So let's back up. We have our standard A, it's sitting inside our C and it's about it. So this, by the way, this A is called the heart of this distribution. So that's the like, sometimes called the core. Okay, so let's let me make a definition. So, A is going to be our Belian category. A stability function on A is a homomorphism traditionally denoted by Z, Z, I don't know. Okay, which goes Okay, which goes from K0 of A to C. So what is K0? So this is the Growth and B group. And objects in here are, I mean this is an abelian group generated by objects inside of your A. And the relations are that if your objects fit into an exact sequence, short exact sequence, then the sum of the extreme terms equals the middle term. Okay, so this is. So this is generated by x, where x is an a and up to relations x plus x prime plus x double prime equals x is. So if you've never played with this before, it takes a little bit of time to get used to it, but it's not too bad. In our case, by the way, what In our case, by the way, for ICE categories, the growth indicator is always generated by the simple objects. So it's a free group on these two generators. Okay, great. So it's a homomorphism like this. I'm going to draw one. Oh, I have to say one more thing. Sorry. So, such that For all objects in so for all objects here, Z of X lands in the upper half plane. Weird looking condition, but so I'll draw the upper half plane, part of the C, and I guess ah. So there's some thing you have to do where you can only include one half of the real icon. Can only include one half of the real axis, so it's not the real action. So I'll draw a stability function like this. So I've this is a complex number, which is the Z of 0 to Z. This is another complex number, which is Z of C to 0. I haven't drawn the third one, but the third one is actually implicit because it's the So, the third one is actually implicit because it's the sum of these two. Okay, so the third one has to sequence. Great, and now with this definition, we have a check. Again, another definition. X in A is semi-stable. If for every sub-module, sub-object, we have the following. The angle of y is less than or equal to the angle which I'm writing as the argument of x. So let's think about, let's, so it takes a minute to pass this definition, obviously, but objects in x, oh sorry, objects in A can either In X, or sorry, objects in A can either be semi-stable or not, and you have to think about which objects are semi-stable. So let's think about whether this object 0 to C is semi-stable in the way I've drawn things. Now, remember, 0 to C is a simple object. It has no subs other than itself. So this condition is trivially true. So simple objects are always stable. Techni-stable, sorry. So this is. So, this is semi-stable and this is semi-stable. And let's think about whether or not the third non-simple object is semi-stable. So, what are the sub-objects of C to C? This is a sub-object. Again, if you've never seen that, you have to do some calculations, but this is a sub-object of that. And this has lower angle. So, you're good. So, this is so now those three are semi-stable in the picture that. Are semi-stable in the picture that I drew. And of course, I could draw a different picture where I put this thing on the left, right? So let me do that. Okay, so that's the third one. That's the third one. So this is semi-stable, and this is semi-stable because they're simple. But now the sub-object goes to the left, and that's bad. Sub-object shouldn't be to the left, they should always be to the right. So this is not semi-stable. So I'm only drawing semi-stable objects. So you see, you get some differentiation based on which function you pick. Function you pick. And I'm going to go on for like two more minutes. Sorry. But that's it, that's the definition. A British stability condition, BS C for short, on a triangulated category C is one, the heart of a boundary structure. And two, a stability function, okay, as here. And there's secretly a three, which is automatic in our case. The three is that, why are we doing something like this? Well, this is, so previously in our window, this middle piece was a monolith, and now we've assigned numbers to each of these. And now we've assigned numbers to each of these middle pieces, namely like the angles. So we're trying to differentiate between objects here. We're saying every object next has a filtration by cohomology. We want to give a finer filtration by numbers here. So the filtration on cohomology was indexed by the integers. And the filtration coming from the stability condition is actually indexed by the reals. Okay, so three, each object. Object has a unique, and I won't write out what the filtration is. It looks just like a cohomology filtration, but it's indexed by the wheels. So it's unique and it's called the Hardenerson. HI. Okay, so that's something you can compute in both of these cases, like very explicitly. And they'll be different because. And they'll be different because these are different stability conditions. Okay, that's the definition. I'm sorry, it went on the right there. And I'll say one more thing and I'll stop. And what was I going to say? Yes, there are other bounded G structures. How do we find them? Well, here's an answer. So you can start off with your favorite digital stability condition that looks like this. You can take, now this is a vector in the complex plane, so you can now start to move it. A little bit, a little bit, a little bit more. And as you move it a little bit, the stability function. Move it a little bit, the stability function changes, and that's fine. That's allowed. There's still a stability condition. You can kind of move it off of the upper half plane, even. And that does something non-trivial, and that gives you a new t-structure. Like, literally, by taking vectors in the plane and moving them, you can create new t structures. And that's powerful. And the space of all stability conditions is a plan. That's bridging scale. Very cool. Any questions from folks in person first? Are these classified in this example? In this example, yes. But actually, for DBRepQ, here's a question for the audience. I don't actually know where it's written down. I think experts know what this. I think experts know what the space stability conditions is for DBREPQ, I think. But I don't know what it is, and I've been trying to find a reference, and I have very anyone? I'm sure it's known in the community. I don't. Any questions from online? Compliments? You for compliments. There's a clap. Okay. Very, very clear. Thank you very much. All right. We'll take a couple minutes break. I'll switch over and have a video to approve it. Yes. I can borrow this.