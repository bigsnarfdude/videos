I'm going to present my recent work on finite element approximation of surface evolution. This is a joint work with my students and postdocs. So this work is concerned with the surface evolution under some given velocity field. U is a given velocity field, and we consider the computation of the surface. Computation of the surface evolution under this velocity field. This can be written into a very simple problem. So let's say we want to find a map which maps the initial surface to the current surface at time t. And this map represents the position of the surface. So time derivative of this map, this position, is equal, should be equal to velocity of the surface at the current location. So u is the external velocity field. So if External velocity field. So if the point moves to a current location, its velocity should be given by this velocity. So this is the ordinary differential equation defined on the initial surface, gamma zero. If we choose a particle on the initial surface, this particle P, is fixed, then the trajectory of the particle will be a curve in the three-dimensional space. And this curve can be obtained by solving this ordinary differential equation. By solving this ordinary differential equation, and okay, of course, the initial position of this particle at time level zero is the particle itself. So, for surface, we can triangulate the surface at initial time zero, then we track the trajectory of each node of the surface, then we get the trajectory of this surface at all the time level. And every time t, we know the position of this particle, right? We can at later time, we can reconstruct the surface. At later time, we can reconstruct the surface by using the position of the nodes. The advantage of this approach is that it is very simple to compute the evolution of the surface. We just solve the ordinary differential equation to get trajectory of each node on the initial surface. Then, the disadvantage is that it has no control on the mesh quality. After some time, the mesh may be very distorted and Very distorted and the mesh quality may be very bad. So, this mesh quality is not bad, not very bad, but in some cases we get very bad mesh quality. For example, this is a very smooth velocity field. It's not singular at all. It's smooth. But if we track the evolution of a curve under this smooth velocity field, after some time, we track the trajectory of each node at the initial time. So this blue curve, it disqualitates the... It disquietizes into mesh points. We track the trajectory of each mesh point after some time, at time t, when t equals three, for example, then the distribution of the mesh point will be like this. It's unevenly distributed, right? So it seems that we get a polygon instead of a smooth curve, but actually we should get a smooth curve because this is a smooth velocity field and this is a smooth velocity. Smooth velocity field, and this is a smooth curve, it should evolve to a smooth curve instead of a polygon. The problem is that we have the velocity field drive all the mesh points to the right top of this figure. So then there are too few mesh points on the other part. So it cannot accurately describe this curve. Well, even if we increase the number of Well, even if we increase the number of mesh points, almost all of them will be accumulated on in the right top. So we cannot get an accurate approximation even if we use very large number of mesh points. So the disadvantage of this problem, this approach by solving the ordinary differential equation is that the mesh points may cluster, mesh size may become very large. They cannot describe. Very large, it cannot describe the shape of the surface. And if we consider surface in three-dimensional space, the shape of the triangular triangles may be highly distorted. And this is another example that sometimes people want to solve PDE in some domain which evolves as time increase. So, this is a smooth velocity field, the same velocity field as in the last page, while we have a domain which evolves. while we have a domain which evolves under this smooth velocity field. If we simply track the trajectory of the mesh points, then after some time we get a very distorted mesh. On this mesh, if we solve the PDE, then we cannot get accurate solution. But okay, so how to solve this problem? The original problem is that we want to solve the position of some particle which evolves. Some particle which evolves under this given velocity field. Well, the direct method is that we want to find a map which maps the current surface to the next level surface by solving this ordinary differential equation. For example, this velocity field is given on this current surface, and then we can discretize this ordinary differential equation by backward Euler method or any other method. Then we can get the position of this point at next time. The position of this point at next time level because this right-hand side is given velocity field. Okay, but this cannot give us accurate solution as we show in some examples that the error is very large, not only other one. So then Barrett Gark-Nurenberg introduced a different method in 2007, 2008. They say that, okay, so the shape of the curve. So the shape of the curve or shape of the surface is completely determined by the normal velocity. So if we add an arbitrary tangential velocity to the surface, it will drive the mesh point move tangentially. It will redistribute the mesh point, but will not change the shape of the surface. So therefore, they formulate the problem into a different way. They multiply the velocity equation by a normal vector. So this normal velocity equation is... normal velocity equation is kept but then they add an artificial tangential velocity by adding a different equation okay so this second equation will determine a tangential motion tangential velocity which will redistribute the mesh points more evenly okay so if we look at the second equation it's a little like laplacian equation okay without the right hand side it will be simply the laplace equation but with the right hand side it represents a similar concept similar concept. It's a harmonic map between curves. It minimizes this energy. If we recall that Xm represents a map from the current surface to the next surface, if we minimize this energy, this energy represents the deformation of this map. If we minimize this deformation under the constraint of the first equation, because the first equation can Tell us the evolution of the shape, while the second equation is redistributes the mesh point more evenly. And the method is to minimize the deformation under the constraint of the first equation. And this is a constraint optimization problem. It will give us a Lagrange multiplier. This Lagrange multiplier will be this capital H here. So by solving this problem, one can get This problem, one can get more evenly distributed measure points. For example, this is the BGN measure. So, BG, the name of the three orders. So, this is the same initial curve. If we solve it by the BG method, then we get more evenly distributed mesh points. So, we can see that it will give us a smooth curve eventually instead of a polygon. If we track the Polygon if we track the trajectory directly. Okay, so the BG method is like this. So the normal velocity, so we change basically we change the flow map by adding a tangential motion. So this is a change the flow map. The normal velocity is the same as before, but the tangential velocity is determined by a second equation. They minimize the deformation energy by under the constraint. By under the constraint of the first equation. So it gives us very good results, but the continuous limit of the tangential motion is not known at that time. Therefore, convergence of the finite element method for approximating this PDE remains open until now. Because this algorithm is written down at the discrete level, it's not clear. It's not clear at that time what continuous PD approximates. So it's a discrete algorithm. So let's say. Sorry. So okay, so one page is missing actually. So actually we later in 2022, we proved the formally that this BGM method is the equivalent to minimizing to minimizing deformation rate. So our method is that we subtract identity. This ID represents a location of a point on the current surface. So we subtract the ID here and use the identity which says that Laplacian ID should be proportional to the normal vector of the current surface. So then after subtracting ID and divided by And divided by tau, we get a Laplacian of the velocity is still proportional to the normal vector. So that means that the velocity should also be a harmonic map which minimizes the gradient of velocity square, which minimize the integral of gradient of velocity square under the the same constraint. The same constraint. So, if the velocity minimizes this energy with grading the velocity inside, it's essentially minimizing the deformation rate instead of for the deformation. So, we show that this BG method at the semi-discrete level without a space discretization is equivalent to minimizing the deformation rate. And of course, it's not equivalent if we. And of course, it's not equivalent if we use a spatial discretization, but numerically, the two algorithms behave quite similarly if we add a spatial discretization. So they are equivalent at the time discrete level. Okay, so this is evolution of a non-smooth surface under some given velocity. If we track the particle trajectory directly, it will give us this very bad mesh. It will give us this very bad mesh quality. But if we minimize, we use the BGM method or the MDR method, it gives us much better mesh quality. But for either BGM method or the MDR method, the convergence remains a finite element approximation remains open because we cannot get a stability estimate. For example, this MDR method says that, okay, we Says that, okay, we want to define a new velocity v such that the normal velocity is the same as before, but the tangential velocity is determined by the second equation, such that it minimizes the deformation rate under the constraint of the first equation. So this is MDR method. Well, if we perturb this equation a little, we get a different solution. But then we cannot get a stability estimate. We cannot show that the error between the two velocities. The arrow between the two velocities can be bounded by the epsilon. We cannot show this. The reason is that if we consider the error equation, so the first equation minus this equation, we get an error equation. So Ev represents error of two velocity, Ex represents error of the two positions of the two surfaces. En represents the error between two normal vectors. Then we get an error equation. This error equation is obtained by consider difference of. is obtained by consider difference of the two equations, first two equations. Then, if we want to get some stability estimate, we look at H1 norm of the position error. It should be bounded by H1 norm of the velocity because position in time integral of the velocity, this can help us to control L infinity norm of the position, by L2 norm of the velocity plus the initial position error. But if we look at the But if we look at the velocity error here from the equation, we see that error of the velocity depends on error of the normal vector. Therefore, this error of velocity can be bounded by error of normal vector. But error of normal vector should be bounded by error of position with one additional derivative because normal vector is essentially the derivative of the position. So what we get is that if we want to get h1 norm of the want to get the h1 norm of the partition error we need we need a h2 norm of the partition error with a weaker norm in time with l2 norm in time plus the perturbation error and the initial error but but the on the right hand side we have h2 norm but on the left side we have h1 norm therefore the norm on the right hand side is too strong that we cannot absorb it by the left hand side we cannot use groundwall inequality because the two the norm on Quality because the norm on the right-hand side is stronger than the norm on the left-hand side. So, therefore, we cannot get a good stability estimate because of this unit quality, because that if we want to control the normal vector error, we need one additional derivative for the position error. The normal vector relies on derivative of the position. This is the main difficulty. So, convergence of finite element approximation for these two equations cannot be. For these two equations, cannot be proved even now. So, can we get an algorithm which can be proved convergent? Okay, we look at a different formulation. So, the BG method or the MDR method minimizes the deformation energy from the current surface to the next surface. Okay, we can change to minimize another deformation energy from the initial surface to the current surface instead of To the current surface. Instead of deformation between two consecutive surfaces, we can minimize the deformation from initial surface to the current surface. Then the problem can the continuous formulation of this problem should be like this. We want to find a new velocity v such that the normal component is the same as before. But the tangential component of the velocity should be determined by the second equation. The second equation with the Lagrange multiplier kappa means that this energy Uh, the this energy integral of this energy to be minimized under the constraint of the first equation. Okay, well, if we minimize this energy, we actually get a better match quality in this example. If we track the trajectory of the surface, we get a very bad mesh quality. But if we minimize this energy by solving the two equations, we get a very much better mesh quality. It's even better than the BG method or MDR method. Than the BG method or MDR method. But the final element approximation for this continuous formulation cannot be proved either. Okay, so let's look at the reason briefly. So it's due to the second equation. The second equation says that Laplacian of the position should be equal to some Lagrange multiplier kappa times normal vector on the current surface. So let's So let's replace that equation by the interpolated position. So this capital A X with the star represents interpolation, finite element interpolation of the exact position. So it will satisfy the equation up to some interpolation error, actually. So this is a brief notation. Actually, it should be written. Notation actually, it should be written into the weak formulation, so it's not very rigorous. We should write a weak formulation, but with the additional interpolation error here. Well, our numerical solution solved this problem, so weak formulation of this problem, actually. So, therefore, if we look at error equation, we get error of this position, satisfy this equation. But we have a Lagrange multiplier on the right-hand side. This is the main difficulty, which prevents us. Prevent us from proving convergence of the finite element approximation. Because if we consider the right difference between the right-hand side, we get an error between the two Lagrange multiplier times normal vector. Of course, we get Lagrange multiplier times error of normal vector also. The difference between the two product gives us two terms plus the perturbation, the interpolation error. Well, if we want to get an error estimate, we want to. To get an error estimate, we want to multiply the equation by some test function, which should give us the control on the error of the position. Well, we, but we cannot control the error between the Lagrange multiplier. Then, what do we do? We can multiply a tangential component, tangential projection of this error, of the error x. So then, if we multiply tangential projection of the error, then it will eliminate uh be eliminated by this normal vector. Eliminated by this normal vector, okay, because normal vector is orthogonal to tangential vector. So the method is that we multiply the equation by, we choose test function to be interpolation of the tangential projection of the error. So why do we add the interpolation here? Because the test function should be a finite element function. So then on the right-hand side, this term, the normal vector is approximately orthogonal to... Is approximately orthogonal to the tangential vector. So this term can be almost eliminated. But this is not a problem. But there will be problem from here that the normal vector times this error, tangential projection of the error. So what is normal vector? Normal vector is actually a gradient of the position, actually, position error. So because normal vector depends on derivative of the position. Derivative of the position. So if we use this expression, we substitute this expression here, then we use integration by part, we get a gradient on the tangential component of the error. On the left side, we will have a square of the gradient of the tangential component error. But we do not have a normal component of the error on the left side. So therefore, if we So therefore, if we do the integration by part, change this gradient to this part, this part can be illuminated by the left side, which has a square of this gradient of the tangential error. But this EX on the right-hand side cannot be controlled by the left side, because on the left side, we only have a square of the gradient of the tangential component. We don't have this through L2 norm. Therefore, this term cannot be controlled by the left-hand side. Therefore, we can. Therefore, we cannot get an error estimate. Okay, so this MD formulation gives us very good results, but still we cannot prove convergence. So MDR method, we can also prove, we cannot prove convergence either. So let's say we have two methods here. So this method minimizes the deformation grid. Grid means velocity. Well, this method minimizes the deformation from the initial surface to the current surface. Surface. Neither of them can be proved convergent for the finite element approximation. The difficulty for proving convergence for the first equation is that we will get H2 norm on the right-hand side, which cannot be bounded by the left-hand side, which only contains H1 norm. Well, the difficulty for the second formulation is that we get additional L2 norm for the prediction error. Well, on the left side, Partition error. Well, on the left side, we only have a square of the gradient for the tangential component. We don't have control on the full L2 norm or the normal component. So then what do we do? We can slightly change the formulation. We can add a time derivative here. If we add a time derivative here, then this part will get L2 error here, which will contain time derivative of this term on the left side. Of this term on the left side, so it can be absorbed on the right-hand side by using ground-wall inequality. But adding this term actually only changes the tangential motion, it does not change the normal velocity because our normal velocity is a constraint, actually. So, we can change the second equation arbitrarily. Now, if we change it to this equation, we can get convergence for the finite element approximation. So, this is a relaxed version. So this is a relaxed version of the minimal deformation formulation. It contains a relaxation term, time derivative of x. It's introduced for proving convergence of finite element approximation. But it allows us to prove convergence of finite element method. But numerically, we see that it improves the mesh quality similarly as the original MD method without this time derivative term. So for this method, let's So for this method, let's summarize, it's called relaxed MD method, minimal deformation formulation. So we want to introduce a new velocity V such that normal velocity is the same as before, while the tangential velocity is determined by this heat equation. It's like harmonic map heat flow on the initial surface. We can discrete this equation on the initial surface by using finite element method. We can prove convergence. method we can prove convergence so which shows that for if we use the final elements of degree k then we can prove case order convergence for the error between the numerical solution and the exact solution interpolated function of the exact solution okay so the convergence rate agrees uh well with our uh so it's sometimes it's better than than what we prove for for even order finite elements it's the same even order finite elements it's the same as what we prove for old order it's better than what we prove the reason is not clear uh so far so so this this this is a 1d curve 2d curve the evolution of some curve and the surface under this velocity field okay we can prove the we can uh test the convergence because we know the exact solution in this case well we can also test the uh the performance on this example that if we use rmd method If we use RMD method, relax the minimal deformation method, we can see that it gives us more evenly distributed mesh points than the BGN method or the director method. So it practically also performs well, like the MD method. So this is the example of evolution of this non-smooth rectangular shaped surface. So this RMD method also give us better results than the director method and the BGN method. And the BGM method. So, this is an animation that on the left-hand side, the surface evolves with the given velocity field. Well, on the right-hand side, it's produced by our RMD method. We introduce artificial tangential motion on the surface. It gives us good mesh quality all the time. So, it's not becoming worse and then using rematching technique. So, no remeshing is used. It's always good, the mesh quality. Always good, the mesh quality. Okay, so this is another example that of domain evolution. So we use RMD method to produce the evolution of mesh point on the boundary and then harmonically extend the mesh point into the inside. So it also produces better results than the BGM method and the original velocity field. Thank you as well. 