But today I'm going to be talking about some of the work that I did for my PhD thesis, which I recently completed in September. So I realized that this crowd is a little bit different from what I usually do, which is cycle decomposition. So what I'm first going to do is introduce a couple of key definitions. The first one is that of a two-factor. So in this talk, we're going to be working with directed graphs, but of course, some of the definitions also apply to graphs. So a two-factor is simply a spanning subgraph or sub-digraph of my graph, which is going to or subdigraph of my graph, which is comprised of two, which is a two-regular graph. So it's just going to be the disjoint union of cycles, or directed cycles in our case. With this definition, we can now introduce the definition of a two-factorization. Now, the two-factorization of a graph or a digraph is a decomposition of my graph into two factors. So in this particular case, the best way to visualize these decompositions, I think, is by coloring the edges. Now, a decomposition is a partition of the edge set or arc set of length. Of the edge set or arc set of graph. And so here you'll see that edges in the same color class actually form a subgraph that is the disjoint union of cycles. So we're going to be looking at a particular two-factorization that we call a Hamiltonian decomposition. A graph, or a digraph, is Hamiltonian decomposable when it can be decomposed into Hamiltonian cycles. So in this very simple example here, I've taken my complete graph of seven vertices. Complete graph on seven vertices, and I've built a Hamiltonian decomposition of this graph. So edges in the same color class actually form a Hamiltonian cycle. Okay, so this is the first half of the definition. Now, in the second half, I'm going to explain what the wreath product of two graphs are. Okay, so what we're going to be working with are graph products. The wreath product is also known as the lexicographic product of two graphs. And if you're trying to remember backwards, You're trying to remember back when you learned graph products, it's the one that's not cognitive. So, the way that we can build our wreath product of two graph, or in this case, two digraph, is as follows. I'm going to have my first graph G, or my first digraph G, and my second digraph H. So, remember, it's not commutative, so the order here is important. For every vertex of G, I'm going to have a copy of H. So, in this particular example here, I'm going to have four copies of H. All right? Now, how I'm going to join these copies, I'm going to use the adjacency. Copies, I'm going to use the adjacencies from my graph G to join these two copies of H. Namely, if I have an arc, in this case going from vertex X to vertex U and G, what I'm going to do is I'm going to take every possible arc going from the corresponding copy of H, the copy of H that corresponds to X, to the copy of H that corresponds to U. And I'm going to do this, of course, for each arc of my digraph G, which is going to give me the resulting product. So there's a lot of really interesting questions that we can So there's a lot of really interesting questions that we can ask about graph products. I find that they're very interesting. And in the context of cycle decomposition, we can ask the following question. If I have two graphs, and I know that they emit a particular decomposition, a particular cycle decomposition, I would like to know if the resulting product also emits this decomposition. So, in the context of Hamiltonian decomposition, I assume that my two graphs, or directed graphs, are Hamiltonian decomposable, and I'd like to know whether or not the wreath product is also. To know whether or not the Reese product is also Hamiltonian decomposable. Now, this particular question was asked and completely settled for graphs. In a 1981 paper, it was shown that the Reese product of two Hamiltonian decomposable graphs is in fact Hamiltonian decomposable. So the natural question to ask is whether such a statement would also hold for directed graphs. And this question was partially settled for directed graphs as well in 1998. Directed graphs as well in a 1998 paper by Leonard Ding, which I will be citing quite a lot in this talk. So, this is just a partial result, because what this statement here is telling us is that if we have to assume that the order of our first graph, our graph G, is odd. Okay, so this hasn't been settled for G, the order of G is even. Also, I'd like to point out that we have to assume that our second graph, H, the order of H is The order of age is strictly greater than 2. With cycle decomposition problems, we do tend to see some weird behavior happen when we have very small graphs, which is why we impose that the order of our second graph be greater than 2. So what I'm going to do now is further refine this question to really look at the question that I'm interested in and that I'll be partially tackling in this talk. So again, I have two Hamiltonian decomposable tech graph. We're going to make the assumption now that the order of our first The assumption now that the order of our first digraph g is even. And I'd like to know whether or not the product is homogeneous decomposable. So, as I've said before, I'm not the first person to look at this particular result. So, what's nice is that when I started working on this, there were already some really nice reduction steps and some nice tools available to me. Namely, I'm going to take this particular reduction step from the 1998 paper. And what this does here is it says, look, I have my two-digress G and H. The only thing I know. The only thing I know is that they're Hamiltonian decomposible. That's essentially all I've given. But what this proposition here is telling us is that it suffices to look at two particular Ries products. Namely, the Ries product of a directed cycle on N vertices with my graph H, or my digraph H, and the Ripped product of a directed cycle, again method N, with the antigraph on N vertices, where N here is the number of vertices in my graph H. This is already a little bit. This is already a little bit more tractable because I actually know what my first graph looks like, which is just a directed cycle. This is essentially the second simplest Hamiltonian decomposable digraph that we can work with. So this is quite a nice reduction step. Okay, so what I'm going to do now is essentially set the problem up to look at this as a way of constructing n tuples of permutations. To do this, I'm actually going to look at the simplest of the two graphs that I just talked about. The two graphs that I just talked about, which is the West product of the directive cycle with the MC graph on M versus. So here's a very simple example of what this graph looks like. This is a cycle. So this graph will wrap around itself. So this means that this set of vertices here is the same as this set of vertices here. Okay, sorry, I skipped one slide. So I'm going to show you now how we're going to construct the Hamiltonian decomposition of this particular graph. Decomposition of this particular graph here. And we're going to see that the methods and the tools that we use are actually going to be helpful to look at the more complicated graph, which is the response of CN with the Hamiltonian decomposable graph H. Okay, so let's just get into it, right? So what we're going to do is we're going to create our first Hamiltonian, a directed Hamiltonian cycle. So I'm going to take these arcs here, and hopefully it's not too hard to see that this is in fact a directed Hamiltonian cycle of my loose product. Now, Product. Now, something that I'd like to draw your attention to is this particular triple of permutation here. What I'm going to do is I'm going to describe this Hamiltonian cycle here as a triple of permutations that live in S3. Now, the reason why I'm doing this, you'll notice that I label the elements of my vertices here with elements of Z3. And it's easy, hopefully, to see that this set of arcs here, you can think of it as permuting these elements of Z3. And in this particular case, of course, the identity. And in this particular case, of course, the identity permutation is what's going to describe the action of the sparks on these three points here. And I do this with a second layer, right? So this is again the identity. And then lastly, at the very end, we have a slightly more interesting permutation, which looks like this guy here. So I'm going to use this triple of permutation to essentially describe my Hamiltonian cycle. I'm going to continue. I'm going to do my, I've built my second directed Hamiltonian cycle right here with my arcs in. Hamiltonian cycle right here with my arcs in blue. And I'm going to do the same thing. Okay? Right now I have a triple representation. Again, these live in S3. And hopefully, if you look at the arcs, it should match how we're acting on these points. All right, and then the last guy. So I have here my decomposition to my graph. Okay? So what's really nice is that every two-factorization of this particular product here can actually be described as a set of m and two Folsom permutations. M and two volt presentations that live in SN. Now, the thing is, the converse is not always true. If you give me a set of m and tuples of pernutations that live in SM, these are not necessarily always going to correspond to two factorization. Namely, there's a particular condition that I need to impose on all the permutations that appear in the first coordinate, and again, a condition on all of those that appear. Condition on all of those that apply and appear in the second coordinate, so on and so forth. Because I need these to actually partition my set of arcs. This is a decomposition. So what I'm going to do now is I'm going to introduce a couple of definitions in order to be able to properly describe what are these set of m interplaces that we need to construct our desired two factorization. Okay, so the first one is something that we call a regular permutation set of order m. These are just line squares. M. These are just line squares in disguise. Okay, so this is a set of m permutations. Now, there are some EPR folks here in the crowd, so you could think of these as M permutations that don't intersect. Okay, so this is essentially what this condition here tells us. Basically, if I take any two permutations and I take any point in Zm, these two permutations will map this point to a different point. Okay, so the image of J is never the same if I have two different permutations. Okay, so if you look at this here, if you take the three permutations that appear in my first column here, if you will, you'll realize that this particular set of permutations, these three here, form a regular permutation set of order three. And this will also hold for the other two columns here. Okay? The other thing that we're going to need is the definition of something that I have called the Hamiltonian n-tufold. So, what I'm going to do is I start with n permutations that Do is I start with n permutations that live in Sn. And I'm going to construct the tuple. So the order here is, of course, very important because the operation is not commutative in Sn. I'm going to take the product of these n permutations and the order in which they appear in my tuple. Okay, so this is going to give me a permutation which I call tilde here. This set of n, this n-tuple is a Hamiltonian n-tuple precisely when the resulting product here is a permutation on a single cycle. A single cycle. Okay, so I care about the cycle structure of the product of these permutations. So let's just do a very simple example. Let's continue with the decomposition that we initially started with. I take these three permutations, right? So they appear in a particular order. And when I look at their product, I get a permutation on a single cycle in S3. Now, this here is not particularly, it's pretty trivial to see what's happening. So if we do, if we work with our second Hamiltonian cycle, right, so this is Hamiltonian cycle, right? So this is our triple of permutation. If I take the product of these three permutations in S3, I'm going to get this particular permutation here, which is again a permutation on a single cycle. And what this tells me, in general, is that the corresponding two-factor, all right, is out is a Hamiltonian cycle. It's a directed Hamiltonian cycle in my Wies product. So what I can do now is I can formulate the problem of finding it has Hamiltonian decomposition of my Guess product. Decomposition of my Wii product, I has the problem of finding a set of m n tuples of permutations that have to satisfy a very specific set of conditions. Namely, permutations that appear in the same column have to form a regular permutation family. And then permutations in the same n-tuples, well, each n-tuple has to be a Hamiltonian n-tuple. And if I can find these set of n-tuples, then I have a Hamiltonian decomposition of this least product here. Now, if you're someone who either is really well versed, Someone who either is really well versed in cyclotic composition or is very caffeinated, you'll notice that I've essentially overcomplicated my problem by quite a lot. Okay, because this is a very simple problem to construct the Hamiltonian composition of this guy here. The reason I introduced all these definitions is not so much as I'm not trying to torture you guys. I am trying to set us up for looking at the more complicated graph of the two. Because it's been fully settled that this guy is Hamiltonian decomposed. Settled that this guy is Hamiltonian decomposable, but for when n is odd, and my diagraph H here, well, this is still wide open. You still don't know if this guy here is Hamiltonian decomposable. But the tools and the definitions that we have introduced is actually going to be useful now because we're going to construct a Hamiltonian decomposition of this vacuum. However, we're going to need to introduce a couple more definitions to further refine our construction. So we're still looking for M and tuples of permutation. Still looking for mn tuples of permutation, but we're looking for a slightly more complicated set of m n tuples. Alright? Okay. So we're going to get this definition, which I think is a little bit strange. At least I haven't seen an analogous definition in the literature. So what I'm first going to do is this is a operation which takes an element of SEC. It takes a permutation mu. Mu does not fix the point n minus 1. So that's a very important part of the hypothesis. So that's a very important part of the hypothesis. And I'm going to construct a new permutation, which I call the truncation of mu, which we denote as mu hat, which is essentially the product of mu with this carefully constructed transposition here, which takes the point m minus 1 to its image under the action of mu. Okay, so let's do an example to see what's actually happening here, because I think that might clear things up. So I'm going to start with this possibility-specific example here that lives in SH, so this permutation here. I look at where the point. Mutation here. I look at where the point n minus 1 gets mapped to, which is 0. So this is going to tell me how to construct this transposition. Okay? So μ hat is just the product of this permutation with this single transposition. And what it does is it's going to basically take the point m minus 1 and put it in a trivial cycle on its own. And it's going to take the pre-image of m minus 1 and map it to 0, which was the image of m minus 2. Equipped with this definition, Okay? Equipped with this definition, we can introduce the following, which is called a truncated Hamiltonian n-tuple. So, again, I start with an n-tuple of permutations that live in Sn. Again, so this is the order here is very important. And I'm going to look at the product of the permutations again in this n-tuple, but this time I'm going to look at the product of their respective truncation. Okay? And when I get a permutation, again, I care about the cycle structure of my permutations. Okay, when I get a permutation that has exactly two cycles in its disjoint cycle notation, I state that this n-tuple is a truncated Hamiltonian n-tuple. Now you might say, wait, hold on. Last time we wanted a permutation or a single cycle, and I think you all believed me when I told you that it worked. It gave me a Hamiltonian cycle. So why two cycles here? Well, think about how we constructed our truncated Hamiltonian, our truncated, how we truncated the Truncated, how we truncated the permutations, right? So let's look at this example here. Okay, I have three permutations, right? So the truncation of a transposition is going to be the identity. So these two guys, their truncation is just the identity. But if I take this guy here, when I truncate it, the point 2 is going to live in a cycle on its own. So each truncation fixes the point m minus 1. So the point m minus 1 in the resulting product is always in a cycle on its own. So at the minimum number. Cycle on its own. So I have the minimum number of cycles I could get in my disjoint cycle notation is at least two. So we want the minimum number of cycles. Okay, so equipped with these new definitions, we can further refine what we're after. Okay, and we can show, and this is where I take all the details and I sweep them under the rug, but it can be shown that we can construct the Hamiltonian decomposition of this graph here, the Riet product of a cycle on n vertices with a Hamiltonian decomposable graph. Hamiltonian decomposable graph. We can do this, we can obtain this desired decomposition when we have, again, a set of mn tuples, okay, with the constraint that the first c guys, where c is the number of directed Hamiltonian cycle in my decomposition of H, these first CN tuples are truncated Hamiltonian N tuples, and then the remaining guys are Hamiltonian N tuples. So now I have, I know what I'm looking for, and now we have to go. For we and now we have to go and build these status. Now, what I'm going to do before we go ahead and roll our sleeves and just look at an example is do one more reduction step. And the reason why that is, is because this here is just a very fancy way of saying we just need to look at this digraph here. We need to consider the smallest possible even n value, okay, which is 2. If I can do it for 2, I can do it for all even n. Okay? What this means is rather than looking at What this means is rather than looking at n tuples, which can be quite annoying, it suffices to look at pairs, which is quite a nice reduction step, right? It's already hard enough to do with pairs. And so now we just, but it's a really nice reduction step. So I'm going to conclude this talk with just a simple example, just to give you an idea of what these look like and how we constructed these. Okay, I'm going to take, so obviously I want to give you a non-trivial example, so I'm going to take a digraph on 13. So, I'm going to take a digraph on 13 vertices. And I'm going to assume for the purpose of this that it admits a decomposition into two Hamiltonian cycles. That's the only thing I'm given. I have no idea how these two directed Hamiltonian cycles fit with one another. But I don't actually need to care because we know we're just looking for these pairs, these 13 pairs of permutation, with, of course, all these constraints that we previously defined. Okay, so the first step is going to be to construct two. It's going to be to construct two decomposition families, which is a term that I should have fixed in these slides. These are just our regular set of permutations of order 13. Okay? So these are really easy to construct, because these are just line squares in disguise. So it's really easy to construct a regular set of permutations of order 13. But what you want is, of course, the guys that are going to allow you to construct your set of 13 pairs. Okay? So if you start at this long. Okay, so if you stare at this long enough, you could convince yourself that this is in fact a regular set of permutations of order 13. You'll have to perhaps trust me that this actually works. So what I'm going to do here is actually I'm going to only do one, I'm going to only need, I'm going to pair elements of the set with itself, okay, which is fine. I don't need two different regular sets. It's not, it's a flexibility that I have, but I don't need necessarily for my two regular set of order 13 to be. For my two regular set of order 13 to be different. So, the way that I'm going to go about this, because I could just give you the pairs, and it's going to be very anticlimatic, because I'd like to show you, there's some really nice patterns that come out when you look at the cycle structure of the product of these two sets for themselves. So these are not a group, okay? So that's really important. But I am going to look at the multiplication table, if you will. I'm going to take this particular array, which is a 13 by 13 array, with the rows and columns indexed. Array with the rows and columns indexed by the elements of my regular set of orders 13 that I just presented. Now, like I said, this is not a group, so I don't particularly care about the individual permutations. I just care about the cycle structure of their respective products. Okay? So what I'm going to do now is just ask a computer to, and I'm going to ask a computer to tell me which one of these pairs are Hamiltonian pairs. So it's just going to look at the product of these guys, look at the cycle structure of the resulting product. The cycle structure of the resulting product. And here in gray is precisely where my Hamiltonian pairs are. Okay? So this is nice. But what we also need is to know where our truncated Hamiltonian pairs are. Again, I'm going to just, I'm not going to do these by hand. I'm lazy. I'm going to get a computer to do it. And right here in blue is where my truncated Hamiltonian pairs are. Again, this is the psycho-structured state, so I just care about where these are. This is really nice. This is really nice. I wasn't expecting it to be this nice. There's obviously the regular set of order 13, which I showed you, is just a very specific example of a much more general construction. But this general pattern here appears for all m greater than all m congruent to 1 mod 4. No, yes, 1 mod 4. So we have, I realize that my talk doesn't have a lot of symmetry. So this is where the symmetry comes in. So, this is where the symmetry comes in. You'll realize that we have some symmetry in our array, which we can exploit to construct our desired two-factorization. So, this is what my two-factorization looks like. I've created pairs of permutations in my array. Of course, this is a decomposition. I want each element of my set to appear exactly once. So, I need to have exactly one pair in each row and one pair in each column. Okay? Here are my two truncated Hamiltonian pairs right here, and you'll notice that the other guys are Hamiltonian pairs. And that is precisely what I was after. Okay, so this solves the problem for when m is equal to 13, and my graph H admits a decomposition into two directed Hamiltonian cycles. Okay, so what can I do? Well, the symmetry here is quite nice because it allows me to come up with a solution not just for when I have two directed Hamiltonian cycles, but when I have Hamiltonian cycle, but when I have actually any even number of Hamiltonian cycle between 2 and 10. Okay, so what I can do here, so I'm really bad at building suspense. Okay, so you have this, pay attention to what happens to these two dice here. I can exploit the symmetry I have with the cycle structure of my product to now create a solution for when I have four directed Hamiltonian cycles in my decomposition for H. Because now I have four truncated Hamiltonian pairs. Truncated Hamiltonian pairs and nine Hamiltonian pairs. Okay? And I can do this to get a solution for any even C between 2 and 10. So here's my solution for when I have 10 cycles. Okay, using this method, I was able to get quite a lot of the open cases in the conjecture. In fact, there really is only one particular case that I was in that one major case that I was not able to solve. Was not able to solve. So, first, I have to say I will assume that the order of h is greater than 3. I'll point out that something actually quite interesting happens when h is a directed graph on three vertices. And of course, the part of the conjecture that was still open is when the order of my first digraph, G, is even. And I was able to show that if these two graphs are Hamiltonian decomposable, the resulting product is Hamiltonian decomposable with this one possible exception. Namely, when my digraph G is a direct When my digraph G is a directed cycle, when H is even, okay, so when the order of H is even, and, and this is really important, my digraph H admits a decomposition into an odd number of cycles, of Hamiltonian cycles. So this is the only exception that is left. I really do believe the methods that I presented should work, but it's about really finding these regular set of permutations of order M. That isn't the trick here. Order M, that is the trick here, to get you that really nice cycle structure. Lastly, there is a couple of other special cases I was able to solve for when my digraph G is a cycle, which is when we have the product of a cycle with a complete graph and the product of a cycle with another cycle. So these two are really specific cases that I was also able to solve. And the one that was really interesting is I was actually able to find two examples, two infinite families. Two infinite families for which the resulting product is not Hamiltonian decomposable. And that would be when we have the reef product of a cycle of length n with a short directive cycle of length 2. That one is actually pretty straightforward to see. But this guy here was actually very surprising. I was not expecting this guy to not be Hamiltonian decomposable. And that's actually one of the favorite proofs in my thesis. Non-existence proofs are quite fun. And I had a lot of fun proving it. I don't know if my committee. Fun proving it. I don't know if my committee had a lot of fun reading the proof, but and this is something that we don't really see with the undirected case. So that was also very interesting because we don't have these exceptions for the undirected formulation of this problem. So anyway, I wanted to take the time to thank the organizers for organizing this wonderful workshop. This is a picture of us on a hike yesterday. I just wanted to point out that I was an innocent victim of snowball. Of a snowball. Excuse me. And that someone, an unnamed person, shoved snow into my pants. But anyway, thank you guys so much for your attention and thanks again to the organizers. Questions, comments? This is This is Johnston Canyon. So, for those leftover space where you don't know the answer, have you done experiments that indicate that most of these small ones are going to admit the directing Hamilton cycles? It is hard, so you can do really small guys, but then what you have is just a complete graph for a cycle. And then when you start looking for bigger, it's like you have to take. Looking for bigger, it's like you have to test out, like you try to, you know, you can because these are just line squares. So, as soon as you like do order six, you already have a lot of line squares, and then you want to create these pairs of line squares, see if you can actually construct these pairs of permutations. So it's hard to do like an exhaustive search, if you will. Well, I wasn't thinking of an exhaustive search of your construction, but you can create the graph without knowing any. Can create the graph without knowing any of these permutations, right? Because you're just doing the product. Yes. And then you could try to decompose that and see can it be decomposed? Yes. So for the odd case, right, so this would have to be like three cycles. So yeah, I could probably try to at least create maybe some specific graph, generate the product, do a random search or an exhaustive search. Yeah. How many find your category cycle? These two guys. These two guys? Yeah. So these two guys, so yeah, so what I first did, like, so these are really specific, so they're easy to construct. And I just did a, like, I do it for lower cases first to give myself an idea of like what the construction is. These, I, first, for order of five, I did a random search and I found something. For order of four, again, I found something. And I got a, like, for CN with C, sorry, for C4 with C3, I got something. C5, no. I got something. C5, no, C5 was C3. I got something. But yes, C4 was C3. When I did a random search, it wasn't coming up with anything. But C5 was C3, it's a graph that's of the same order. So presumably, you're going to get your decomposition in the same time. So the random search wasn't turning up anything. So I realized, okay, obviously it works for when n is odd. So why is it not giving me something when n is even? That's when I figured out that it's probably not Hamiltonian decomposable. And then I had to. Decomposable, and then I had to prove that it actually doesn't work for all any event. Cool. Thank you. Okay, I think we are behind the schedule, so there's things.