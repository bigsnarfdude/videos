And the first speaker is Dan Cranston, who will be talking about campaign equivalent disk colours. Very excited. All right, thanks. Yeah, so Diane, a lot of you have heard, if you haven't seen me in person, you've at least heard me on Zoom and seen me on Zoom. So yeah, so this is some work that I did fairly recently with Reen Mahmood, who's my PhD student, who's also Who might be introduced soon, who's also likely on the Zoom call. And let's just jump in and see. There we go. Okay, so this is the definition of a KempSwap, but let me just show you a picture. So here we've got a three-coloring of the Peterson graph there. And what a Kemp swap does is it looks at some component of the two-colored subgraph. So here, if you look at the blue-orange subgraph here, Orange subgraph here. In this case, it's connected. So you look at, technically, you look at it up here, and then you just swap the colors on that component. So everything that was blue is orange, and vice versa. Here are a couple more examples. So here in the one in the middle, the blue-green component, there's more than one of them, but we just picked one of them and swapped it. And then here's even sort of a more simple case. This orange vertex has no green neighborhood. Vortex has no green neighborhood. So if you do an orange-green swap, then you just get a green vertex. Right? So let me just make that show up. Can you get me? You guys can see that. Okay. We'll do that. Right. So what we're interested in here is Kemp equivalents, so K equivalent. So we've got some K coloring, we'll call it Phi1, and some other K coloring, we'll call it Phi2, and we want to go. We'll call it phi2, and we want to go from phi1 to phi2 by a sequence of Kemp swaps. And I just write k equivalent because I want to force that you're not allowed to introduce more than k colors. It could happen that you go less than k colors at some point, but you're never allowed to introduce more than k colors. Otherwise, you could just cheat. You could just recolor everything with its own color and then go to whatever you want. So we're going to keep at most k colors in the coloring throughout. And if all of the k colorings of a graph are k equivalent, then we have this term that I made up, k ergodic, which just means you can sort of think of this as I'm drawing inspiration here from this view of this as a Markov chain, right? You have the k-columns are the vertices of your Markov chain, and you're saying that the Markov chain mixes, right? That's what's going to mean. So, as a simple example, the Peterson graph. Example, the Peterson graph is 3-argotic. So a lemma that turns out to be really useful, and I'll show you a proof of this in a little bit. This was by Las Vernes Elmene from published in 81. If you have a degree, a vertex of degree less than k, and you're just interested in k ergodicity, then you can just delete the vertex. And then if the answer is yes for the smaller graph, then the answer is going to be. For the smaller graph, then the answer is going to be yes for the bigger graph. And I'll mention a proof of this in a more general context in a little bit, but intuitively, you're going to go by induction. You'll do it, and then you'll sort of extend the sequence back. All right, so in particular, if your graph is de-degenerate and d is less than k, then you're k-ergotic. And the proof is just by this, by induction on the number of lattices. So as is often the case, you say, okay, so we have this E. Is often the case, you say, okay, so we have this easy argument that will get you something, and then you want to sort of look just out past the edge of what you can get with the easy argument, right? And so which graphs are not k minus one degenerate, and sort of the first, the simplest graphs that are not k minus one degenerate are just k regular graphs, right? And so that kind of motivates this question. Well, it was a conjecture of William Mohar that every k regular graph. are that every k-regular graph is k-ergotic. So if you have a graph with max degree k and it's not k-regular, then it is k-ergotic just by this lumber. I should say if it's connected and none of the components are k-regular, and it's max degree k, then it's fine. So this is just sort of saying, okay, but what if it's actually k-regular? Now you need some new idea, right? Right, so this was first proven by Pagali, Johnson, and Klujma in the case that G is three regular. And there's just this one exception that you can see over there on the side. So, this is the prism over the triangle, and you've got two different colorings. And they're sort of, in a sense, In a sense, they're the same thing, but they're sort of mere images of each other. And the reason that you can't get from this one, say, to this one is because each of the two colored subgraphs is connected. So when you do a count swap, you don't make any progress. You just swap the colors on the vertices, but the color classes themselves never change. And the color classes in this one are different than the color classes in this one. Different than the color classes in this one. So you can never get from vertical k. And then next, this was proved for all k at least 4 by Bonhomi, Bousquet, Fagale, and Johnson. And what we're going to do in the talk today is to generalize this to list coloring. So before I do that, I'll have to sort of go over what list coloring is in case that's new for anyone, and then talk about sort of intuitively when. Sort of intuitively, when I first heard of count swaps for whist coloring, it didn't make sense. You think, when you think about that, it seems like it would just break it, it wouldn't work. But we'll show that actually you can make it make sense. So a few basic definitions here. So a list assignment gives some colors, allowable colors, to the vertices of each vertex in your graph. So here my graph is. Vertex in your graph. So here my graph is just K2, and I gave this one allowable colors 1, 2, and this one allowable colors 1, 3. Now, an L coloring is a proper coloring that takes the colors from the allowable lists. So here, you have four total possible colorings, but one of them is not proper. It uses one on both endpoints. So that's no good. But the other three are all fine. Those are all valid outcolorings. Output translations. And so a k assignment just means that all of the lists have size k. So this is a particular example of a two assignment, because every vertex has size two list. So L colorings are L equivalent if you can get from one to the other via a sequence of time swaps. So you can get from this one up here. If you were to try to do a one, two swap on the left end, that would be no. 1, 2 swap on the left end, that would be no good because you would get a 1, 1 on the edge. But you can come down here and you can do the 1, 3 swap at this vertex, and now you're fine. And now after that, you can do a 1, 2 swap here and get down here. So for this particular list assignment, this graph, well, so these two are L equivalent, these two are L equivalent, and then by transitivity, they're all L equivalent. And so And so I would say, okay, so now we jump to sort of the equivalent of ergodic that I was talking about before. I needed a different name for it here, so I call it an L-swappable. So if you fix a given list assignment L, you want to know: can I walk around amongst all of the L colorings? And if the answer is yes, then the graph is L swappable. And then the next level up is if this is true for all k assignments L. So in this case, I'm looking at the case where k equals 2. So if it's true for all two assignments on this graph K2, then you would say that the graph is too swappable. So in fact, this is sort of the most interesting of the two ascendants. You could also have the same list on both, and then it's The same list on both, and then it's easy to check. And you could have disjoint lists on the two vertices. It's easy to check in that case. So it turns out that K2 is in fact too swappable. But let's see here. Something seems to have gone wrong with the okay, I'll just give it a baby when it reads of words. No? Right? It's gonna work? Yeah, okay. Uh all right, so let me just give you an example then of a graph where Where it is not a list assignment where it is not L swappable. So that's the sixth cycle, and I have some two assignment. And there are two different L colorings, right? So on the left, I've got the lower, the smaller color of each vertex, and on the right, I've got the bigger color of each vertex. And you can't get from one to the other, and the reason is because there's no valid step. There's no valid step you can do starting from either one. So both of those colorings are frozen, right? If you try to do any swap, like say at one, two on the left, so you would try to bring two in, but then that breaks because two is already used at the vertex above it, but there's no one there, right? So you're stuck. And in fact, the same thing will show that all cycles are not too swappable, right? There's always this sort of bad. There's always this sort of bad risk assignment where you get stuck. All right, so now with the definitions, I can tell you the theorem that Riemann and I proved, which is if G is K regular with K at least 3 and G is connected, then G is K swappable if G is not that one exception that we saw already, which is the triangular prism. So the only point of saying that Of saying that the graph needs to be connected is that if you don't, then in the case where k is 3, you have to make sure that none of the components are that bad, triangular person. Okay. So before I go on, does anybody have questions? Make sense what we're trying to do? The uniform, yes. I'm not sure the camera is so if you see the slides when you're. I'm not sure we can already see the slides when you're sitting there. Oh, interesting. Yeah, that's a fair point. Yeah, I think it's when you sit it because I guess we're a lot of focuses on where you get to. Yeah, but now I can. Yeah. We'll t we'll try and see. If if it stays on me too long, I'll get I'll stand up and then just okay. And then just, okay, good point. Okay. Okay, so how are we going to prove this thing? So, first of all, let me tell you about this degeneracy lemma that I mentioned earlier. So, this is, basically, it's this thing that I said of Les Vernis and Migne. If G has a vertex V with degree less than K, then G is K swappable if it only. Then g is k-swappable if and only if g minus v is k-swappable. So, what we want to do is we want to go by induction, we're going to rip out a vertex, find a sequence for the smaller graph, and then extend it up. And so let's kind of talk through how we do that. So here I've got my graph G, and I fix some K assignment on G, some K assignment L, and I have a vertex V. And I have a vertex V of degree less than K. And so you can think here, I've got this sequence of swaps down here, and by symmetry, let me just say that I'm swapping colors one and two. And now, if you look up here on top, if that vertex that V, That V, so you have some coloring for it here in the initial coloring, and if that vertex doesn't have color one or two, then you're fine. You just do the cup swap. And it's the same thing if it has color one or two, but it's not in the one, two component where you're going to do the swap. That's fine as well. So now we've got a few possibilities. First of all, maybe you're colored one, you have a neighbor color. You're colored one, you have a neighbor colored two, and let's say that you do have colored two in your list, and you don't have any other neighbor that's colored two, right? So if this is the case, then what we can do is we can just go ahead and do the swap. So now you've got color one here, color two there, and nothing breaks. It's fine. Fine. So that's sort of the easiest case. That's the good case. Now there's another possibility that maybe you've got colors two that appear on at least two of your neighbors. And so now the problem is, if you just, even if maybe you even really do have color two in his list as well, right? And you would say, okay, I want to do this swap, but the problem is the invariant that we've been making. The invariant thing we've been maintaining throughout this proof is that this shadow is really the shadow of the sequence that we're constructing of here. But if I do that here and there's a 1, 2 here, I'm going to merge these two 1, 2 components. And I'll break my invariant. That won't be the shadow anymore. So I can't let that happen. So I can't let him be in my 1, 2 component. So what I need to do is I just need to recolor that vertex. Now, why do I have enough colors to do that? Because... To do that, because he has degree less than k, which means if everybody here uses a distinct color, then there's just the one color available for him. But as soon as you have a repeated color, there's another color available for him. So you can recolor him with some other color, and then you can do the chemistry. So you recolor him with three, and now you can do the one, two swap and it's. I guess I should mention also, it's this very similar thing. It's this very similar thing here. I kind of glossed over the detail. Maybe this is color 2, this is color 1, but you don't have 2 in his list. In that case, you have some other thing in his list that's light color 3, and you can do the same thing down there. So that's most of the details of the proof. It's really not very hard. All right. So now I can kind of outline what we want to do. Of outline what we want to do. Oh, so a few more definitions. A degree assignment means that all the lists have size equal to the degree of the vertex. A graph is degree choosable if every degree assignment allows a valid coloring. And Erdős Rum and Taylor and then also Wiesing proved that a graph is, if a graph is too connected, That a graph is, if a graph is too connected and it's not a non-cycle or a clique, then it's degree-choosable. And the proof, which is sort of pretty but also very simple, I have it. Yeah, it has two pieces. So it has this observation that if a graph is degree-choosable and it appears as an induced subgraph of a connected graph, then that whole graph is also degree-choosable. Whole graph is also degree-choosable. And how do you prove this? You say, I've got my degree-choosable graph in the middle. I just assume that it's connected, say, and now I'm going to just color in greedily towards that thing. And I can do that because I always have some uncolored neighbor that's closer to the middle than I am. And then when I get to the middle, I can finish just because it's degree-toociable. That's the point. Okay, so that's good. So then the other thing, basically. Thing that you need to show is you need to find a degree-choosable subgraph if you are two-connected and you're not an odd cycle or clique. And that is a little bit of work, but it's not too hard. And what Erdstruggen-Taylor and Wiesing proved, Erdős Truman-Taylor proved in their proof, was that you always have an even-length cycle with at most one forward. And these graphs are degree-chucible. So everybody So, everybody is seeing the proof that even cycles are too choosable. And if you have an even cycle with one chord, that extra fact that you have three colors at the endpoints of the chord makes it easy. Okay, so we want to copy the proof for our proof, but we have some bad news. Does anybody know what the bad news is? Even cycles are not degree swappable. Not degree swappable, right? So we want to try to copy the same proof. But when I sat down to work on this problem, I thought, oh, okay, well, let's just work it out and show that even cycles are, you know, two swap on one, then they weren't. And I was kind of heartbroken and thought, what are we going to do? But it makes a more interesting proof, a more interesting result, right? So we still managed to prove something. Well, I call it the key lemma. It's basically the analog of bullet point one. The analog of bullet point one. If you have a graph that is degree swappable and it shows up as an induced subgraph of a connected graph, then the bigger graph is also degree swappable. So that's nice, and the proof of that is, I won't really say much about it. It's kind of like the proof of the degeneracy lemma that I showed you, but a little bit further. It's about a page and a half or two pages in the bid. Then the second point, the thing that we need Then the second point, the thing that we need to talk more about, is how do you actually find an induced degree swappable subgraph? So, yeah, how do we prove it? We want to compile a big family of degree-swappable graphs H, and then we want to prove that every k regular connected graph has one of these appearing in it. And now, get one away. So, if I stand up. So if I stand up, will it? There we go. Alright, so how do we prove that a graph is degree swappable? So let me just show you a cartoon. I like to draw pictures. The basic idea, so in the picture, this little box is, I fixed some degree assignment L, fancy L. Reassignment L, fancy L, and I'm partitioning it into these chunks L1, L2, through LS. And what I want to do is I want to prove, somehow the chunks are going to be chosen in a way that it's easy to prove that everything in the chunk mixes, right? And then I'm going to use transitivity and find some tree among the chunks. From the picture, I drew a black. So you pick this in such a way that it's sort of easy to show: okay, here's my swap sequence that's going to get all of these things. And then somehow you need a little bit more work to go between the chunks. So in this case, I drew it as S chunks, but in practice, it ends up being a fairly small number of chunks. It's some constant that's like six or something like this. And then we have to do. And then we have to do a little bit of work and explicitly find these smiling arrows between the two. Okay, so how do we do that? So, right. So, one way to do this is inspired by this proof of erratic. Proof of Erdős, sorry, proof of Lovas of Brooks' theorem. And the way that Lovas proved Brooks' theorem is, it's essentially what I said before: of you color greedily towards the middle, and then you do something smart in the middle. And so one way that Lovas did it was he said, okay, you can find some vertex that has two neighbors, and if you delete those neighbors, the graph stays connected. And then what you do, you say, okay, I'm going to use color one on both of those. Color one on both of those, so now I've sort of saved the color in the middle, and then I greedily color towards that. And then I can finish on the last vertex because I saved the color for them. And that's kind of the idea that we're trying to recreate here. So here, I've got this vertex W, which is going to be sort of the last thing I color. And what I want to do is I want to just color V with a color that doesn't appear in the list of W. appear in the list of W. And so if I do that, if I can color V that way, and then after deleting V, the graph remains connected, then I can do the same thing. I color M greenly and then on W, but when I colored V, it didn't use up a color for W. So he can go last, right? Yeah, and so that's what that picture says. Those are the words that just say what I just said. Said. And then this is the one that is actually closer, I think, to the proof that I just sketched of Lobos of Brooks' theorem. You've got some adjacent pair that have a common color. So here's the thing. If you think about both of these, essentially, once you sort of color the stuff at the very beginning, Once you sort of color the stuff at the very beginning, what you're really doing is you're just coloring by degeneracy. Right? You're saying, oh, okay, now I have this guy, he's got a list of size k minus 1, but he has degree of most k minus 2. So I can take him off, and then if I can do it in the smaller, and so I can just go out among the trees, and I'm just using the degeneracy argument over and over to eat away the whole trees out to the leaves. Right? So these are the two main ideas that we use to show that a chunk is going to be connected, that one of these big parts in the partition. So, how do we actually show? We find some of these degree swappable subgraphs, and now we want to show that we must Want to show that we must have one of them in our K-regular graph. So here's a few examples of degree-swappable graphs. I call these chorded barbells with even cycles. So you can think of you have this bar in the middle, which is the path, and then you have an even-length cycle on each end. And there's at most one chord in the even-length cycle. The path might be length zero, as is in the bottom right. Another graph that I just call four-wheel because it's just Four-wheel because it just turns out that it's going to be useful for the proof. So, what do we do? So, if G has a small vertex cut, S, then each component of G minus S has to be nearly a Gallie tree. So, a Gallagh tree is a connected graph where each component, each block is an odd cycle or a clique. And the reason is that if I don't have this nearly Gallagher Don't have this nearly Galli tree, then I'm going to be able to take a couple of those components, go through this cut set in the middle, and get one of these corded barbells. That's not totally obvious, but I'll take sort of an even-length cycle from each of these components, and I'll go through the middle, and I'll get the quarter-bar length. So that handles the case that I have a small vertex cut. Cut. Because in practice, it's when you have a vertex cut of size 2 or 3. Cut vertices are fairly easy to handle. So then you get to the case where you have connectivity at least 4. So if I have connectivity at least 4 and I have a four-wheel, well, I can just go and actually prove that this four-wheel is degree swappable. And so that I can handle that case then by our key line. I can handle that case then by our key lemma. So, then, last of all, if I'm four-connected and I don't have a four-wheel, basically what that does is not having a four-wheel basically tells me that it's going to be easier to move between the set of colorings. And this four-connectedness, so essentially, if you go back to the previous slide, and I said, okay, if I can do Slide, and I said, okay, if I can delete two guys that have a common color that have a common neighborhood, they're not adjacent, I can do this sort of coloring along a spanning tree coming in. The being four connected essentially means that I can specify the colors of three vertices any way I like, and I'll still have a spanning tree and what remains. And so being able to specify the colors on up to three vertices gives me a lot of power. Gives me a lot of power. And so that's basically how I handle this case. This case is fairly short. The real work is in case one. Okay, so let me just finish up. So Mohar conjectured that all K colors of a K regular graph are K equivalent. It's true except for this one exception. What we wanted to do in this talk was extend to list coloring. This is Reing, my PhD student and co-author on this paper. The key idea here was being L-swappable. We want to say if you fix a coloring, then you can move amongst all the, if you fix a list assignment, you can move amongst all the colorings for that list assignment by attempt swaps. And our key lemma was sort of an analog of what we saw. Is sort of an analog of what we saw from the air distributor and Taylor proof that if you have a good subgraph that shows up as an induced subgraph, then your whole thing is good. In our case, it's degree swallowable. I'll skip that. So here is the theorem. And then here's the overview again. There's sort of these three cases where you have a small vertex cut, where you have a high. Where you have higher conductivity, but you have a four-wheel, and then you have higher conductivity, and you have no four-wheel. So, if you're interested in more, the paper is on the archive. I think that this, let me just say, I think that this key lemma right here should be useful in other contexts. I won't get into this for time, but this is a short side project that I did where I looked at whist edge swappability of planar backs. And basically use the same keyword. So, let me stop there. Thank you guys. So, thank you, Dad. Are there any questions for me? Fine. I was just asking a little question. A little question? Sure. There's a common theme in graph coloring, which seems to be to extend results from coloring to list colouring, and then maybe recently to correspondence colouring. Have you thought about this? Yeah, I mean, so extending from coloring to list coloring, yeah, absolutely, that makes sense. And that was some of the motivation behind this paper. I think the correspondence coloring is an interesting question. I suspect that a lot of the ideas would go through. I haven't checked it carefully, but I think it's an interesting question. I think it's correspondence counting is nice because it sort of helps us to understand what are the real limits of our techniques and what are we really using in the proof. And so I think that would be a nice follow-up to this would be to see: does this go through? This would be to see: does this go through or does it need some modifications?