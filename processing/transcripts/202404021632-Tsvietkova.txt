Freedom, but you are limited to it, not to change your knot. And then we had two years later, we had a program for not coloring. So the children do this and well 20, 30, 40,000 kids got so far introduced to knots, which they otherwise wouldn't. Okay, basic tool of turbo knots. Initial goal, general. TurboNodes. Initial goal general workbench to manipulate diagrams runs under Linux. That's a limitation, I know. But if you simulate, you can download Ubuntu for Windows 10 and also for Mac. We have manuals how to run it in these operating systems. Another limitation, what some people think is a limitation, me personally not, but Personally, not, but it plays everything on a grid which has its plus and minuses. But I will show this soon. And so the initial tools were to draw knots with one end, then to paint knots. If you have different pieces and want to construct the knot, drawing it. Not drawing at different places, loading knots with about eight or so different encoding formats, all the user ones, then saving in not as many, but also quite a few encoding formats. It can export in LaTeX and HTML code. So if you have a big nod and want to have a LaTeX file for it, it generates that. Generates that you edit knots, you deform knots. Well, what does this mean? You don't change the knot as such, but change the appearance. Simplifying it, reducing the number of crossings, and so on. Recently, a year ago, I also started writing a program which. I also started writing a program which generates nuts. Now we have these great programs which can generate all nuts now up to 20 crossings. This year looks, I think, differently. It's like skilled Brownian motion. It's a totally different principle. And it will be useful as it is also to generate all tangles. Whole tangles, not just knots. But that's a future project. Simplification of knots, of diagrams, compactify, decompose prime factor or prime decomposition and also to identify diagrams with up to 15 crossings instantly. So a demo. Yeah. So what what runs here in the left you don't Here in the left, you don't see it very much. You see things coming up, it generates knots. So, this demo justifies the title random knots. Otherwise, the talk has not much to do with random knots. So, a random knot generator was the very first tool which I used as a stress test. So, this is a stress test because what does it do? It generates knots here with four Not here with 4,000, 1,000, 10,000 steps on the grid, left, right, straight, generates such a big knot, and we will see one soon, and then simplifies it, decomposes it in everything, and this goes in this rhythm. So I have here runs very fast laptops, it's so much faster than, so it's every second 11,000 steps. So she would. 11,000 steps. So huge not generated, simplified, and for my own purposes, it then saves the bigger ones in a file. So we can leave this running in the back. What's the time? Sorry. Oh, you have two minutes. Two minutes. Okay, two minutes. So it could talk. So it could talk about hom-fly polynomial calculations, unlotting, and compare it with the speed of rejoiner. But I will do something else. In the two minutes, here is a big knot with 14,000 steps and 1,000 crossings. And now we have only two minutes. We have only two minutes. So, I would show you how it shows all the Radomister 1, 2, and 3 moves, and so on. So, in the lack of time, I press a button and say, minimize one second. So, what it tells us, this big bot not decomposes in one pipe one node in one six point three. 16.3, 114 underscore N, 2, da, da, da, da. And it identifies another knot, the 12 underscore N 271, a bigger knot where it doesn't have a name for, 31 crossings. 174, 5 times the bigger 80, 15.2, and 10 times the triple. So this is So this is here. And you see this here. The colors are here not terribly great. It should be yellow and blue, but on this display it's more like brown. Then I input the knots which Ben Krop audited me in a paper which he wrote hard unknots. And it turned out that I knew them and I had done them and I investigated them. And I investigated them. So these are nodes. Let me load one. These nodes obviously need to increase the crossing number by three first in order to simplify them later with Reidemeister moves to an unknown. But all of them can be simplified without any increasing if one allows. Increasing if one allows pass moves. So moves where a part, so if you have here a strand, underpass, over, over, over, underpass, you grab it and move it somewhere else. With this extra simple move, all of them can be either directly simplified to the unknot or they need. Or they need at most one more um pass move which doesn't change the crossing number. But then after that it goes down very quickly. And one thing, 30, 10 seconds. Zero? No. Um that's a really hard move. It's a really hard move across this uh diagram. Okay, so one tool is to identify prime knots which are lying on top of each other. So the common trick to make hard knots is when you take a loop and you fiddle one end through. Fiddle one end through. At the end, you have something where this tongue, this loop, sticks out, and anyone with an eye for it sees it and will know where to go backwards. So the normal trick is how people make unknots is they take two such knots, cut it open, link them, and then you don't have such an indicator where the end is, where you have to go backwards. But all of these knots are easily, instantly identified if you Identified if you can find prime knots. Especially when you can find prime knots which lay on top of each other. Then you can look at it as you like, you won't see it. Like this Haaken Arnot with 141 crossings. It really is nothing but two simple unknotting primal knots. Unknotting prime knots, and once you see them colored in different colors, then you can verify with your eye that if you shrink the red part small, you can fiddle it with random randomized two moves to the end. And if you shrink the other one, you can identify the other one. So, and all of these hard nuts except one or two are easily decomposed into these prime. Into these prime knots, both are knots. But and those who are not, there are one or two in this list, they are done even not with crossing number increasing pass moves. The most what is needed is crossing number keeping or crossing counter, I mean not crossing number, number of crossings preserving move, and after that. Preserving move, and after that, then it goes down with reducing moves. So time is up. So I have a little challenge. If anyone gives me by Thursday evening an unknot which I cannot solve, then if I don't get a knot, or if I can solve all of them, then I will go around and if I see people can Questions later and maybe demonstrations outside of those. But next video will take PSO. Can you use any other thing? Yeah, I told you. I've got my computer, so I just don't know. Oh, you want to use this one? Yeah. I didn't know if it's for the reasons. I didn't know that. Let's start. Go. Okay. Thanks. Thanks for inviting me to BAM, inviters. So I'm not talking about anything random or anything. Random or any algorithms, but I am talking about how complicated things can be. So anyone computing something surely cares about that, right? So I should say, first of all, that this is work in progress. So a few of the... I say something a little awkwardly just because we have to check some constants on something. So disregard. And this is joint work with Paul Feely and Neil Hoffman. And if you don't know Paul, And if you don't know Paul, he's a number theorist. So I'm afraid, yes, I'm going to subject you to a tiny bit of number theory. So the overriding question is just that we have different ideas of how complicated three manifolds are and how do these ideas relate to each other. So the two that this talk is about is how many tetrahedra you need to glue together to describe your three manifold and everybody. Manifold, and everybody's favorite other notion of complexity, the degree of the trace field of your hyperbolic manifold. So I know this was brought up before, but just to remind you that our number theory averse, our hyperbolic three manifolds have natural expressions as H3 mod, a discrete subgroup of PSL2C, and the traces of that representation are invariant. Are invariant, they form a number field. So what do we know? Well, or what do we prove? We prove that you can find in a family, n is always going to be a closed, or sorry, a one-cusped hyperbolic three-manifold. And I want to organize my thoughts. I'm asking about how complicated things get, so a natural way to So, a natural way to make that into a precise question is: let's start with a fixed say not complement and then look at Dane fillings. So thanks, Jessica, for drawing good pictures about that. And so, how do these two ideas change in families of Dane filling? So, M is my one-cusp three-manifold, and MP over Q represents Dane filling. So, what we show is that you can find a family. That you can find a family where the number of tetrahedra grows linearly in the height of the filling coefficient, but the trace fields grow exponentially. So the trace fields can be a lot more unwieldy than the triangulation. So just to let you know, and I think Bram's the one to thank for this, you can use the character bracket. You can use the character variety to get a coarse upper bound. So, exponential is the worst kind of growth that we can see here. And I don't have a worked-out specific example in this case, but if you take one cusp away from this scenario, the twist knots are a family of this kind of in this area where both growths are linear. Where both growths are linear. But the twist knots are Dane fillings on a two cusper, and I am talking about Dane fillings on a one cusper. But just for a concrete example. Okay, so just what is the main, how does one prove such a thing? Well, the first thing is we want to understand how the trace field itself relates to Dane filling. So Gareth Litis and John have a Garafilitis and John have a result that says that the trace field is kind of linearly sandwiched between the height of the filling. They do assume Lamer's conjecture for the left half of this. And what we do as part of our proof is in the situation that we care about, we're able to make an unconditional version of this theorem. This theorem. And so let me just give you some of the highlights and how you do this. So we have that sandwich side, and then we also have to understand the triangulation. So what goes into the sandwich side of understanding trace fields versus the height of the coefficients, the basic observation, and this is similar to the spirit of Gareth Lois and Jean. Of Gareth, Lais, and Jean's work is how do you figure out what's going on with the trace field? Well, if you take the A polynomial of your original manifold N, then when you do Dane filling, what are you doing? You're essentially giving a relationship between meridian and longitude. So algebraically, you're looking at the A polynomial where you put in t to the minus Q for M, T to the P for L, or vice versa. And so Vice versa. And so I'm looking at families of fillings. So I have one original master polynomial. And then I'm taking all of the monomials there and making the degree bigger and bigger and bigger. So the result in this family is a sparse one-variable t polynomial. And there are fancy, not well-defined words for this. They're called lacinary. Lacanary, and people understand, it's impossible to show if one variable polynomials are irreducible or not. This is one family where there's some traction. So we know a lot about A polynomials. They have ones in the corners and things like that. And one can put all of these things together and prove that they are sufficiently, non-horribly reducible. Reducible. And that helps us out. And one key part is the resolution to the Schinzel-Zassenhaus conjecture. I'm sure you all know that. It's kind of about heights of polynomials, so things can't be too terrible. It's similar in spirit to Lamer's conjecture. And then the last thing is we have to relate it to triangles, triangulations, and we do that by looking at layered solid tori. Layered solid tori and the fairy graph to get a good family that makes the growth the way we want. So that's all I have to say. A few minutes of questions here. Okay, so No questions about the map. Okay, our next speaker's bad day. Does anyone know how to eject this? I'm doing bad things to the mouse. Trying to eject this. Getting it angry at me. Wait, you're using the olive? Oh, you want to? I just want to pull it out. Just put a push-pull into the trash. I can get the trash. Try clicking it on. I just don't want to. It's not my computer. Do you still have on me? Literally, just can't get it to drag and drop. Literally just can't get it to drag and drop my finger. Yes, that's fine. Okay, it's fine. Thanks.   Anybody's awareness of you here? It's good on the screen. Alright, it looks good on the screen. You're good? Yeah. Okay. Nice niche. Yeah. Yeah. Hi, nice nature. My name is. Hi, nice niche. My name is Jae-yungbei from Roberts University, and my advisor is Anastasia. So, today I will talk about the NP-hardness of an adding number. So, NP-hard is basically the class of problems which are at least as hard as the hardest problem in NP. This problem in NP. So, here there are some link problems which known as NPR. So, computing genomes of NAD in three manifold and determining if a link is a some link of another one and deciding if a diagram of a knot can be entangled using at most K weighting master moves. RadiMaster moves. And unlinking number, and trivial something, and splitting number. But you don't know the unadding number, the minimum number of costing changes which make a NAD unaddie. This problem is whether it is NPR or not, we don't know. Because also there was that an adding number can happen. Another number can happen in non-minimal the coarsing diagram. So yeah, it makes it harder. So first, here is a question. So is there or not k such that the anonymic number of the equals n or arbitrary numbers n? Then I will ask. Then I will answer this question. So first, I constructed a true y-diabet double corresponding to the Boolean variable yi and not yi and I linked it and I connect it. And then we can show that the signature of this not kw is equal to negative 2 by equal to negative two by selecting these four simple closed curves. And we can find this cipher to matrix like that. So here we can show that another number of kn is equal to n. Here there was a kn is a connected sum of n copies of the kw. So here So here, if you use the nodding number of kn is larger than or equal to the absolute value of signature by half is equal to n. So we can say that the nodding number of kn is larger than or equal to m. Also, if we do the causing changes, which correspond to the class part for the For the variables from y1 to yn, then we can make this not a nutting. So we can say that a nutting number of this knot is equal to n. So the answer is yes. So just construct n, then that's. So also we can generalize this result. So in case another number An adding number, signature of a nut is the twice of its annotating number, then the anoding number of the maximum of k1 and k2 is equal to the anodic number of k1 plus another number of k2. We can show that. So here, to show that a non-in-number prominent A non-number problem is NPR. I will use the 3-SAT problem, which is known as the NPR. So here I will construct a polynomial reduction from 3-SAT to unadding number. So given a formula F, and I will construct a NAT KF corresponding to F. And I will show that the unaddicted number of this Kf is equal to N if and only if F. If and only if f is satisfied. So, first I constructed a NAT corresponding to the Boolean variables of the given formula F like that. And I added the Added the clauses corresponding to the given formula, right? The interesting thing is that here the signature of this nod, kn is equal to this one. Because if we construct the cipher surface like that, then you can check that any And you can check that any two simple closed curves do not link in Bohrmian this Bohrmian frame. So here there was a because the signature of this nod is equal to negative 2n like before, so we can show that a nodding number of this nod is larger than or equal to n. So here, first I will show the if condition. So if the given formula f with n variables is satisfiable, then we can say that the another number of kf is equal to n. So for example, here, you know, there was a here, the given formula has the four formula has the four Boolean variables from y1 to y4. So you can say that the signature of the unnetic number of this NAP is larger than or equal to 4. And also because you can check that this formula is satisfiable. So if you assign the variable y1 and y2 and y3 and not y4 and Y3 and not Y4 as Q, then you can check that there was a FE satisfied. So here, if you do the unclasping corresponding to Y1 and Y2 and Y3 and not Y4, then you can show that the resulting knot is a knot. So here, Yeah. So here we uh we can say that this n another of this nod is equal to 4. So finally I have to show that the only if condition. So here I try to show that if we n variable is unsatisfiable then I will show that nothing number of k. I will show that another number of kf is larger than n. So here I used the dress at the watching not group like that and here I found this very useful the lower bound of an adding number which is the mine q show that the anadding number of a not is larger than Of a NAT is larger than or equal to the commutator number ak. So here they were said x1 prime to xk prime is the commutator of the generators. Okay, so here basically the from there was a constructed map, you can find there was three types of regions. Wiggins. And then basically, my 3DG is to change any commutators as the commutators corresponding to some class pipe. Then we know that if it is successful, then we know that we cannot there was a make the Make the na group as integer group, we just will set n commutators because when the f is unsatisfiable. So finally, for future research, I made some new problem. So algebraic number problem is basically the minimum number of costing changes that. minimal number of crossing changes that makes uh its Alexander polynomial is equal to one. Uh in this case we uh we cannot use the method I used before. That's it. Okay, thank you. We'll have questions later anything to that.  Okay, our next speaker, Tussaf Heider. Polynomial bounds on number of flips for alternating links. So I'm going to talk about polynomial bounds on number of flips for alternating link diagram. It's a joint work with It's a joint work with Anastasia. Some of classification problems or unknotting problem you might have already heard from earlier talks by Benjamin and the morning talks from John. And what here I would like to highlight is a knotting problem by using the Rydermeister moves. Rydermeister moves are given here, and you know that if Are given here, and you know that if you have two diagrams, they are connected by the sequence of Rydermeister modes. So the first success in this case was by Hess and Laguerrez in 2001. That the upper bound on the number of right-dimensional move has an exponential bound. It's CN, where n is the cross. Where n is the crossing numbers, and c is this constant, 2 raised to the power 1011. And this was later improved by Leckenbey in 2015 that it is 236 and raised to 11. So, this was an annotic problem, but what problem I would like to discuss is if we fix a link and Link and if we have two diagrams of some specific length, how many Reidner Meister moves would be required to go from one diagram to other. So this was proved by Alexander Cord and Mark Lekende in 2014 that the upper bound that is required between these two diagrams is tower of exponential 10 and this the height of this And the height of this exponential is 10 raised to million times the number of crossings in the diagram. So, this was the problem when you are using the Rydermeister modes. And while we know that the Reidemeister in 1920s has proved that if two diagrams are there, they are connected by the Rydermeister modes. So, what we are doing is in the 1890s, like Tite also gives a conjecture that two ultimate Gives a conjecture that two alternating ring diagrams are actually connected by flies, and that was proved in 1991 by Minasco and Theselve. So what we are going to do is we fix a link diagram, but instead of using the Reidermeister moves, we are using the flight moves. And we'll see what happens if we use the flight instead of Rydermeister. Flight instead of writing a master. Yeah, it's for alternating diagram. So, this is conjecture, I would say, so far. It's still working progress, that if we have two links, two alternating link diagrams, then there is a polynomial bound on a number of flags in terms of crossing. The idea that we are using. The idea that we are using is first, what we want to do is we want to see that where we have flies in our diagram, and that we are using a concept that was given by Georgie Calvo in 1997. In his paper, he mentioned that: okay, let's suppose you have our two tangles, and what we want to do is we want What we want to do is, we want to make a standard or like a fundamental tangle out of it. So, to do that, so suppose this is your tangle T1 and there is a flat corresponding to it. So, when you do a flat on this tangle, take a disc which is transverse to the axis of this rotation, and such that if the disk is not intersecting the crossings, The crossings, it's disjoint from the crossing. So you can see that actually this is actually dividing this T1 into two smaller tangles, T1 prime and T1 double prime. So that is the idea we use. So we define that the tangles with no such disc, we will call them flat tangles. And this is our like building blocks to tell in the diagram that. To tell in the diagram that there are flat triangles. And the next, what we need to do is we need to find some invariant or some way to bound it. For that, what we did is we used the idea of the characteristic collection from Mark Leckende from his paper in 2004, where he defined a square. A square is a simple closed curve. Simple closed curve. It intersects the link diagram four times, and we call it essential if it is not homotopically trivial in the complement of the crossing or it intersects four distinct edges of the diagram. And we say that a square is characteristic if it is an essential, it does not enclose a single crossing or any other characteristic square. Characteristic square can be disjoined from it by using the planar isotopy. So, if you look at this picture, if you look at the red one, this red square, it's actually enclosing a single crossing. So, it's not a characteristic square. If we look at the left here, we have two squares, green and blue, but they cannot be made disjoint by using the cleaner isotopy because they have. Using the planar isotropy because they have a crossing in their intersection. But if you look at these two, the middle one, they are the characteristic squared. So we get a characteristic collection of a diagram. So like for this diagram, the characteristic collection will be this. It is the consist of all the characteristic squares. And once we have the characteristic collection, we And we see that actually the number of left angles are at most the number of characteristic squared in the diagram. So it is bounded by the characteristic collection. So what it happens, one more thing has happened that if we take a flips, we see that there's no new characteristic to square appeared in our diagrams. So that means that if no new characteristic square appears, that means that no new No new flags will appear in our new diagram. So that means that we just write down all the flight tangles and the crossing next to it, which is, for example, if you have a tangle T and it has this many flights possible, so and write down all the tangles in your diagrams, so you will have something like a polynomial since all the Since all the crossings in the tangle will be at most the C, and all the crossings that will be like on the sides where the flags is possible is also C. So we see that there might be quadratic crossing bound. Yes. In your square, is it possible to have like a tangle with some extra component like well in there too, or is it like? Yeah, yeah, it's possible that you can have some circle like this. It's like I'm discussing only the alternating length, so it has to satisfy the alternating thing property. Yes. So is it correct to interpret that the character? So is it correct to interpret that a characteristic collection is essentially a maximal collection of flights in the sense that if you can make the flight bigger, you do, and everything is just magic is choiced. Is that a collection of what, sorry? A maximal collection of flights. So like a big flight might contain some smaller flights inside them. So if you have that, you just take the big one. So for instance, the intersecting ones you drew on the left both live inside the blue one that you've got there now. So somehow the blue one is locally maximal. The blue one is locally maximum. Yeah, so actually, if we are taking the flag on this crossing, it's actually like still. So, if this crossing move here, so it's actually the diagram will stay same if you are just doing in the smaller part of this factor six squared. So, the diagram is not changing. So, we are interested in the flag that changed the diagram. I think what I'm asking is: if I want to fly this characteristic direction, if I just look. Characteristic direction. If I just look for a flight, expand it as far as I can while it's still a flag, look for another flight, expand it as a bijection because if you look at the second one, it's a flight tangle, but there are some cases in which you have characteristic square, but they are not a flight angles. So if you are like, If you are like, I if you are maximizing it for two cases, so I'll just write one example. So, for example, you are saying that you are maximizing it, right? I don't know if I do it very nicely. So, let's say this is my Let's say this is my and this is my characteristic squared. So you're saying that if I maximize it and instead of this if I take the all of that atom x I understand. So this is not a characteristic square. So on the opposite we take small ones. Complete all of them. Okay. Um using the likewise? Okay, so our final speaker today is Margaret Dobick from uh Margaret Doig from Creighton University on grid diagram explorations. It's very nice to be here at this conference. Now I have to get through this in only 10 minutes. So since this conference is not theory informed by random models and experimental data, I'm going to do my best to talk about both grid diagrams as a random model and talk about how using experiments with them helped me formulate results. Help me formulate results, either how sampling helps me present sort of experimental results, or how these experimental results help me form results that have been verified analytically. So let's start. First thing I have to do to you, or do, is justify to you the use of grid diagrams as a model. So let's put a plug in here for Haim's 2017 paper on random knot models. He proposed sort of, I guess, Proposed sort of, I guess, three-ish general groupings of knot models. And we've heard about many of these so far this week. SAPs was wet yesterday, ERPs, was that tomorrow. Thomas just mentioned smooth brownie motion earlier. So the models fall into several, or may fall into several general categories, depending on how you want to describe them. Some with smaller successive steps. These pick up a lot of local connected summands, as we just saw when Thomas showed us a. Some ends, as we just saw when Thomas showed us a few. Several of his were very much not prime. There were many copies of 3-1, things like that. Others were like the Plano model, the Knot Table, Billiards. You're talking about Billiards for. And these composites are also common, except of course in the Knot Table where they've been pruned out. You also get a lot of satellites. Maybe they dominate in the end. I don't know if anyone has more up-to-date information on that. It seems like it. And then there's another set. And then there's another set that are a little bit different in character. So the random length, the random junks, the random length polygonal type model, petaluma, which we're talking about at lunch with eight, and then grid diagrams, which I want to talk about today. These are a little bit different. The step sizes tend to be more variable and larger compared to the diameter. And as a result, you see more prime knots. There's less local knotting. There's not enough room for the knot to tangle itself up like that. These are Tangle itself up like that. These are presumably mostly hyperbolic, presumably non-alternating. A lot of the invariants are very well-behaved. So let me tell you what grid diagrams are, if you haven't run into them before. So a grid diagram is a knot drawn on a grid here. On the left is a diagram, on the knot is a more traditional picture of this knot. It has the following rule. In each of your rows and columns, you get two corners, an X and an O, and that determines our. An X and an O, and that determines orientation. And you connect them horizontally. And in each column, you also have an X and an O, and you connect them vertically. And any time two arcs cross, we declare canonically that the vertical arc is on top of the horizontal arc. So these lend themselves to combinatorial descriptions, as I'm sure you can see. This looks like a maybe overly simplistic presentation of a knot, but it turns out to be both combinatorially very tracking. To be both combinatorially very tractable and still have very rich structure. Oh, before I move on, I should say: so I come into this whole area from Hagard Fleur theory. And so grid diagrams for me came up in the context of grid floor homology, where they have a little bit of extra geometric structure. So this grid they live on, which is technically a torus, is actually a genus 1 Hagard splitting of S3, and the vertical lines are attaching circles in the front. Are attaching circles in the front handle body, they're redundant. We only need one, we have n. And the horizontal ones are attaching circles on the back. And when the knot pops in front, this is really the knot piercing the surface at these points. And the X versus the O tells you the orientation of the piercing. And then when the knot comes in front, it's avoiding the attaching circles and the attaching discs. And then it dives back, and it avoids the attaching circles and the attaching discs in the back hold the body, and so on. So it picks up some interesting geometric structures. This very simple diagram. This very simple diagram. But let me tell you about these combinatorially. There are a couple of different ways to describe these. There's the very clear and straightforward: let's write down the x and y coordinates of our x's and our O's. That sounds like two permutations. It's not, because we have to be careful not to have, for example, an x and an o' run into each other. So it's actually permutation and derangement. And there's a little bit of cyclic redundancy in there. Cyclic redundancy in there. We could also describe them in the case of a knot, for example. You can describe it with a pair of permutations in the following fashion. We can pick a place to start, and then we can use a permutation to tell us the order in which we visit the columns, and another permutation to tell us the order in which we visit the rows. So in this case, if the first column permutation, the first number is four, I jump to the fourth column, and then I access my row permutation, and it tells me which row to jump to next. Permutation and it tells me which row to jump to next and so on. So that will give me a permutation, although again, there's some redundancy because I didn't pick the hex to start at. So if it's a not, you can describe it additionally with two permutations in this fashion. If it's a link, you can describe it with two elements of Sn, but you need to get each component to close up at the right amount of time. So you've got to decompose it into disjoint cycles, and you've got to make sure the cycles are matched up in the right order with matching. Right order with matching points. And if you, for example, have two two cycles, if you swap them, you might change your knot. See if you're here. Okay, let's talk about the cool stuff. If we study grid diagrams as a knot model, what do we see? So the first thing we all do probably when we hit new math is to just start calculating things exhaustively. Since I have a computer, the first question I asked was: if I just look at the link diagrams, if I generate a bunch of these. Diagrams. If I generate a bunch of these, they're not all going to be knots. How many of them will be two-component links? How many of them will be three-component links? And I can make my computer calculate these, brute force, count them up. For example, the 2x2 diagram has the unknot. There's some, both orientations are included in here. There's a little bit of ampibility there, but it's consistent. So there are the two pictures of the unknown. 3x3, there are more unknots. 4x4, the hot flink shows up, and the two-component unlink shows up. We get the trefoil, we get the figure eight. Trefoil, we get figure eight shows up in here, we get three component only because of hot planks and so on. Things get a little bit more interesting. But you'll notice, in general, the number of components is creeping gradually up. And looking at this, we might guess something like maybe the number of components is going to blow off 23. Well, I can't calculate these exhaustively. You'll notice on the last one, there were almost 10 million for 7 by 7 group diagrams. I'm not calculating these exhaustively. I'm not calculating these exhaustively, but fortunately I know a lot of statisticians. So I can treat this as a probability space and sample it. And here's a quick picture of the probability density function for samples up through 1,000 by 1,000 grid diagrams. 10 by 10 peaks at like three, so three components. 1,000 by 1,000 peaks at about six components. So it grew, not quickly, but it did grow. And 1,000 by 1,000 can have up to 500 components, but it gets sort of boring enough. But it gets sort of boring after about 20. So that's a quick sample. Here's an experimental result: the mean and the standard deviation, the observed ones. And it seems to track with log n. Seems traceable. But let's see if we can verify something like this analytically. In some cases, you can, in some cases, you can't. This is one fortunately where we can. I need to mention Sean Weddieswell, who independently did some of this, or was studying some of the same questions. Some of this, or was studying some of the same questions at the same time I was. So, here, let's just write down the basic number of n by n grid diagrams. I mentioned a moment ago that they match up with a permutation and a derangement. We'll describe the diagram for you. And that's where we get the basic number. So the number of n by n diagrams is n factorial. The permutations, derangements. And you'll notice as n goes off to infinity, so this basically looks like n. So, this basically looks like n factorial. It's not the same, but it's basically what it looks like. But the actual question I asked was: how many components do these things have? Let's let c and k be the number with, let's say, k, everyone, with k components. So you can try to write out some very complicated sums here. You can also come up with a generating function. I think generating functions are the way to study grid diagrams in general. You can come up with a generation function. In Jiggle. You can come up with a generating function to store all of your component counts. And this generating function gives us a beautiful result, which is that as you send your grid size off to infinity, the proportion of diagrams that have any given number of components goes to zero. So not only is any given NOT or link type vanishingly rare as your diagram grows, but even a given number of components is vanishingly rare. Number of components is fanishing the word. Hello. Okay, my remaining 30 seconds. I've studied a bunch of other invariants, traditional invariants, and some calculated properties. I'll throw a few up here just to show you. That's Rhye. And this one's interesting to compare to Petaluma because the Kryptos is very similar. It's constant. Let's talk about Cypher genus. So I'm particularly So, I'm particularly a fan of Cipher Genus. This says grid floor-based calculations as a typo. It should have said grid floor calculations and cipher genus calculations. The genus calculation does not go through grid floor, are available on my website, and I'll pull that up in a second and show you. But as the grid size grows, of course the genus grows. That's something that we would all expect. But how much does it grow and how quickly? And I'm shocking. Shocking. There are a couple of other cool questions you can ask with things like this: like if you change a crossing number, how does the genus change? And I will finish by pulling up my website. I have posted a lot of my calculations on my website, and if anybody is interested in any of them, please talk to me. That's not showing up. Sorry. I don't know how to make this work. That's how I make that work. This is my website. You can find it by Googling my name. You can also go to doigmath.matterc.com and it has things like a convenient genius calculation. And if you would like to draw your not and have it calculate your genius for you, it will. Although there's a warning, there's some probability involved in this calculation. The results are not guaranteed. Calculation. The results are not guaranteed, but they'll probably be pretty cost. Okay, so that ends the afternoon session. You can come down if you have questions. Thank you.