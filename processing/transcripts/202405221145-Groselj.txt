Thank you for an introduction. And I would also like to thank the organizers for inviting me and giving me the opportunity to talk. It's a pleasure to be part of this workshop. So this talk will be about construction of a specific family of C1 splines defined over a pound. Splines defined over a foul, saving refined triangulation. But through this, I'd like to show something that may be applied perhaps more generally. And it is an approach to somehow identify and characterize microelement spaces through the Berenstein-Besier representation in relation to blossoming. And this whole setup is somehow. Is somehow the purpose of this whole setup is somehow to come up with some basis functions that possess certain nice properties that can be related to the beast by B instruction. So first let's introduce some notation. So the triangulation would be denoted by a triangle. V is the vertex set, E is the set of edges, and T is the set of triangles. And then for And then for a chosen degree d and smoothness r, we define this vector space of CR functions on the domain such that the restriction to any triangle is a polynomial of total degree at most d. So we consider bivariate polynomials, and I suppose this innovation does not deviate too much from what we've seen in the last couple of days. Needless to say, this vector space is a kind of a peculiar. vector space is a kind of a peculiar spline space and we know that the dimension in general depends on the geometry of the triangulation. Now fortunately there exist constructions that somehow manage to avoid these problems with the geometry and here I have two such approaches for the C1 spines that are some kind of they're in somehow classical. The one on the left is the Argidis construction. Giddis construction, which is basically an interpolation scheme in which we interpolate values, first and second-order derivatives at each vertex. So this amounts to six degrees of freedom associated with each vertex. And additionally, a directional derivative on each edge. So if you count the degrees of freedom on one triangle, you get 21, and this is exactly the dimension of polynomials of degree five. Of degree five, so it can be proven that this uniquely specifies a quintic polynomial. And then the beauty behind this interpolation scheme is that we can apply it independently on each triangle of the triangulation, and we will end up when we put things together with a C1 spine. And this may sound a bit contradictory to what I've said at the beginning. Beginning because this clearly does not depend on the geometry. But the trick here is, of course, that we are interpolating second-order derivatives. So we are basically imposing C2 smoothness of the vertices. And this somehow resolves this so-called thrust compatibility condition. A similar idea, but kind of a different trick, is with the Powell Sabent refinement, which is based sort of this. Which is based, so this is a kind of a splitting technique. So the trick is here that we introduce an edge emanating from each vertex, and this resolves this problem around the vertex in a different way. And it allows that somehow we can construct spines of significantly higher and sorry, sorry, lower degrees. So, Paul and Seven showed that a C1 quadratic. A C1 quadratic spline or such a refinement can be characterized by values and first order derivatives. Now, if we compare these two spice densities, or at least interpolation conditions, we see that they're quite different. So, this interpolation problem here is, in a sense, simpler and nicer. And because all the degrees of freedom are somehow associated with the vertices, one can actually set up a basis for this spine space that is non-negative and forms a partition of unity. And such a result is not known for, for example, for Arguera splines. But if we consider also splines of higher degrees on this Parallel seven refinement, Fine. It's somehow interesting that we also have a space, a cubic space that was proposed by Henrik a few years ago that has somehow similar interpolation, interpolation, characterization in terms of interpolation and conditions. So we add basically two additional degrees of freedom per edge, and this is the direction. Edge and this is the directional derivative, but it's also the value interpolation. So it differs in this sense from this one. And this one again allows the construction of non-negative basis functions. At some point, when I looked at this analogy between the interpolation conditions, I started to think about Jim. Started to think about generalizations of these arteries splines. So, basically, it's well known that you can increase the degree by keeping the global smoothness fixed to C1. And what happens is basically that we get two additional degrees of freedom associated with each edge, and we also get one extra degree of freedom associated with each triangle. And if you try in the same analogy, And if you try in the same analogy, the same scheme for the power stable split, then you actually prove that there also exists a spline space with some specific super smoothness that can be characterized by this interpolation problem. And you can then continue basically to any degree you want. And this is something that I would like to talk about in the remainder. Talk about in the remainder. So, how can we characterize this kind of spaces, not with the interpolation, with the interpolation functionals, but functionals that are somehow more related to the Benstein-BZ representation? Can I ask what is the definition of the simple state here? I will introduce the definition. Yeah, this is just an introduction. Because somehow it's easier to look at it. Yes, somehow it's easier to look at it with the transfer spectral interpolation functional, but we will come to the definition of this ones. Okay, but before we get to that, maybe some brief introduction or brief review, let's say, of the Baltiman design techniques. Henrik had a nice comprehensive talk on Monday, so my job here is now much easier. So, if we have a spline on a triangulation, then we can consider the restriction to any triangle which is a polynomial of degree D in the Bernstein Bezier representation. And we know that this comes with somehow so-called Bezier domain points, which can be associated with the Bezier coefficients. And this is basically the exercise that we made. Basically, the exercise that we made yesterday at the open session, the open problem session. And I split these domain points into three groups. So basically, we have these blue colored points, the main points that are somehow the vertices of the triangulation. Then we have the red points that are those that are located on the edges and the green ones that are inside of the triangles. This is an example for degree equal to four. For degree equal to four and the continuity is in fact very easy to achieve. So it is somehow geometrically related to these domain points. So if we consider, for example, one polynomial here and the other here, then it will glue continuously if the Bayesian coefficients corresponding to these points that coincide. These points that coincide are actually the same. So the coincidence between the domain points from one side and the other side must somehow imply the coincidence between the busier coefficients. And we know that if you want to have higher smoothness, then geometric relations between these domain points also give us information how to connect the BC coefficients. So this is very nice and it has nice geometric representation. Representation. And well, if you start to play with that for some explicit constructions, you may enjoy this with C1 smoothness. But when you go higher, I think it becomes more and more technical. So I'd like to bring here another tool, which is called the blossoming. And this is basically a mapping that is assigned to a polynomial of degree V. And this mapping And this mapping has B arguments, and each argument is a point in the plane. And it assigns to this D argument a real value. And this mapping is unique if we require these following three properties. So the first property is symmetry. So basically, the order of the arguments does not matter. Then the second property is a fixed. Then the second property is affinity. So, affinity, for example, in the first argument, and because of the symmetry, we have affinity in every argument. And finally, the third property, which is the one that actually relates this mapping to the polynomial, which says that if we take any point and we repeat this point as argument d times, so whenever you see these square double brackets, it means repetition of the argument. It means repetition of the argument. So, if we repeat this point b times, then what we should get is exactly the value of p at point p. And the existence, the uniqueness of this mapping is somehow the so-called blossoming principle. So, the reason I like this mapping is that it gives some kind of dual representation for the Balanced Time basis polynomials. So, if we So, if we concentrate again on the domain points, we can express every domain point with the vertices of the triangle, say VI, VJV, K, in this particular way. So we have these non-negative integers, D0, D1, and D2, which must sum up to D, and we divide this by D so that we get convex weights basically. Basically, and each domain point is then uniquely somehow determined by these indices, D0, D1, and D2. And if we use these indices to specify the repetitions of the vertices that we feed into the blossom, then this value that we get is actually the coefficient of the polynomial if we express it in the Bernstein basis. Balenstein basis related to this triangle. So the Balenstein basis polynomials defined in the standard way on the with the reference to the unit triangle are those. And we just compose that with the barycentric mapping so that we somehow shift all the nice properties that we have for this guys on this triangle to this triangle that we are actually considering in the frame. Actually, considering in the paranger. And this is kind of a nice representation because we have a basis that forms a convex partition of unity on this specific triangle. And we also have this nice representation of coefficients in terms of real functions. And that's something that one would like to have also somehow globally. Also, somehow globally on a triangulation, if we consider a spine space, because this representation is somehow limited to local polynomial representation, and we would like to have this on a spine space if that's possible. Another thing I would like to say about blossoming is the relation to the smoothness conditions. So you can use this. So, you can use this blossom to express conditions related to the vertices, to express conditions related to the smoothness across edges, and you can generalize this to multivariate. But here, because we will be dealing with power stability refinement, it is actually enough to just concentrate an additional super smoothness at the vertices. So, we have this kind of So we have this kind of characterization theorem for the smoothness. If we start with spline of degree D that is continuous, then we have that this spline is CR continuous at vertex Vi, if and only if there exists a polynomial Q of total degree R such that these conditions are met for every triangle of the triangulation. triangle of the triangulation that has over x here at vi. So basically if we try to read this, we know that these are somehow coefficients. These are the coefficients of the spine that correspond to these green color domain points. And these are the coefficients of the polynomial Q that we would like to somehow relate to this. Okay? So if we consider So, if we consider this from the perspective of construction, so say we want to have a spine that is C2 here at the vertex. We pick a polynomial, Q, which is a polynomial of degree 2. We can represent it in the Berenstein-Besier form on this dashed triangle. It comes with six Besier coordinates, and then we can. And then we can use blossoming to express this quadratic polynomial with respect to this red triangle. And the values that we will get by expressing it with respect to this red triangle will be exactly these that appear here on the right. And then we set these coefficients that we get from this polynomial on the dashed triangle. Polynomial on the dash triangle as the coefficients of the spline corresponding to the domain points that are included in this red triangle. And if we apply this algorithm on each triangle and we specify these ordinates in that way, then we have a guarantee that this will be a spine that is C2 smooth at specific vertex. So that's somehow the main idea and the main reason for introducing blossom. Reason for introducing blossom in this part. Okay, so now we are ready to consider splines over Power 7.6 refinement. So this refinement, as we saw, splits every triangle into six smaller sub-triangles. And this cannot be done completely arbitrarily. So what we basically do is we pick a split point inside. A split point inside of each triangle. We call these split points the triangle split points, and they will be labeled by T here. And this choice must be such that if we consider two neighboring triangles, then the line segment connecting these two triangles with ones must intersect the common edge so that we get a cross singular vertex in terms of C1 smoothness. This is important. And this can be always achieved. And this can be always achieved, for example, by picking the triangle split points to be the incentives of the triangles. And the intersection point here is the add split point, which is labeled by E. And Paul and Sagin proved that we can construct C1 quadratic spines over such a refinement independently of geometry by prescribing values and first-order literatives of the vertices, as we saw. We saw at the beginning. It turned out that this refinement is also suitable for the construction of splines of higher order of smoothness. This is a selection of papers that are dealing with this problem. And the idea here was always somehow to set up a super smooth spline space with degree as low as possible such that. Possible such that we manage to get global smoothness of a certain chosen order. But interestingly, not much in terms of construction is known about spline spaces that don't have this optimality. So, for example, if you just stick with the C1 smoothness and take any degree, how can we construct spline spaces that spline spaces? Spaces that spines that somehow belong to this space. We have results on dimension, we have results related to the exact sequence. This is as we heard yesterday, but we don't have much about the construction, at least to my knowledge. The truth on one hand is that if you consider this fine space for the approximation purposes and you have a really high degree, then basically you will get lots of degrees of freedom that Of degrees of freedom that may not be very useful for approximation since this blank space somehow contains all polynomials, but it comes with so many degrees of freedom and the performance may not be so good. So, for this reason, we restrict ourselves to a specific reduction of this general spine space. So, this is now the definition of this super-smooth spine space. So, we start with general C1. So we start with general C1 spine space, and then we impose super smoothness of maximal smooth, so of maximal order to the triangle split points. And we also do the same for the boundary at split points, but this is just a technical detail. So this is somehow the important part. So we want to impose as much smoothness in the interior as possible. This does not imply that we have Of maximal smoothness over the entire triangle. We just impose smoothness at the triangle smooth points, but somehow intrinsically we get additional super smoothness properties inside. For example, it turns out that if you consider any edge connecting the triangle split point with the edge split point, you actually get maximum supersmoothness across this edge. This is basically just a consequence of this requirement. Of this requirement. And I draw here some additional lines that partition the domain into regions of three different types. So we have this scale triangle inside of the regional triangle, and this is basically the disk of radius d minus one at triangles that point. Then we have these parallelograms here associated with edges, and we have these general polygons. Have these general polygons corresponding to the vertices, and this is basically the ring, the disk of radius one for that vertex. Now, the magic behind the Paul-Saben six requirement is that you don't need to really care about C1 smoothness conditions here in this parallelogram. So, basically, if you specify these values, the business coefficients corresponding to the domain points on the edges as convex. The edges as convex combinations of these points on the tick lines, then you're basically safe. So you get C1 smoothness across the edge. So we just need to somehow concentrate on this region and on this region. Now, standard trick is to somehow enclose this polygon in a triangle. And then we have two types of triangles. Types of triangles. Here, the ones associated with the vertices, and here, the ones associated with the triangles. And now, if we recall the supersmoothness conditions and characterization in terms of blossoming, we can intuitively consider the C1 smoothness at the vertex as somehow a linear polynomial specified here, and super smoothness at the triangle specified as a polynomial. Polynomial of degree d minus one here at the triangle split point. And we can represent these polynomials in terms of the Berenstein the Z basis. And this is the picture that we get. And this is somehow very much related to the concept of the minimal determining set that Hendrik discussed on Monday. The difference is that somehow we have managed to more or less forget about the refinement that's underneath, and we can somehow forget about most of the main points that we have if we consider the spine in this representation. So, this is somehow more reduced. And another aspect is somehow that this is very similar. That this is very similar to what we've seen for continuous lines. The difference is that we somehow moved apart these parts a little bit so that we get some space here in between and we can squeeze these triangles to the vertices. And this gives us room to somehow impose C1 smoothness conditions through the power saving refinement. And the thing that we have to focus on now is somehow how to capture these. How to capture these degrees of freedom that are represented by blue-colored, red-colored, and green-colored domain points. To formalize these things, we can introduce functionals that are specified by plotsmen of polynomials that we get by restricting the spline to certain triangles of the refinement. So, for each vertex, say this one, we will introduce three functionals related. Introduce three functionals related to these vertices. The vertices of these triangles will be denoted by q1, q2, and q3. Now we take the blossom of s restricted to any triangle of the refinement that has a vertex at this point, and we use this point vi b minus one times as argument in the bottom. And the first argument is simply a shift of a vertex. Of a vertex of this triangle that is here depicted in red. And the reason for the shift is basically that if you've taken out the average of these arguments, you will get exactly the vertex of the triangle. So these are the three functionals related to the vertex. Then we follow the same idea and specify functionals related to the The these red-colored domain points that are associated with the edges. So basically, we take the vertices of the edge, say vi and vj, and we repeat these vertices d minus one times as before, somehow. The difference is that we have now two vertices, and this gives us d minus two options because. B minus two options because these integers are non-negative and must sum up to b minus three. And then the last argument is a triangle split point. Usually it's the triangle split point. So if we pick this triangle, then we have here b minus two b minus two functionals. And if we go to the other side and we pick the other triangles upon, we have additional b two b minus two functionals. And this amounts to two times d minus two functions. Two times the amount of functions. And then the third thing is: the third thing are the functionals associated with the triangle over the green colored domain points. So if we consider a triangle, we take its vertices, Vi, Vj, Vk. We use them B minus 1 times in different combinations. And as the last argument, we put the triangle split point. Triangle split point. And this again gives us a set of functionals, b minus two over two functionals, and the average somehow again corresponds to one of the green colored domains. So now that we have these functionals, we are basically in the position that is the same as we start with the interpolation functionals, or with the functionals that come, for example, from the minimal determining set. So we can follow the same path to prove. Same path to prove, to somehow characterize the spine space. So, the first step is to show that these are determining functionals. So, if they all vanish on a spline, then this should imply that s is identically equal to zero. And this gives us, in terms of dimension, the upper bound. So, this here is just the sum of all functionals that we introduced. The second step is to find functions that are somehow dual to these functionals. Dual to these functionals, and if we manage to achieve this, then this implies that both functions and functionals are linearly independent, and this gives us the lower part. So we have the dimension. I suppose this could be done in a different way, in a shorter way, but we are here in this setup aiming for the Penises solutions. So this is the reason that we somehow go step by step. Go step by step. The first step is, in a sense, simple because these functionals are very much related to the definition of spine space in terms of super smoothness. And well, this step requires some additional work, but the general recipe somehow is to introduce these basis functions by following the same ideas we had before. As we had before, so we can characterize a spine space by linear polynomials associated to these triangles and polynomials of degree d minus one associated with the interior of triangles. And then basically to get a spline from a collection of such polynomials, we can simply consider an arbitrary sub-triangling the refinement, observe the rules that we have. Observe the rules that we have for subdivision of these polynomials to get the Brazilian domain points on one triangle of the refinement. And we basically get the consistence line if we pick this collection of local polynomials in the right way. And the right way means simply that these linear polynomials here are related with these polynomials of degree b minus 2. Polynomials of degree b minus two in a way that these gray colored domain points, the Bayesian coefficients corresponding to these gray colored domain points somehow match from both sides. And this is something that's fairly easy to achieve. So if we want to do this now systematically, we can start by specifying these collections in a way that we are wisely picking Balenstein basis polynomials as. Balenstein basis polynomials as those local polynomials. So for example, for a vertex, we have this triangle here. We want a linear polynomial here, but all linear polynomials can be described by three Bernstein basis polynomials associated with these three vertices. We pick one vertex, choose the Bernstein basis polynomial associated with it, and supplement this configuration with a Benstein basis. With Bennostein basis polynomials of degree V minus one corresponding to the start of this vertex. And then if you apply the general recipe to construct a spline on the power signal refinement, this is the spine that we get. By construction, it is non-negative. It is also clearly locally supported and it has the required dual property. And this is not that easy, not that difficult. That easy to not that difficult to check because somehow these functionals were introduced in a way that they are related to the Pennstein-Besier representation. So this is exactly what we get. And this was somehow the reason for introducing the functionals in that way. So if we repeat this procedure for all the vertices of a triangle, we get three basis functions that are associated with a vertex. And then we can simply repeat this procedure for other degrees of freedom. So, if we consider those red colored domain points corresponding to the edges, we now forget about these inner polynomials. We simply set them all to zero and we just take the Bennstein-Bennis polynomial on this triangle corresponding to this domain point and use it to construct this polynomial. And use it to construct this pipe. So all the rest of the polynomials are equal to zero. And we can repeat this procedure for every red domain point. And this gives us two times d minus two. Betis functions that are, again, non-negative supported on these two triangles, and they have the dual property. And the easier thing at last is to define beta. Find basis functions corresponding to the triangles. We just use the Penn-Stan basis polynomials corresponding to the green ones. And this way we get d minus two choose two basis functions with support on this triangle. They're non-negative. And again, it's not this dual perfectivity or nothing for it. So if we now just take a look at different degrees. So, for grid two, we have three basis functions associated with the vertex, and this is the well-known construction by all DIRICS that actually initiated all these investigations. So this is for C1 quadratics. Then for cubics, we get two additional basis functions associated with the edge, and this is exactly the basis that Henrik proposed. Proposed somehow from a slightly different perspective, but what you get at the end is the same thing. And then for degree four, we have four basis functions associated with the edges and one additional basis function that pops out here in the triangle. And this is again consistent with this interpolation problem. And you can repeat this for any degree. The construction is somehow unified. You can pick any degree. Unified in pick any degree and somehow get the basis functions that have these properties that we somehow wanted to achieve. So for and foremost, the convex partition of unity now on a global scale. So on the entire triangulation, this is not a local representation, this is a global representation of this plan. And well, it comes to And well, it comes with the basis, it comes with a dual representation, and it comes with direct relation to the Berenstein-Besier form. So, this is something that could possibly be interesting in different applications for modeling. You can set up a control net. Then, since you have this dual representation, it is straightforward to set up some quasi interpolation operators. And since we have our basis, we can use this. Basis, we can use these functions in the context of finite element method or even isogeometric analysis, and that's all I have. Thank you. Comment, questions, but basically when you define your triangulation and you get another problem with the seven spine space, do you get nested spaces? No, here or not. No, here not. So because of this super smoothness that we impose at the triangle split point, there's no not nested. If we consider the full space, then it would be nasty. If it's somehow restricted, they have to turn the classical confinement, somehow that's compatible with super simple, but probably not. No, no. I think if you unless it, then you have to do it with the first space. And in principle, you can do the same construction. principle you can do the same construction and come up with with the functionals also for the for the general space somehow i just wanted to restrict here to to somehow reduce the number of degrees of freedom uh like you have an estimate of how many functions uh the basis overlap a single macro triangle not sure with respect to the dimension of the spliner street restricted to the macro triangle The angle or just a collius? No, not sure. Didn't check that, but for sure it's not local in the practice. Martin or Johnny? So what's the difference in dimensions if we take the regular policy then and this read this reduced one? So I think you get something like that. So you have three times three. This doesn't change. Then instead of two times d minus two, I think you have four times t minus two. And then for the last term, you have plus six times d minus two over two. So somehow this is multiplied by six and this is multiplied by two. So quite a lot more actually. Martin? Yeah, thank you very much for a very clear talk. Just very much like a perspective thing. I have a feeling I see a lot of structure in what you present. So what this potentially So, would this potentially give any chance to go 3D? There's a lot of structure, so kind of that would be the whole thing. Yeah, maybe Henrik is a better person to answer this question. He considers these points, but the problem with the generalization of the power segment refinement is that you get some kind of condition on the way how to construct the triangulation. And this is related to the way we connect these triangles, bit points. So, in this case, it's just Points. So in this case, it's just a line, and this is always possible. If you go to 3D, then you have a certain plane, and you have to pick a certain plane that connects that. It's not clear if it's possible. And in 2D, it's somehow you can always guarantee that you can produce the split no matter what the source happen actually. Water source happening after H.D., we know what is the equivalent to constrain, but we are not sure that we can always do that. Of course, if it is regular, it's close to regular, it's clear that you can do it. If you just give me a general defension, maybe. But if you have say this split, then the space is the same in physically. And this generalization should probably also work. Because it's the same structure, the space is complicated, then it's complicated. So we have to put it somewhere else. So, I guess there are no questions or comments from the audience online. I don't see anything. So, if no more comments here, we thank Jane.