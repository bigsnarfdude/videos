So next we have Elizabeth Kelly who will be talking about skiing relations, frontline services. Thank you. So this is joint work with Esther who is here and Wan Wu King who is a graduate student at UIUC. And so the motivation for this came from a cluster alter perspective. So I'm going to give you the elevator pin. To give you the elevator pitch for what a cluster algebra is because this is a very short talk. So, the sort of high-level thing to say is that it's a type of recursively generated commutative ring where we have generators that we call cluster variables. And instead of needing to know all the cluster variables to generate the entire algebra, I just need to know a fixed-size subset that I call a cluster. And then there's an operation for moving between clusters called mutation that uniquely takes one cluster. That uniquely takes one cluster variable and exchanges it for another, which gives you the sort of recursive way to generate the entire algebra. So you could think pictorially that maybe you start with a cluster and you've got some large tree that you're forming by mutation. And I'm not going to talk about all of the data that I have here. We're really just going to care about the cluster variables. So you should think that this bold x here is some cluster of maybe k variables. Of maybe k variables, and when I mutate, let's say I mutate at one, I uniquely exchange the variable in that spot, and all the others stay the same. Okay, so that's as much as I'm going to define a cluster algebra. And if you are a cluster algebra fan, some things that you might care about being able to do would be being able to take a random element in the cluster algebra and express it in terms of your cluster of choice, or to be able to describe nice bases for the cluster. Nice bases for the cluster algebra that are not the set of clustered variables. Okay, and I'm going to specifically think about cluster algebras from surfaces where we have a very nice concrete geometric model. So as an example, here's a very small surface. So I've got some marked points that can either occur on the boundary or in the interior. When they appear in the interior, I'm going to refer to that as a puncture. Puncture. And there's a dictionary that tells me how to go between this model and the cluster algebra itself. So I'm going to think that the choice of surface determines the cluster algebra that I'm thinking about. That any cluster, so any choice of a fixed number of cluster variables, corresponds to choosing some triangulation. So when I drew this nice triangulation here, I was really choosing some cluster for my cluster algebra. My cluster algebra. And then each individual arc in my triangulation corresponds to some cluster variable in that cluster. And this operation of mutation that exchanges one cluster variable for another shows up on the surface as a flip of an arc. So for example, let's say we want to flip B. You'll notice that it occurs inside of a quadrilateral. And the way we flip it is we erase B, and there's a unique other arc that I can add to produce another triangulation. Triangulation. And if I do that, there's a relationship between the cluster variables for xb and the new cluster variable xb prime that has this nice binomial form where there are some coefficients here that I'm not going to talk about. Just know that there's some y coefficients that I'm sweeping under the rod. It's a little bit more complicated than what I just said, though, because I'm looking at a punctured surface. Surface. So I do for you a very nice triangulation at first where it was very clear how to flip all of the arcs. Here's a slightly more complicated triangulation. So here I've got what I would call a self-folded triangle, where you've got a triangle right in here where two of the sides are this arc R. And so here if I think about doing this mutation operation, let's say I want to mutate L first. It's pretty clear how to do that, right? I erase it, there's one unique arg I can add back in. One unique arc I can add back in. But if I wanted to instead flip R, then I'm left mystified, right? There's no clear flip. So I need another type of arc called a tagged arc. And I'm not going to explain these compatibility conditions, but you have to impose some conditions on when I can draw tagged arcs and plane arcs together so that you get a unique mutation still. But so this is what I would do. I would replace that loop L with a tagged arc here that satisfies these compatibility. Arc here that satisfies these compatibility conditions. And I've got some relation between the tagged arc, the original radius, and L that I can use to recover an expression for L in this model. And so now, if I go to flip, if you bothered to parse through these rules, you would see that there's a unique flip. And so what we're going to think about are these punctured surfaces. And in particular, what I'm going to think about on them is I'm going to think about Think about on them is: I'm going to think about something called a scheme relation. So, the idea here is that if I wanted to, in the cluster, I'll draw multiply two elements. That topologically is going to correspond to drawing two curves on my surface and trying to resolve intersections that they have. So, I'll give you a small example. Let's say I was just looking in a quadrilateral. This is like a single mutation or a single flip. And I've got an intersection here between this blue. Intersection here between this blue arc and this orange arc, right? That means that they're incompatible. They couldn't appear in a cluster together. And if I wanted to get an expression for them in terms of some existing triangulation, I might want to start resolving intersections. And what I would do is I would think about just erasing this point where they intersect, and then I could reconnect these segments either vertically, which is what happens here, or horizontally, which is what happens here. Which is what happens here. And this is a sort of well-understood story. And again, there's some coefficients that are going to crop up that I'm not going to explain. Okay, but on punctured surfaces, or sorry, for more complicated skein relations, I might have multiple intersections. And you can think about resolving these intersections by just choosing one to start with and then continuing to resolve until you have no more intersections. You are going to start getting. You are going to start getting complicated things, right? So, for example, once I do this, if I choose to resolve this left intersection first, now I'm going to have to understand what it means to resolve a self-crossing, and these get progressively more complicated. So, this story of how to do all of these resolutions and the sort of scan relations they produce is really well understood on unconsured surfaces. And what we were interested in was understanding what these skein relations look like on punctured surfaces. So it turns out on punctured surfaces, there are lots of new types of skein relations that can occur because you've got these tag darks, right? So this is actually kind of where a paper in the literature by Musicer Schiffler and Williams kind of left it. That they had this story about basies fought unpunctured surfaces. Fought unpunctured surfaces, and they were pretty sure it would extend for punctured surfaces, but you'd have to figure out all these skin relations. And so, this is where we kind of picked this up. So, luckily, there are some simplifications you can make so that you don't have to go through and do all 15 cases. So, the first simplifying observation is that in cases one through five, which were about, I'll show you what those cases were. So, these were about sort of what I would call a transverse integration. Sort of what I would call a transverse intersection of two arcs. And you really only have to think about boiling it down to three cases. So when those intersections occur really far away from endpoints that are tabbed, then the tab almost doesn't matter in the argument that you're going to make. It behaves a lot like the unpunctured scheme relations that we already know and understand. The things that are interesting are when the intersection occurs close to a tagged endpoint. So we divided this into types. So we divided this into types one and type two just based on whether the arc that we're intersecting with, so here the blue arc, has an endpoint that's far away from this triangle where we're intersecting, or both of the arcs are starting in this triangle. And then the other simplifying observation you can make is that there was another collection of schemulations that came from places where you violate these compatibility conditions. We're having tags. Conditions for having tagged and plane arcs end at the same marked point. And to understand all of those, really all that you have to do is you look at, you have to understand what happens when you've got a single puncture with a pair of incompatible arcs there. And if you understand how to do that resolution and understand the stimulation it produces, then you just continue applying this until you've resolved all the incompatibilities. Compatibilities. And then the cases that are left that you really do have to think about are you have to think about closed intersections with closed curves, self-crossings, and then you also want to understand some cases where you're intersecting with arcs that have a plane version that's already in the triangulation. And so what I want to do, since this is a short talk, is I want to just give you the flavor of the sort of objects that we use to prove these skin relations and the general strategy for how the proofs go. Strategy for how the proofs go. So we use a poset construction, and the idea is that if we go back to our surface and some arc that I've drawn on the surface, I'm going to construct a poset that represents that arc that's going to allow me to compute an expansion for the cluster algebra element corresponding to the arc in terms of the cluster represented by the triangulation. So there are some rules for how you do this. Rules for how you do this. I would choose an orientation. Here I'm going to think about the arc being oriented. So the first intersection is with T1. And then depending on whether the arcs that it's crossing follow in clockwise or counterclockwise order, you get cover relations that are either like Ti is covered by Ti plus 1 or the Ti covers Ti plus 1. So here for the arc that I drew, I would first have an element of my poset label T1 for that first intersection. T1 for that first intersection, and then because T2 follows counterclockwise, it'll be covering it, and then the other way for T3. And then it's a little bit more interesting when we've got a tagdad. So here we used a construction in the literature that was introduced by John Wilson. John Wilson. And so the idea here is that I'm going to think about this tagged arc as having some sort of hook on the end that goes around and crosses all of these spokes. So it's recording the fact that the tagged arc is incompatible with all the spokes. And then I'll use that hooked arc to draw a sort of larger poset. So I get what we call a hook of the end that contains the plane arcs poset. The plane arcs coset within it. And so then, I'm not going to really explain the details here, but there are some things that we would compute from the poset. So a collection of vectors that if you are a cluster algebra fan, would allow you, you would recognize will allow you to compute the g vector. And then we're also going to assign a weight to each element in the poset because our experience. Element in the poset because our expansion formula is going to be over order ideals of the postet. And these weights are going to be based on some y variable that I'm not talking about, and then the set of arcs that are either clockwise or counterclockwise from it in the triangulation. And then one of our propositions is just how you get these cluster expansions. And so here, And so, here, for example, this term comes from just taking the order ideal with one element here. Oh, come on, HDMI table. Okay, I only have a couple more slides, so hopefully, we can make that. So, in general, our skin relations have. Our skin relations have this sort of form where we've got our product that we'd like to understand on the left, and it becomes a binomial where one term doesn't have a coefficient, and the other has some y-coefficient. I say in general because you have to write this a little more carefully when you've got self-crossings or closed curves in motion. And so our general proof strategy is to use these postets that we've constructed and come up with these combinatorial bijections that are going to show that if I look at pairs of That if I look at pairs of order ideals on the left-hand side, that I can map each uniquely into either a pair of order ideals here or a pair here. And the thing you have to be, maybe that's worth pointing out, is that you're going to be obviously breaking the pairs here into two groups. And so because we have one term with monomial one, you're going to want the pair of empty order ideals to get mapped there. And then you could. map there and then you construct a weight preserving bijection between pairs on the left hand side and the pairs that live there and then another weight preserving bijection between the remaining pairs here and the pairs here that's weight preserving up to some unique monomial that takes care of that y coefficient. And I'm not going to go through an example of a proof because they tend to get a little bit fiddly and long to describe, but this is the general machine. And so what we've been doing for the last, I don't know, Doing for the last, I don't know, year or so, maybe longer, is turning the crank and doing this. And we're getting pretty close to finishing, but we're still finishing up a couple of the last cases. But I would say we've got like 11 out of 15 solidly written out. 85%, I'd say. Okay. And then I just want to say something about why we got interested in this or why you might find this interesting other than just really liking. Is interesting other than just really liking bijections of order ideals. So in 2013, so about a decade ago, music of Shift Logan Rhythms defined these two collections of arcs on surfaces that form bases on unpunctured surfaces. And these are called bracelets and bangles. And the extension to the punctured case was left as an open question, where you would need these skin relations as a key ingredient. End. And then so right now our scan relations show that both the bracelets and the bangles are still spanning sets for the cluster algebras, and even better, they're, or I guess equally as good, they're also linearly independent sets. And that follows from the fact that we've always got a term with monomial one. And so the only ingredient left to show that they're actually bases is we have to check that these sets actually live inside the cluster for the surface. And this is. Work for the surface. And this is non-trivial, but we expect that it's probably true. So that's maybe the sort of future work part of this slide. And then I have some references. Can you go back to your main theorem? I wouldn't say that this is the... You mean this one? Yeah. You mean this one? Yeah, so are those coefficients always positive? They'll show up in front of? So, no. Oh, to go to slide 13. Right. Otherwise. Yeah, like I'm wondering do the y's that show up at every single thing. Oh, there's always positive. Yeah, so they're just products of these y variables that I haven't explained. Okay, okay. Yeah, so they're very clearly positive. I see. Oh, but it was so. I see. Oh, but if you have a cell phone section, you can get a minus sign. Oh, okay. That's that's fair. So if you end up with something where you've got a ink, this will produce a minus one sign. So I guess you're right that there are some cases you have to think a little more carefully about. This is written would always be positive, but there are some cases where you would end up with a negative term from like resolving a kink or something like that. Is there any way in which you could apply this to find invariants for notch manifolds and punches? I don't know. 