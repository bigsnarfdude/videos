Okay, welcome everybody to our fourth. Welcome, everybody, to our fourth day of the workshop. We'll start off with Thomas Yale talking about Galva groups of purely lacinary polynomial systems. Well, thank you all for being here. So I'm very excited to talk about some pretty recent work that relied on a series of computations on various scales. So, specifically, we want to look at Galois groups of structured polynomial systems and the structure we'll talk about. That'll come up a lot. We'll talk about that'll come up a lot. But I want to get this out of the way to start. When people see Galois groups, I think their minds go to a certain place automatically. They think of fields and field extensions and automorphisms and all these things. So I'm glad to announce that there are essentially zero of this in this talk. So I look at Galois groups very geometrically. There's lots of pictures and no field extensions, closures, and all that stuff. But they are Galois groups and such objects. Yes. If you like these things, you can write everything that way. I'm going to choose not to. Way, I'm going to choose not to. So, for me, the things that I look at are Galois groups, those enumerative problems specifically. And so, the framework for an enumerative problem to me is we have a parameter space of things that we allow to move around, we have a solution space of things that we're actually looking for, and this incident space of all pairs that satisfy some constraint. So, a canonical example that I like to use is the lines on the smooth cubic surface. So, the parameter space in this case is the space of Space in this case is a space of smooth cubic surfaces. And on any such smooth cubic surface, there are exactly 27 lines of the complex numbers that lie on the surface. So this is a nice symmetric one where you can actually see some of these lines. And then we have this incidence space, which is all pairs of cubic surfaces and a line that lies on that surface. So Frank has these nice 3D models that people like to look at and pass around and all these things. And if you want one personally, well, you have to. And if you want one personally, well, you have to ask for it. Rapid press time. Rapid press time. Yeah. So that's so rapid. That takes about 18 hours to make. But Frank has spent enough time on them that I have about seven Klein bottles and like 18 cubic surfaces at home. So he's the person to ask if you want one. Do you have the CP files on your website? No, I took. On your website? No, I took them off the map. Okay. I'm designed. Okay, so for these innumerative problems, though, we have a nice projection of our incidence space as a subset of this product onto our space of parameters. And so now the fibers of this map tell us something about the solutions. So a choice of a point in our parameter space is, for example, a choice of cubic surface like this. And the fiber can identify with a set of solutions to this problem. So the lines actually lie on that cubic surface. Cubic surface. And if there are finitely many solutions for a general instance of your parameters, this restricts to a covering space, some sort of sky open set. And a GAWA group is simply just the monitoring group of that covering space. Sorry, I'm really sorry that I couldn't censor myself on this one, okay? But I often ask myself, given a cubic surface, right? So do you have the coefficients and they line a certain field? And they line a certain field. Can write down, can one write down a polynomial of equal to seven? Of course. The computer can do it for you. No, no, no, no. For every cube. Is there a formula? Yes, there is. I don't know what it is. I've never computed that. But you can compute it. It's just a function of the coefficients. I mean, that's elementary by its a function. That's elementary why. It's a function of the coefficients. It's a polynomial function of the coefficients. Because you can do it with a Groger basis calculation. Will it finish? Well, that's the question. Well, you see, I mean, I know that there is something, but is there something somewhere? This will also only work for OpenSet of the space. Yeah, but all you care about is the OpenSet work smooth. Probably you'll discover that you need to invert the the with rules discriminate and degree free following all the coefficients. Degree free following all the coefficients. So, in the book of Maus 3 underground algebraic geometry, there is a proof of existence of a line which is effective. And it does this, but you need to know one point on the qubit surface. And what if you don't know a point? Well, I think it might actually be the case that there are no lights over the field in that case. Yeah. But there will be a 27. There will be the 2017. Yeah, you need it. By the way, maybe Thomas should finish his talk and we can talk about this. That's why I did say, I apologize. I saw the screen because I was not able to sense unless I'm sure. Sorry, that. So these Galois groups are just monodromy groups. So we said we can restrict it to some covering space on the sun to risky open set. And so now with a choice of base points, so again, a choice of cubic surface wherever this is. So, again, the choice of cubic surface, wherever this is, we're going to allow ourselves to move this space of parameters. So, we're going to twist and mangle this cubic surface. And as we move in this space of parameters, the lines still lie on that surface. They will just move around on the surface as we mangle it around. And if we come back to where we started, the line may be in a different position from where it started. So, if we follow all of these lines for a different loop, for a loop, we get a permutation of the lines that are on the surface. And so, instead of all permutations you get in this way, So instead of all permutations you get in this way is a monodromian group, which for today we'll call the Galois group. So again, the reason we call this a Galois group is if you like Galois Eury in terms of all the algebra, these are irreducible varieties, this is the dominant map, so there's an inclusion of function fields. And this monotony group is isomorphic to the Galois group in the usual sense. We take its normal closure and look at the automorphisms. So these are Galois groups. Alright. So the other big So the other big question is not only what the Galois group is, but why people care about these Galois groups. And it turns out there are several, several reasons. I think these are highly underutilized things that people should think about more. So the big kind of classical reason that people think about calorie groups is solvability by radicals. And you would be surprised to know that this is something that people actually do in applications. So in chemistry, for example, they have these systems of differential equations that model chemical reactions. That model chemical reaction rates and things like this. And often they'll set some of these rate constants equal to zero. They're looking to see what happens in the long term. So now they have systems of differential equations and algebraic equations. And so they'll solve these algebraic equations explicitly in radicals to get back to just a system of differential equations. So sometimes they need to look at these Galois groups and actually say whether or not their Galois group is solvable and how to actually solve these equations. Otherwise, if you don't know the whole Galois group, even just partial Know the whole Galois group, even just partial knowledge you can use to reduce some of the computations. So, if you know that your Galois group has certain structure and might help you find certain factorizations in your problem, and so this is something that can be done numerically now. So there's Maggie Reagan and Tim Duff who have numerical software that'll approximate these Galois groups and say it looks like your equations have some structure to them. They'll help you find this structure and hopefully factor your problem into smaller sub-problems. Problem into smaller sub-problems. So, even just partial knowledge, even just a crude approximation of the Galois group is enough to say, okay, we could do something to break the problem apart and simplify computation. And if all of this isn't enough for you, these are just interesting objects to famous old mathematicians and mathematicians alive today. These are interesting groups, and that's enough for me. So, I want to look at specifically GAO groups of Spark. Look at specifically GAO groups of sparse polynomial systems. So, we'll talk about what these are precisely, I think, on the next slide. These have been an object of focus for the past couple years. So, Alexander Estarov first started looking at these Gallo groups specifically to see which systems are solvable by radicals in 2020. So, Caleb Shevich, Frank, and I, Angel Rodriguez, we wrote some software actually utilizing these Galois in our structure to solve polynomial systems. Structure to solve polynomial systems by factoring or by factoring these problems. Again, utilizing not that we actually know the full Galois group, but just knowing some of the structure of the Galois group to break these problems into smaller pieces. Natalia Rashevich and Michael Burr recently have used these Galois groups to create a sparse trace test, which in some essence is some holy grail of computational geometry to guarantee that you found all solutions to your problem. So, sir. So, these are very, very important problems, and they all revolve around these Galois groups. This is my motivation. I like these objects quite a lot. So, now we can actually get into notation and math and all this fun stuff. Now that we have some motivation for why we want to look at these Galois groups, so we're going to look at sparse polynomial systems. And for me, this means not that I'm restricting the number of monomials or anything like this to appear, but that where Like this to appear without we're choosing exactly which monomials we allow to appear in each of our equations. So if I have a set A and Z to BN, we can look at all polynomials of F, where every monomial x to the A, or X to the alpha, that alpha, that exponent vector, lies in the set A. So we'll say that F in that case has support A. And if you have a collection A1 through AN of these subsets of Z to the N, so we have a square system. So we have a square system, we have n sets of support in Z to the N. So we end up with a square polynomial system of n polynomials and n variables. But we can, we're essentially predetermining which monomials are allowed to appear in each of these supports. So each FI is going to have support AI, and we're pre-determining the set of supports. So you're choosing what monomials are allowed to appear in each of your equations. So, quick easy example, picture kind of a little bit easier to understand. So, we have this B1, B2. I'm using B's for this instead of A's, will be apparent later on. We have these two sets of support in Z2, so we'll have a polynomial system of two equations and two variables. So this B1 has a 0, 0 corresponding to the state constant term. We get 0.12 corresponding to an xy squared. I guess 2, 2 corresponding to an x squared y squared. y squared. And similarly with the second set of supports we get a second equation. So I would be remiss to talk about sparse polynomial systems and not mention the infamous BKK theorem, the famous BKK theorem. So the generic number of solutions to a sparse polynomial system of a given support is determined solely by the polyhedral structure of those supports. So in this previous example, we had those two Those two sets of three points, which would be two triangles. And so the generic number of solutions is determined exactly by those convex halls. So, in particular, there's this notion of a mixed volume. Do you have any convex bodies in Rn, which is some relative measure of size of these convex bodies? And the DKK theorem just states that if you have a polynomial system of support A dot, it has at most mixed volume many smooth isolated solutions in C star VN, and that bound is generic. And that bound is generic with sharp. And so, how to actually compute mixed volume and all these things about mixed volume are sort of irrelevant for today, but it's also a very hard question of how to actually compute these numbers and all these things. So the idea, though, is that we have at least a number. We know the number of solutions on the surface on the Sunservis given. So now back to our picture. We again have these two triangles, like I said, and if you open up your favorite software, Polymake or Macaulay2 or Julia or whatever you have, you can plug in these two sets of supports. You can see that the mixed volume here is six. So we have six smooth isolated zeros for a general choice of coefficients for this system. Great. This is all the background that we really need for sparse systems, is just what they are and that we have a generic number of solutions. That we have a generic number of solutions. And at this point, we have an enumerative problem. We have that framework that we can actually define a Galois group at this point. Because we have a space of parameters, which is just our space of systems. You can think of this as an affine space where the coordinates are just the coefficients of each of your polynomials, corresponding to each monomial. We have the solution space of C star to the end. We have our incidence variety, whole pairs of systems and the solution. So this projects down. So this projects down to our space of parameters. The question time. Yes. How difficult is it to compute, so to say, the discriminant of this? I mean, you'd say for generic coefficients, you have this many solutions, and where not? For this theorem specifically, there is a result. So some people call this Ernstein's second theorem. Alright, right. There's a refined version of this theorem which specifically tells you when you have less than mixed volume any solutions in C star of the M. Many solutions in C Star VM. And this is just when one of your facial resultants vanishes. What that means specifically, we'll sweep under the road for now. But there is an explicit description of when there are less than mixed volume mass solutions. But are these explicit formulas that you can just easily work out, or do you have to approach them? You have to compute them. And they are not always easy to compute. And that's actually something that will come up later on. There has been a whole industry of people who have formulas for different. Up actually get formulas for different results. And so there are software packages, for example, Macaulay 2, that will try to compute them for you, but whether or not they terminate in the life or the heat death of the universe, that's the question. But sometimes they have huge numbers of terms. Of course, yeah, sure. So you may not want to actually compute them. But the fact that they won't fit on your computer. Well, most things you compute don't fit on your computer. It's really interesting. Hmm. Surely I can just plug in zero and check if there are zero. Say that again? So that surely I can just plug in zeros uh to check whether there's a solution at the origins. At the origins, sure, but we were specifically at C start at the end. We're ignoring there's a convival number of directions at infinity. Finally may matter for each given set of supports. Okay, so we again have this incidence corresponding. We again have this incidence correspondence. We can project to our set of parameters. And by the BKK theorem, this is generically mixed volume to one. This is the covering space, hurrah. And so now we can define our Galois group. We have a set of supports. We have this family of systems. And this GA dot is the monodromic group of this family of sparse polymer systems of support A dot. So we again go back to our example. So, as we saw in Mugh's talk, we can do a lot of numerical homotopic continuation very fast and efficiently with various softwares. So, some of my favorite softwares are numerical algebraic geometry from Macaulay 2, Bertini, homotopy continuation, not JL. So, if you have other softwares that I have not listed, I I apologize. Okay, so I like Macaulay too. We can do this very fast. Very fast. So, this B is our set of supports that we are looking at as our example. I've represented. We haven't seen NAMA 4.2 yet. Yeah, no, I'm very happy with this. But I've represented our set of supports by a list of matrices, where the columns of the matrices are the actual points. In the Emacs interface, of course. That's the best way. We have this, again, our 0.00, 0.12, and our 0.22. 0.12 and our 0.22, and we have our second set of support over there. So I have some code that will create this monodromy object which contains some information about the system. For example, it contains a base point. So again, this is some choice of coefficients that I have not specified and did it randomly because I didn't specify anything. But it chooses some general coefficients. It computes the fibers, but computes the solutions. And it says that it computed six solutions. And it says that it computed six solutions for our system, so it has mixed volume many solutions. And then you can tell it: okay, let's walk in our space of parameters and actually gather 10 permutations and see what it spits off. Okay. So it walked around and it gathered these 10 permutations pretty quickly. And this is where we start to run into some problems. So numerically, this could be incorrect. So these numuties are. Could be incorrect. So these numerical path-tracking algorithms are fairly reliable, but they are not a proof. They're going to be path-tracking, things go to infinity. There's a lot of problems that come up with numerical homotopy continuation. And so we take this as an approximation of the Galois group, essentially. Another big issue is that there is no stopping criteria. We can generate elements of this Galo group in this way if we trust the software, but there's no guarantee that we've found everything in the Galo. So, the best thing you can do at this point is say, okay, I have generators. I can plug this in the gap for whatever software you want to use and ask it, you know, what this group is. In this case, it's fairly simple. If you compute the size, it's 720, which is 6 factorial. So, in this case, the Galois group is just the full symmetric group. And also, just eyeball the replications. Yes. Two transitive and prime cycle. In this case, sure, but you're not always so lucky to get generators that you can eyeball. You get an eyeball. Okay, so we'll come back to computation in a little bit, but the idea remains that for a lot of these problems that are at least small, you can do these computations pretty quick and easily. But for large-scale computations, again, you have to trust that the software is doing what you expect it to do, that there aren't path jumpings and all these other things. Trusting the software is sometimes an issue. Is sometimes an issue. And again, not having a stopping criteria is also an issue, especially when your Galois group is smaller. Can you at least sort of a posterior certify the multi-p continuations or something like that? So there are certified path-tracking algorithms that at least guarantee that there aren't a path jumping and that you can show that nothing is not in affinity. So you can at least verify that some of these permutations are in the curve. That some of these permutations are in the Galois. But again, that still doesn't give you a stopping criterion. So, unless you know an upper bound for the Galois group, you have no way of knowing it. Some of these issues can be remedied. Okay. So, there are two very, very, very open problems with this now. The first is the inverse Galois problem, sort of a famous problem for Galois groups over Q. And so now we can phrase this. Q. And so now we can phrase the same problem for sparse polynomial systems, just asking which groups actually appear as the graph of a sparse system. And there is actually no good conjecture for this result. So this is a very, very open problem. There's been a lot of computations and some guesses. I think every guess that we've seen so far has been proven incorrectly. The other open problem is, of course, if you can't summarize. Open problems, of course, if you can't summon a subset. Really? But is it? Wow. These are some groups that are known not to occur. Yes. So there are structures that we'll see in a little bit that prohibit which groups appear as the calog group. But the other open problem is, of course, now if someone hands you a set of supports, a dot, how can you actually determine what this gal log is in some computable fashion? How can we actually explicitly input Gala or input? Input or input supports an output Galois group in some reliable way. So there has been some progress in this direction at least. So Alexander Ostrov was one of the first people to look at these Galois groups and he determined explicitly which supports a dot, or which supports a dot. The Galois group is the actual symmetric group. So there's an explicit description of these groups or of these sets of supports, but not much is known otherwise. So as per of the result, So, Esperov's result is kind of nice. So, he demonstrates there's two special classes of supports for which these systems are structured. And the idea is that these are the only structures that sort of prohibit or restrict your Galois group. And these structures are actually very familiar to people. So, the first one is this lacunary structure. This will be kind of our focus as we move forward. But a lacunary system is one that has been precomposed with some monomial map. And so, the canonical example. Math. And so the canonical example to think of is back when you were in an algebra class in high school. You learned how to solve quadratic equations. At some point, they gave you a sextic. You said, oh, I don't know how to solve a sextic polynomial. And you stared at this for a while. You realize, okay, this is not just a general sextic. This is some polynomial that had some structure to it. And a quadratic polynomial in x cubed. And you said, okay, it's a quadratic polynomial in x cubed. You can solve this by my quadratic formula. This is by applying the quadratic formula and then extracting this. So these lacunary systems are generalizations of this idea. The second class is also familiar to people, these triangular systems. These are systems which have a proper subsystem. And so if these were linear systems, for example, the matrix representing this would be a block triangular matrix. And so again, if you wanted to solve this, well, you'd say, okay, you can solve this, just g is equal to zero. g is equal to zero, and you can substitute the solutions of that into f of x, y equal to zero. And so in both of these cases, the problem factors in some way. It's sort of obvious by looking at how you would solve these equations that these problems factor. And by virtue of that, that these problems factor, that actually restricts the Galois group. That restricts the Galois group. So these automatically, the Galois group is smaller than the symmetric group, and Esgrov's result is that. And Esgrov's result is that these are the only structures that restrict the Galois group. So if you have. So Esgrov's result is that if you have a set of structures which is not lacunary and not triangular, then your Galois group is the symmetric group. So in other words, these are sort of the two main structures. So there is a converse to this theorem as well, but there are some trivial cases that I didn't want to write out, so we won't record those. So, there is Esperow's proof is it follows a very, very standard argument. If you want to show that a Galois group is a symmetric group, this is the way that 90% of his arguments go. So you look at the discriminant, and you hope and you pray that your discriminant is nice, and that a general point of this discriminant has a single zero of multiplicity two. And then as you perturb that system, that point of multiplicity two splits into two points, and then a small lump around the discriminant just should permute these two points. Sorry, you have always two polynomials. No, so for example, we just have two, but you can have arbitrary size square systems. And this is general statement. Yes, yes. Typical that, yeah, most discriminants, if discriminant smooth, you have a single, just a single point of multiplicity, too. And so this is sort of a hope and a prayer that you're saying. Sort of a hope and a prayer that your system is nice and that you do have just a single point of multiplicity two for a general point of your discriminant. Yeah, and if that's not the case, then you need to modify this argument somehow. But yeah, so you would hope that a small run the discriminant lives to just a simple permutation in your Galois group. And then there are standard arguments to showing that these Galois groups are too transitive. And that alone guarantees that your Galois group is the symmetric group. I mean, I should say, I mean, so Alex. I should say, I mean, so Alex, his previous work had studied discriminants as far as systems. And his argument that it's too transitive is incredibly clever. I mean, I think it's really the most interesting in his paper. That would be my question. What's the idea? Why is it too transitious? It's somewhat complicated. But it's fairly clever. Sort of the general idea. But sort of the general idea is that you have this projection map from your incidence fits, and so transitivity properties of your Galois group are encoded in the fiber products of that map itself. So you look at certain sub-varieties, and if they're irreducible, then you get these transitivity properties from that. His argument is a little different, but his. Well, his argument is that, but showing that these sub-varieties are irreducible. Yeah. Because there's a countable number of things he has to deal with. That's a pretty cloud. Cloud. Okay, so SPRO's results. It's great. It tells us what happens when we have supports that are not structured essentially. It's a very open question again to determine what these Gallo groups are, because we do not know what happens in the case that our supports are structured. They're gluclary or triangular. It's Pandora's box as to what happens. Sorry, sorry. One more question. What hypothesis do you use for to to show it's a tech transitive? What what do you use? What are the hypothesis you need to show it's just transitive? The hypothesis and the theorem. Well, so the hypothesis, well, those more pertain to the discriminant. Yeah. Two transitivity, I don't know if... Oh, I guess that's the titanitivity. It has to take up. Yes, because those are. You have to read his paper. But for today, we want to look at what happens when our supports eta are structured, specifically when they're in the cooler. Specifically, when they're lacuna. So, we're going to look again at this sort of like this sextic that's really a quadratic index cube, like a generalization of this and what their GAL groups look like. Just to recap for these lacunary structures, so if we have this out of support P dot, which is lacunary, every one of these systems is some other system precomposed with the monomial map. And the system G is really just a simpler system with different monomials and maybe the same coefficients. Maybe the same coefficients. So again, if you have that sextic, which is really a quadratic in x cubed, the system G is this quadratic, and this is the cup that goes from x to x cubed. And so this polynomial G is again a smaller polynomial system with a different support. We'll call this the reduced support. This is sort of this simplified version of your system. And these are not unique. This is the system that you're pre-composing, essentially. Essentially. Then, this monomial map is actually a group homomorphism. Monomials are multiplicative, they're characters in the C star. This monomial map is a map whose coordinate functions are monomials. So this is a group homomorphism from C star to the end to C star to the end. And it has a kernel. So this kernel, in our case, will be a finite group, and it actually acts on the zeros. So again, if we're thinking of the sextic, which has a quadratic and x cubed. Quadratic and x cubed. Then the cube roots of unity act by dismultiplication. So just take any solution, multiply it by the cube root of unity, you have another solution. So now we have two groups that act on the zeros. We have the Galois group and we have this kernel. And so we can look at the orbits of this kernel acting on these zeros. And we get a partition. So now we can partition our zeros into these orbits, which Orbits which are just, you know, we can partition our zeros into these k orbits. Leave that enough for now. The number of these orbits is this mixed volume of our reduced support. So this is again like if we had our sec stick, which is a quadratic in x cubed, we would solve this quadratic first. We would have these two sort of initial states. And then we would extract cube roots, and that would give us these blocks, or these forms. Those look like force roots. Yeah, I should have drawn the picture to be. Yeah, I should have drawn the picture to be. Yeah. And so what's really nice about this group K is right now we're thinking about this acting locally on the zeros of the system map, but they actually act globally. So they act on this incident space as deck transformations. They preserve the fibers of this map. And it's a nice result that all Galois actions can mutate into deck transformation actions. And so as a result, the Galois group actions. And so, as a result, the Gallo group actually also preserves this partition. And so, that is some constraints right there, flat out, is that the Gallo group has to be imprimitive because it preserves this non-trivial partition. And so, we'll call these, instead of calling these orbits every time, we'll call them blocks just because we have a lot of groups floating around, and orbits is a little bit of dangerous. So, we have blocks of imprimativity for our Galois group. So, we have two groups floating around right now. We have our Galois group. Groups going around right now. We have our Galois group and we have this group K. We have a third group that we'll introduce real quick. This is the wreath product. So we have sort of the largest group that we can think of that would preserve this partition and preserve the structure of our problem, which would be this wreath product, which are permutations that we allow to permute the blocks however you wish. And then in each of these blocks, we'll allow an action by some element of k. So we'll allow movement in the blocks, allow the blocks to move. And he says again that this is sort of the largest possible group that preserves the structure in this case. It turns out the Galois group is a subgroup of this wreath product. And so you should expect that the Galois group is equal to this wreath product. These Galois groups should be as large as possible as the problem permits. This is the next largest thing. And it turns out it's not always equal to the wreath product. So even with this lacunary structure, there can be sort of more things problem. More things in the problem, there are other structures buried inside. Well, I mean, your lacunary structure wasn't unique. You could select a sub-optimal lacunary structure. That is true. But you select the optimal one. Yeah. Even if you select the optimal one, things can still go wrong. So, there we go. Yeah, so you're assuming that whatever the other one is, that you're composing with. Is if you're composing it, it's either triangular or composer. We will make that assumption later on, but that's not necessary in general. But I wonder, though, but even with that assumption, it's not always the case that it is. And so this is an example of exactly what you just described. So we can take our set of supports B that we were looking at before, and we're going to just stretch it in the first coordinate by a factor of 2. So this has the effect of taking any So this has the effect of taking any system of support E dot and precomposing it with this monomial map xy versus x squared y. And so we have this new set of supports a dot. So we again have this kernel k, which is the kernel of this monomial map, just 1, 1, negative 1, 1. And so this partitions our zeros into six orbits of size 2. Yeah, and so we can try to see what the Galois rate here is. So we have our pseudo supports A. We've just scaled that first coordinate by 2. For reasons that I'll explain later, I'm going to, I've already chosen the base point, and so I'm going to just load in this information. We have these 12 zeros. Let me check in this. So we have these 12 zeros, and I wish this printed nicer. You can see that these zeros. You can see that these zeros are partitioned in this nice way. So these first two zeros differ in that first coordinate by that minus sign. So very conveniently, all of these zeros are ordered in these blocks. First two, the first coordinate are negative. Second two, again, the first coordinates are negative of one another, and so on. Have this implementary structure. So we can tell it to, again, walk in the space. So we can tell it to, again, walk in the space of parameters, collect some permutations, and now we have a group. And now it's much harder to say what this is, because there are not obvious, I think. So again, you can plug this into GAP and ask it, what is this group? It'll tell you that this group is the wreath product that you would expect, intersected with the alternating group A12. The problem is that's not a very insightful view of this problem. View of this problem, and we'll get into why that is in a little bit. But I also wonder about the other question that was made earlier as to what extent you can trust your software to that crown and the whole group. Right. That is the problem with these computations, and yes, that is a problem. If you do this for a monogramy basis, then you would be good at that. Correct, but that is extremely difficult again because getting a handle on what these discriminants are and Discriminants are, and that can be very difficult as well. Right. And so at some point, things look to stabilize, and generally, we cannot take that as a risk. I mean, it's possible to compute a monogramy basis. And in fact, it's well adapted to the techniques they have in numerical algebraic geometry. However, it's actually not implemented, even though we wrote a paper about that if they. So, can you just ask Get to also, I mean, now you've Ask GEP to also, I mean, now you've listed ten pedipatians or eleven. Um, can you ask GEP to list like a minimal set that terminality-wise that generates yes, and so that is actually a big part of the computation that we did for some of the rest of this project. Because then you only have to like verify these home patterns, actually, you write them up and then you build them. Well, you still have a stopping issue that you might not know that this is your full group. But there is a way to compute a set of representations. There is a way to compute a set of representatives of points you need to compute loops around. I see. It's a witness set. Oh, okay. We don't know for sure that this isn't generating set, but there are ways that we could guarantee generating set. And is this a peak? For something of this size, yes. Yeah. I mean, yeah. It certainly works for the 27 lines of the cubic surface, because that was a demonstration. It certainly worked about the lines? It certainly works about the lights. It works. I can tell you about some of the things here. Maybe you should light it down the screen. Thomas, one more question about your code. Is termination decided by stability of the group that the loops generate? As a heuristic, yes. And how many loops you check before you decide you need to solve? So, this is a very fun question, and it depends on your problem, it depends on a lot of It depends on a lot of factors. So, this is something that Taylor might talk about a little bit: probabilistically, like how many loops do you need to actually generate the Galois group. And it turns out, very often, you do not need loops. So, in this case, we just took 10. The group is size 23,000. So, you get a lot of information from very few permutations. That's a little specific. So, for for these things, the loops you compute are actually fairly general. In other settings, it's hard to get hard to compute general loops. To get hard to compute general flows. Right. More than expected. Okay, so we can ask it what the size of the group it generated was. It was 23,000. The expected wreath product had size 46,000. So we have this index to, this is a proper subgroup with a wreath product. And so now we're kind of stuck at... But you're one in a thousand that you made a mistake. Yes, or there's a small chance that we missed something. That's being one in a thousand. One in one thousand twenty-four. 1024. But okay, so yeah, we have a proper subgroup of this wreath product. The wreath product is sort of what we expected it to be, but again, there is some additional structure restricting what the Galois group is. So the question is, what is the structure? How do we determine that it exists? And if it exists, what actually is the Galax group? There's a lot of questions answered. And so this is where Frank and I had a small REU project with some undergraduates at Texas AM, where we had, I would say, Where we had, I would say, a medium-sized computation that we ran over the course of the summer with them. So we generated, I want to say, on the order of 100,000 reclinerary systems like this. And we tried to look for systems that had this additional structure, that their Gala group was a proper subgroup of read product. And of those roughly 100,000 systems, about 1,500 of them had this structure. So we at least have some small database of these systems that we can look through. We can plug their Galois groups in the gap. We can ask it what is the minimal generating system. app, we can ask it what is the minimal generating set, and we can look at these groups kind of one by one. So with that we were able to at least make some conjecture as to what these groups are. And as it turns out as you write a thesis, things start to come together and then you can prove results. And so while I was writing my thesis, a proof of this came about. So now the question is, how do we do this? So we want to isolate this lacunary structure, like you were saying. We don't want to worry about triangularity at all. So these At all. So these purely lacunary systems are ones that are just lacunary and not triangular. Don't want any interaction here. And so equivalently, this B dot is lacunary if there's some reduced support B dot, which the algorithm calls the symmetric group. And so as a running example we've just seen a number of times, the reduced support B dot had the symmetric group. So this guy is purely lacunary. For these purely lacunary systems, Purely lacunary systems, there is actually just a nice modification of this standard argument that we talked about. So we again can look and see what happens as we take a small loop around the discriminant, see if we can say something meaningful. And then we need some analog of two transitivity because our Galois groups are incriminative. They are not too transitive. These are contradictory properties. So we need some analog. And then once we have these properties, we need to ask, what does this actually give us? So there's some big question marks right now. How do we adapt? Big question marks right now. How do we adapt the standard argument to this purely lutinary set? So, the first bit is probably the easiest bit. The small loop around the discriminant. This is something that we can do, again, computationally. So, for our large database of systems, we wrote some code that would help us find a small loop around the discriminant. So, this is why I loaded in some information before, because I also have the data of some path that includes. The data of some path that encloses some component of the discriminant. So we have these sets of points here that just make a triangular path that encloses the discriminant. And we can tell Macaulay 2 to follow this path and to see what permutation it spits out. See, we no longer get one simple permutation, we now get these two permutations. If you remember, our zeros. Okay, well, that's not helpful. Okay, well, that's not helpful. Well, then they came in pairs: one and two, and three and four were pairing. Right. So remember, the first two were a block, and the second two were a block. So this one, four, two, three is somehow permuting these two blocks and nothing else. So is this a statement about your particular example or a statement about purely lacunary systems? Because there do exist simple transpositions of reef block blocks. Yes, but those simple transpositions belong in individual blocks. Right, right, okay. Right, right, okay. So this is a discriminant on your reduced system. Yes. A loop around the discriminant on your reduced system. And so again, a loop around this component of the discriminant, I should say, is just some simple permutation of these blocks. So this is something that is not too hard to prove. So if you have a purely lacunary set of supports and you have this reduced support B dot, if you take a Dot, if you take a loop around this reduced discriminant, it induces just a simple permutation of these blocks like this. And so the only caveat is that you might have like x or something here, and so to have this be an actual nice transposition like this, you maybe need to reorder your zeros, but that's okay. Okay, and again, the idea is now instead of having just this one zero multiplicity two, you have multiple zeros of multiplicity two. Multiple zeros and multiplicity two, but they all belong to sort of these pair of blocks. So they just swap. So this is again sort of the easier part of this argument. It's just understanding what happens as you go around the discriminant. The harder part again is this analog of two transitivity, just asking what is the right analog of transitivity for imprimitive groups. And so I've looked around for this quite a bit to see if there's something in the literature that people have given this a name to. Listening to, I have found nothing. So we've called this block transitivity. So now if you have an imprimitive group acting on a set S, so this imprimitive again, meaning that we have some partition already given to us, that this group is block transitive, if for any set of k distinct elements, or k block transitive, if for any k distinct elements from distinct blocks, and any other set of k distinct elements from distinct blocks, there is something that takes the s's to the t's. So I have two block transit in this case. So two block transit here in this case, we have these two points S1, S2 indistinct blocks, T1, T2 indistinct blocks. And so there should be some element that maps these S's to the TC. So actually preserving the labeling? Yeah. So GI, or SI maps to TI. And so the only difference between this and standard two transitivity is this belonging to distinct blocks. So normal two transitivity, which be there's S1. Sensitivity, which would be there's S1, S2, T1, T2 that are distinct, mapping the Si's to the Ti's. The only distinction now is that we did all the logo distinct blocks. Definition? And you are telling me that this definition had not been made before. I have looked around. I can't find it. Yes, that's careful. Be careful. Yeah, that's interesting. That's interesting. Because I mean, it's like totally basic. Yeah, well, the problem is recent research, like the last 70 years in permutation groups, is not interested in finding permutation groups. Everything's known. And you have to dig through old books and stuff. So, if you know where to find this, let me know. No, no, no, no. I know much less than you do about this. I mean, I just know, oh, yeah. You can ask really knowledgeable group theorists who are like what is known or what people think about in terms of permutation groups because they're flaying other fish these days for the last several generations. So I don't know how I came across, but I met this 100% basic. Yeah, basically I agree with Carl. This seems like something that should be defined somewhere. Some fit. Yeah. Yeah, but I'm an exclusive dead. You should ask ChatGPT. So, as you would hope and pray, it turns out that if you have a purely lacunary set of supports, it is this two-block transitive, so it is this natural analog of two-transitivity, but for these imprimative groups. And so, again, the proof of this works out very much the same way as the standard argument for two-transitivity. We can look at fiber powers of this amount. You look at all pairs of solutions, and if you look at certain sub-varieties, And if you look at certain sub-varieties, they're irreducible, regal transit block-transitive, and that's it. And it turns out, it ends up being very simple in this case. The sub-variety that you look at is actually a vector bundle over C star squared, and our C star over the N squared. You get this two-block transitivity for free. So, ends up being nice and easy. And so now we have, again, our analog, we have this block transposition, we have this two-block transitivity. We have this two-block transitivity, and so without the block busyness, this just gave us the symmetric group. There's now this question of what does this give us in the Galois? We have some information about what's actually in there. The question is, what do we do? So now we consider this wreath product as a semi-direct product real quick. So we think about this as two poles K1 through Km of how we're letting K act in each of these blocks. And we have this permutation sigma, which permutes the blocks. Sigma, which permutes the blocks. So we can represent any element of this wreath product as an element of the semi-direct product in this way. And we're going to define distant map from this wreath product into K by just taking the product of all the K's. So because K is this nice abelian group, it's just roots of unity acting by multiplication. This is a well-defined map. It's a group of morphism, gara. And the Gao group, parishori, any group which. Any group which is two-block transitive and has a transposition of blocks like this necessarily contains the kernel of this map. So, this is the analog of the symmetric group, is the kernel of this kind of odd map. And this is where I see some confused looks, which is good. You should be confused because everything so far has been very geometric. And now we've just defined this algebraic map. We said, okay, there's this kernel. It's what role does this kernel play geometrically? Does this kernel play geometrically? What is happening? And it's not immediately clear how this comes into play. And we'll get into that. But sort of the first result is now that if we have a purely Lacunary set of support, the Galois group contains the kernel of this group homomorphism. And so in particular, you can identify the Galois group with the pre-image of some subgroup of K and the pre-image of this map sigma. This kernel is related to the normal. Well, this kernel is related to the norm math kind of the original base building coefficients. You're getting, you're essentially taking the product of all the roots, and that's a constant coefficient as you hear one. Which is relevant again later. Okay, so we at least have some structure theorem now that tells us the types of groups that we hear as Galois groups are purely lacunary systems, but this opens more questions as well. So, the first part is related again to this inverse Galois problem. Okay, we have this structure theorem that tells us these groups that appear. Do all of them actually appear? Oh, you can see it? Okay, well, if you can read it, even though it's grayed out, we don't actually know, but it seems to be known. So, based off this computation of these undergraduates, every time we found anything with this structure, there is some visibility. Structure, there is some divisibility condition that seems to hold. And so we don't understand where exactly this divisibility comes from. But this seems to be related to, again, facial resultance and some combinatorics of polytopes. And it's something that it's not entirely obvious why this seems to hold. This could be field theory. Could be, but based on this normal notion. It does look a little bit like that. So MVV dot is the number of solutions. So, yeah, that's something that I think should be easy if you look at it the right way, but I have not found the right way to look at it. The second thing is, of course, now if you hand someone a set of supports, can you actually determine this subgroup H? And the answer is yes, but it is not a simple task. So this algebraic maps. This algebraic map sigma that we defined in the last slide can be realized geometrically, and the geometric realization of this is a very left turn from any description that we've talked about currently. So there are many, many views of this Galois group. We've talked about this monodromey. We said that these are Galois groups, so some field extensions somewhere. Another view of a Galois group is by depth transformations. So this is a common mistake that people make. They say, okay, if we Make, they say, okay, if we have this monodromy group, some people conflate that with the group of deck transformations of this variety. And so the GAO group and the monodromy group, I'm sorry, monodromy group is not always equal to the group of deck transformations, very rarely is equal, but the Galois group still can be written as the group of deck transformations of some variety. This is where we change views a little bit. We're going to define some variety, and the claim is going to be. Variety and the claim is going to be that the deck transformations of this variety are the calibrate. So we can look at this variety here, which I would consider the top fiber power. So this is all pairs of system and all mixed volume many solutions of it. And so this variety has many components. Some of them don't map dominantly to our space of parameters. Some of them are contained in the diagonal, where some of these xi's may be equal to one another. And so we'll let this j dot be any component you want that that maps. Any component you want, but that maps dominantly and is not contained in this diagram. So any two of these components are isomorphic. Pick your favorite one. And the claim is that, okay, this maps dominantly to our space parameters. The claim is that the group of deck transformations of this variety is actually equal to the Catalog group. And so how this works is a little bit funny as well. So the group of deck transformations of this variety. Deck transmissions of this variety. It's also the function field of that variety is the normal closure. Right. So there's really outsourcing in the background here that I am sweeping under the brush. But all the deck transformations of this variety, JA dot, are actually given as permutations of these mixed volume ID solutions. So if you choose some base point and you look at the group of deck transformations, it's just a permutation group of those zeros. And so as a permutation group of the zeros of some fixed base point, Zeros of some fixed base point, then these groups are equal. And the proof is simply that these both act simply transitively on those zeros. Okay, so this is the view that we need to actually understand this geometric realization of that algebraic map that we looked at. And it's still a little bit odd when you look at this. So, if we have our chosen base point, we know that the zeros. We know that the zeros are partitioned into these blocks. We're going to define this map from this JA dot by simply taking f goes to F, and we're going to take a product of only some of the zeros. We're going to take a product of one zero from each block. So you can index maybe the first zero that you see that belongs to one of these blocks and just take the product of the first thing that you see from each block. So only some of the zeros you want. The only sum of the zeros you want to look at a product of. And ignoring this proposition for a second, the claim is that this group H is the group of deck transformations of the image of that map. So there is some geometric way to realize this. And I should have drawn a picture. But up top, we have this JA dot. We have the image of this pie map in the middle. We have our parameter space at the bottom. So the whole group of deck transformations is the Galois group. The Galois group. This proposition says that this sort of intermediate group is the kernel of the algebraic map, and then by taking sort of like a geometric quotient here, this bottom part has to be a slight group H as deck transformations. So that's at least something. We have some description of what this group H is. Well, there's, again, this question: if you want to do this computationally, how do we do this now? We have this map, we've got this image, how do we find this image? And it turns out, Do we find this image? And it turns out this image of pi is actually a very simple variety to define. It's defined, if we ignore everything else, by just a binomial equation. So if we have our purely lacunary set of supports, there's this monomial math phi and this reduced system G. So that's the same phi here. And this P of F is actually going to be the product of all the zeros of your reduced system. So sort of an odd. So, sort of an odd binomial system of equations. But at the end of the day, we have equations. So, things that we can write down explicitly. The hard part of actually writing these down is writing this P of F. And so there's a paper of Carlos D'Andrea that they actually gave an explicit description of what this P of F is in terms of a product of powers of facial resultants, which again can be incredibly difficult to compute. And so, if you have a small enough system, this is something that we can do explicitly. This is something that we can do explicitly. And again, this is also a component of the variety cut out by these equations. There may be several. So for our running example now, I've labeled each of these points now with the Ci corresponding to that coefficient. And so now the image of pi is now some irreducible component that maps dominantly to our space of parameters, defined by these equations. And you can see there's some funny. And you can see there's some funny business, and this funny business is exactly why the Galogroup is a proper subgroup of the wreath product. So, in particular, there are two components here. They're both defined by just linear equations. And so, you can take this image of pi to be either one. It turns out if you chose a different JA dot, you would end up with a different component down here. And so, you can choose either of these components to look at and say, okay, well, now the group of, or sorry, the group of roots of unity. That group of roots of unity k acts on this variety, actually doesn't. That's the point. Is that the group K of roots of unity acts on this variety, but the only elements that preserve that component are just the trivial identity elements. So in other words, that negative 1, 1 does not act on, it does not preserve this variety. And so our group H in this case is just a trivial group. So, our group H in this case is just a trivial group. So, the pullback of this, it's just that kernel, which has index 2 in that group. So, that's something you can actually do computationally. You can write out these equations. The only hard part at the end is computing that P of F. And then once you have that P of F, you have these binomial equations, which Macaulay 2 or your favorite software can factor with the piece. So, we can look at one last modification of this problem. If instead of scaling by 2, we scale by 4. Instead of scaling by 2, we scaled by 3 instead. So we have this new support. Then, okay, we'll call it a dot again. So now we've scaled everything by 3 instead of by 2. Our monomial map is now x equals to x cubed. y stays the same. So our image of pi would be defined by these equations now. So the same thing, except now we have this x cubed instead of x squared. And this only has one component that maps dominantly to our space of parameters. So it's irreducible. And that whole group K, that really is just these cube roots of unity. Really, just these cube roots of unity acts on this variety, preserves that variety. And so, in that case, the Galibran is just the full p product that you would expect. You can see the hidden structure that's really happening is just some sort of alignment here with this P of F, so the product of the zeros of the reduced system, and that monomial map. So, that's kind of this additional structure. So, some alignment somewhere. Yeah, because is this because your support A1 lies in 2Z? Support A1 lies in 2z squared? Okay, they're all even co-op. It's different than that. It's much more subtle. So in this case, the monomial map makes things a little bit easier to see, but yeah, yeah. Okay, so at our example here, this is the full wreath product, and you can see there's not alignment. And so, in general, you would expect that there's not this alignment, and you should get the full wreath product for most, whatever, most. Product for most, whatever most means here, for most sparse systems. Okay, so there's lingering questions though. So, the whole idea of looking at these Gal groups again was to reduce computation somewhere. There's this question of, well, we now understand there's some additional structure. Can we take advantage of this? And I don't know. I would like to be able to. I'd like to be able to solve systems faster using this structure if possible. Another very good question is: what is known about the triangular case? What is known about the triangular case? And very, very, very little is known. So the triangular case can be a lot more complicated. These structures can kind of compound themselves. If you say, I want this to be triangular but not lacunary, you can still have a subsystem and a subsystem, or two subsystems which intersect in some of your ways. Even just saying triangular but not lacunary is very complicated. So during this RU that we did with these undergraduates, we looked at triangular systems, which are sort of like the minimal. Which are sort of like the minimal triangular ones. And in that case, the Galois group ended up either being some expected wreath product or a product of groups. And so there is some hope that there's something that can be said in the triangular case, but currently very, very little is known. And then a very large, hard question is: can anything be said in general about these smart systems? And the answer is a big question mark. But computation was able to help us. But computation was able to help us in these small cases, and there's hope that we can compute some large database of these sparse systems to be able to analyze these more generally and say what happens. Two last seconds. There's a Macaulay 2 workshop. If you like Macaulay 2, if you're a Macaulay 2 user, that'll be in Madison at the end of June next year. And then following that workshop immediately after, the week after, is Cyan AG, also in Madison. So if you like nice weather in Madison in the summer, In the summer. There's two conferences that would be nice to attend. Thank you.