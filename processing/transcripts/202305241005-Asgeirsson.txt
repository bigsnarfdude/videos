Okay, so the next talk will be by Dago Arsgeson and he will talk about discrete condensed sets. Thanks, John, for the introduction and to all the organizers for inviting me to give a talk. So I'm a PhD student in Copenhagen, where my advisor is Dustin Clausen. And well I started out Well, I started out just doing informal condensed mathematics until last year sometime, around the time when LTE was finishing up, I got into this formalization business and I started building on the code from LTE and trying to formalize solid albino groups. And it's not important what that is for this talk, but I'll try to prove theorems about them. to prove theorems about them it i quickly i was quickly led into thinking more deeply about what like a discrete condensed set is um so oh why doesn't do i have to use a remote click on something like on the Okay. Is it possible that you have a pop-up in the background? It works now. Okay. So here's a question for you that I hope to answer. So if you know condensed mathematics, it might seem quite easy or trivial. Quite easy or trivial, but I hope my talk will show you that it's really not. And if you don't know what Akanda said is, then I will introduce the basics in just a moment. And until then, you can think about what discreteness means in topological spaces categorically. So yeah, I'll start by just recalling some few basics about A few basics about condensed sets, and then I will try to answer my question in more detail: what discreetness means, namely that there are at least three answers to the question that are reasonable and I've now formalized them all and isomorphisms between them. And I'll end by talking about some challenges I encountered when formalizing this. So, a condensed set is a sheaf on a certain set of profile and sets. So, now we know what profile sets are. In MATLAB, they are totally disconnected compact household spaces, which is equivalent to what Sam said, that they're compact and totally separated. And so the site of profile at Z has covers As covers the like finite, so jointly subjective finite families of maps. So C from a site is like a very general notion, but in this case we have this much more concrete description, which is basically saying that it preserves it's a pre-shield that preserves finite products. That preserves finite products, like this is the product in the opposite category. And then this last condition, which says that given a subjection of profile sets, the induced map on after taking X is injective and lands inside the equalizer of these two projections. So P1 and P2 are like. And these two are like the projections of the final product. So in LTE, it's proved that this is like these two descriptions are crypto. Like these two descriptions are equivalent, like the general notion of a sheaf and this more concrete thing. And so condensed mathematics is supposed to be a generalization of topology. And the functor from sorry, so given a topological space, we can give it a condensed structure by saying that the S-valued points are the continuous maps from S. Continuous maps from s into x. And we get this functor. And I say generalization, so this functor better be fully faithful, right? But it's not really. It is when you restrict to a certain nice category of topological spaces. And you also have to prove that this is actually a sheaf, and the only thing that's a little hard is like this. Hard is like this equalizer condition. I thought it wasn't screwy, Jeff. Am I wrong? Well, if x isn't t0 or something, it's a universe. Yeah, like okay, so this is profile at u, and this is type u plus one. Okay. Okay, and this uh this functor becomes fully faithful when you slick to uh compactly generate. When you stick to compactly generated topological spaces. And this functor is also in LTE, although only from like top U, but it also exists for top U plus one. Okay, so like we can model the underlying set of our condensed set. set of a condensed set on this. So we take, we call the underlying set just X evaluated at a point. And that's like what you get if you take continuous maps from a point to a topological space, you get the underlying set basically. And importantly we get this forgetful contour which is just evaluation at a point. So that's all the condensed mathematics we need. Mathematics, we need. And now let's talk about what discreteness is supposed to mean. So, first, some motivation. I haven't said what discrete means yet, but it has this kind of weird, nice characterization that it satisfies this co-limit formula. So, as we saw, a profane instead is supposed to be a finite cofin. Be a finite conflict limit of finite sets. And our condensed set is discrete, whatever that means, if and only if the induced map from the co-limit, like the corresponding co-limit to x of t is an isomorphism. And this characterization can be used to prove. Characterization can be used to prove certain things, like extending the NÃ¼rbling theorem to condensed abelian groups, saying that like continuous maps from a profile in Z to a discrete, oh, this is supposed to be Z, sorry, to Z is a free abelian group. And like a generalization of this, just so I mentioned cohomology. Just so I mentioned cohomology can be used to calculate certain condensed cohomology group. Three, which is T discrete now, is that what you have? T is a profinite axis condenser. So you're calculating condensed cohomology groups of what? No, this here uh T is uh pro finite, but you can also regard it as a I mean here it's regarded as a condensed set. I see, so every pro finite set is discrete. Profinite set is discrete. We could get A is a discrete double group and T is a profinite set. A is discretely set. Yeah, here, in this thing here. But like condensed cohomology groups are something you can calculate for a condensed set and a condensed abelian group. But here, T is profile and A is discrete. And to understand this Nebelane thing, do you need the classical Nebeling? The classical nerve-linking? Yeah, yeah, yeah. Like this condition allows you to just extend it to the condensed setting. This nerve-link thing is important. I always assume that it's a novelty. No, it's really important to prove theorems about solid abelian groups. I see, so it's a profound duality. I'm not an irritated guy, but I don't know how you agree about that. Okay, so. Okay, so I'm not going to go into detail on this. I can explain it after if someone is interested, but they won't be relevant to the rest of my talk. So let's think about this, what I mentioned before, like what's the categorical meaning of discreteness? It's just that giving the discrete topology to a set is left adjoint for Yetfield Vanter to say. Left adjoint for Yetfield to set. Like maps out of a discrete topological space to another topological space are all continuous. That's what this says. And like, yeah, this is the way to think categorically. You think about the arrows and not some structure on the sets. So, I mean, it would be nice to have something similar for condensed sets. And I note that if this were true, it would be much more impressive somehow to have this adjunction because than to give a map of condensed sets, which is a full natural transformation of functors, you only need to give a map of underlying sets. And well, yeah, the answer is that we can do this. We take the constant C. We take the constant C associated to a set X. So that just means taking the constant pre-sheave and C5 that. And to me, C5cation is just an abstractly defined left adjoint to the inclusion of sheaves and pre-sheaves. That's at least the way I think about it. And in MATLAB, it's defined, I mean, it's constructed. I mean, it's constructed by taking something called the plus construction twice, and that's like some co-limit formula that I don't want to think about. But like, the thing it's useful for is this adjunction. So it's quite abstractly defined. And that's why I would like it to be isomorphic to something more concrete. But anyway, this is the first way to give a condensed structure to no, give a. Condensed structure to no, give a discrete condensed structure to a set. So I would say that something is discrete, it is the image of the essential image of this constant sheaf functor. Yeah, like this adjunction is just really trivial to prove. And if you change free sheet profile out, And if you change pre-sheaf profile out to pre-sheaf compact cameras, it will uh this adjunction is l uh yeah, it's the same. Yeah, so this was in MATLAB, or LTE at least. I think C5C is in MATLAB now. And like this, I formalized, but it was easy. Okay, so the second way to get condensed at this point. A discrete condensed structure to a set is much more concrete. So we take the S-valued points are just the locally constant maps from S to the set X. And the reason I say locally constant is that I don't want to tell Lean every time that I'm giving X the discrete topology. Like, locally constant maps don't require a topology on the Constant maps don't require a topology on the target, so this is like slightly more convenient. But they are the same as the continuous functions from S to X when X has the discrete topology, right? So this is really like the restriction of the function from topological spaces to condense sets that I talked about earlier. So, you know, yeah, the same proof works that it's achieved. And the way we prove that it's equivalent to the constant chief functor is by proving that they're both left adjoint to evaluation at the point. Now, yeah, so the thir these two ways to give a discrete content structure to a set are like both quite easy to guess and natural. That's all. But the third one is kind of weird. So that's related to the co-limit formula I mentioned earlier. So if we let X be a set and define this functor, like young eta is functor on finite sets, taking a finite set to the maps from it to the set X. Then we can Then we can left card and extend this along the inclusion of finite sets in profonite sets and get a pre-sheave of profonent sets. So there are two things to note here. It's not at all obvious that this pre-sheaf is a sheaf. And this is but it is. And this is actually very This is actually the column formula that I mentioned before. This one here. Just because of the co-limit formula for the left Khan extension. But we'll see this in a bit more detail later. Okay, so those were the three ways to define the Ways to define discrete condensets. And let's talk a bit about formalization. So to prove, like, the constant sheaf was left adjoint to evaluation at the point almost by definition, but but for this locally constant functor we really have to prove something. Um and the hardest part was defining the co unit of the adjunction. Defining the co-unit of the adjunction. So you want a map from the, okay, so x is a condensed set and s is a profound set. You want a map from the locally constant maps from s to the underlying set of x to the s valued points of x. Okay, and we want this to be natural in s and x. So take a gene here, and it will have And it will have finite inverse because S is compact. So we can write S as the disjoint union of its fibers. And these are all closed subsets of a profinite set, so they're profinite. And so we can apply this finite product condition. So if we evaluate X of S C B X of S will be so X of S will be isomorphic to X of this coproduct inverse which is isomorphic to the product of X of T inverse of X I. So like to give an element of X on S is enough to give an element of this product and it's enough to give a projection to each one and this thing has a canonical map from the x of the point just by taking x of the Just by taking x of the unique map from this to the point, right? And we have the elements in here, like xi, and here is the image of the g and this is like this is not immediately obvious how to think of this, but anyway, this is what you do. And like, yeah, then we have to prove naturality, and I'm, of course. And I'm, of course, this is not an equal sign when I'm regarding these as profine assets. So I have to prove that it's an isomorphism. And I'm also using another isomorphism to link it to the product. And so proving naturality of this was quite a lot of work. Like, it's even just writing the proof on paper is. It is hard. It's a hard, it's a difficult proof that no one would ever write down. And people would probably not even define the co-unit. You make no choices in your definitions of what we go from. Yeah, right. I mean, it's natural, but like everything is like canonical somehow, but we're still like for each element here, we're writing as differently as. We're writing as differently as a co-product. And so yeah, like no one would ever write down this definition of a map in like a paper, but if they do, they would not prove the naturality of it. Exercise for the reason. Yeah. So yeah, this was quite a lot of work, and you see, like, so the And you see, like, so uh the line numbers are like from the file where I do the adjunction and uh I define the locally constant pre-sheave and prove that it's a sheaf in a separate file. So this is like all just going into proving a junction. And like most of the work was the co-unit. The unit is like really trivial. It's an isomorphism. Which also tells us that this functor is fully faithful. But anyway, But anyway, so the most amount of work seems to be proving naturality in the condensed set X. And yeah, I'll try to explain a bit why that was so hard. So yeah, we have a local constant map F like this. Yeah, I called it G previously, but whatever. And a map of condensed sets. And uh a map of condensed sets uh P from X to Y. I'm also like P is also the map, induced map from X of point to Y of point P dot val dot app point something. So so we're using this isomorphism for the for the map like For the map, like decomposed with F. And then, and we're also using this isomorphism, right? For F. But we also have isomorphisms like this. Like each fiber here is isomorphic to a co-product of fibers of F. And then that means we have another isomorphism, like this thing here is just taking all of these and plugging them in. All of these and plugging them in there. And so we have like subsets of S. They're all subsets of S, but they're at like somewhat different levels of isomorphisms. We're taking like this double co-product is exactly the same as this one, but like you're you still have to define, yeah, you're partitioning it down into like little chunks and And yeah, so you're working with lots of isomorphisms like these and transporting everything along them. And so you have to set everything up very carefully somehow because this is the type of isomorphism I was explaining here. It only can only go in one direction, right? So what that means is like What that means is like yeah, so like uh from here to here is canonical because it's induced from the inclusion. You mean it's it's computable. It has a universal property. Yeah, it has you can uh like throw sync at it when you're like uh it has a formula. Yeah, it has a formula. It's called it's like sigma.sig and in this direction you can you can Uh and in this direction you can't you can't really describe it. It's like yeah the inverse of a confusable projection might not be confusable. Yeah, something like that. But in the cases you were looking at you could sort of describe it because the indexing set is the image of that, like the these TIs were the fibers of some function and so to figure out which sum end you're in, you apply the function to the point. Function to the point yeah, yeah, sure, but like it's uh yeah but uh I'm not sure exactly you're going from proofs to data. What's the indexing set actually? Is it like a n or is it set of points that are in the image of the function? The indexing set. The indexing set, I think. Sorry, it's the image of the image of the map. Yeah. Yeah. Then you should be able to do this. Then you should be able to do what you were doing. I mean, it's sort of what you were saying earlier about choices, but there was, if you go back to the slide where you wrote down the proof or the construction of the locally constant, yes, you have the word write. Write S says this thing, and you're indexing them one to n, but I guess you put n. Indexing them one-to-n, but I guess you could index them by the image of GPU. Yeah, yeah, yeah, of course. Yeah, but still, like, the other direction is like when you're yeah, when you're trying to prove some commutativity of a square, that's the direction you want to use always. Because, yeah, yeah, it's like simple MS that don't out of the profile, right? Co-product, right? I mean, in this case, you know how to map into the co-product because it's just the same, but like you still have to do something. And like, then we're also using this type of isomorphism, and that's in this direction, but it's canonical. Okay, so given the map, and then the fact that it's an isomorphism is just by axia. This, yeah, yeah. This, yeah, yeah. So you want to write it the other way, now you've got to sort of state. Yeah, it's just like the finite product condition just says that the map is projective. It's an abstract exist thing. Yeah. Okay, so yeah, like this was maybe all of the mathematics is justified. All of the mathematics is just defining the math, and then the other stuff is, yeah, just kind of what Patrick called fighting with me. Yeah, yeah. Nothing happening mathematically. Yeah, yeah. Just re-indexing. For sure. So the okay, so the second formalization challenge is related to this co-limit characterization. So let's first So let's first like yeah, so the way you prove this discreteness condition with co-limits that I mentioned earlier is that like any map from a profinite set to a discrete set factors over any continuous map or locally constant factors over one of the finite quotients. And you can use this to show this collimate polymer. Colony Palilla. Now we want a natural isomorphism like this of the left calm extension pre-sheaf with the pre-sheaf of locally constant maps. And that's essentially just saying that this is natural in T. But it's not actually that simple in lean at least because we only have like one limit formula for profile sets in MATLAB. Profile inserts in MATLIB, and it has a different indexing category from the opposite of the category that indexes the column in the left can extension. But yeah, so let's take a little closer look at this. So first, a discrete quotient of a topological space. It's just, in MATLAB, it's defined as an equivalence relation with open equivalence classes. And you can order them by like finding. You can order them by like fineness somehow. And I mean, you should, but you should really think about it as a discrete quotient, so like a continuous rejection to the discrete set of equivalence classes. And for a profinite set, this discrete quotient will be finite because S is compact, which gives a functor from the discrete quotient S to a finite set. To finite sets. And there's this inclusion of finite sets in profinite sets. And in MATLIB, there's a proof that S is isomorphic to the limit of this functor. And so yeah, that discrete quotients in MATLAB form a poset. There are not, like, there's just at most one map between elements of it. But really, what it means is that there. Really, what it means is that there exists a map of the finite sets. So we can take the functor like the opposite of this and compose it with our HX, which was the Noneta thing. Well, it's not just that there exists a map, but that the map is compatible with the. Yeah, yeah, yeah, yeah, yeah, yeah. Like there exists a map making the triangle commute, which is related. Um which is related to uh what I'm gonna talk about next. But uh yeah, so if we take this functor uh take the opposite of this and compose it with uh the Yonela functor to uh to Z then like what the proof I just show the proof here of this co-limit formula is just that the local constant mouse from S to X Local constant mouth from s to x is isomorphic to the collimate of this functor. Okay, now we can take a so the category related to the left can extension is the category of structured arrows. So this is just the comma category of like yeah, IOTA is the inclusion of finite sets and profinite sets. And we have objects are Sets and we have objects or arrows like this, and the morphisms are just commutative triangles. So these are just continuous maps from S to a finite set, not necessarily surjective. And there is, of course, the projection functor to finite sets. And the coordinate formula for the left can extension is essentially this. So you take the opposite of this projection functor. Projection functor. So, actually, the way it's done is the con-structured arrow category. So, you flip these and remove the arc, but it's definitionally equal, I think. So at least equivalent. And yeah, so it's essentially this. And so the left count extension is defined as the co-limit of this functor. That's the definition in MATLAB. In MATLIB, yeah. Okay, so we. Okay, so we have to recap a little bit these two previous slides. We have two different functors from like different sources for the category of sets and we want to compare their co-limits. So we want an isomorphism between their co-limits, but it's also like natural in S, in the sense that it gives a natural isomorphism from the left curve. That's a lesomorphism from the left can extension to locally constant blank x. And so the way you compare co-limits in the same category with different source, like indexing categories, is called final functors. So yeah, you can quite easily define functors back and forth between these categories, like a continuous. A continuous subjection is a continuous map, and a continuous map can be like restricted, the codomain can be restricted to the image of the map. And they are adjoint and they're actually both final. Like the right adjoint is final because it's a right adjoint. It's final because it's a writer joint. So I should maybe say what final means. It's yeah, so the definition is like from C to D. Final if for all D in D, the comma category D over F is connected. Is connected. But like, meaning that any two objects can be connected by zigzags of morphisms. But this is equivalent to any functor from D to E has a co limit if and only if, let's see. If and only if G composed with F does and if so they are isomorphic via like a canonical map from the co-limit of G of F to the colimet of G. So this So, this is the condition we use to compare the problems. And, like, yeah, the existence of these functors and the fact that they're final was quite non-trivial. It was like 500 lines of lean code, maybe. And yeah, we also have a natural transformation from this function. This functor to this composition here, which is not an isomorphism, but after like composition with R, it is an isomorphism. For this equivalence, you have to quantify over categories what universe do you have to quantify. These categories have to live in. I guess E is small in universe U. I guess you can take this E to also be small in universe U. Yeah, I don't remember. Like, it works for these. Like it works it works for these uh categories. Do you need to know that they're both final? Um actually so I need to know that because that's my proof uses that. But you could imagine that it's enough that R is final and you have like other maps. Maybe I'll discuss a bit later like Like why that approach didn't work for me, but it's very possible that it does work. I mean, it probably works, like, it must work. But yeah, anyway. So what this gives is my, okay, I introduce new notation here just to not have too big compositions, but like ds is this functor, right? Yeah. Right? Yeah, and Ks is the one, right? So we get because both are final, we get these isomorphisms, right? And yeah, I have a natural transformation of hunters at least, giving a map here. And it's an isomorphism after composing with R, giving an isomorphism of columns. But actually, it turns out that this map of column is this composition here. Position here. So it is just this map we're talking about. But yeah, and then you have to prove that that's functorial in S given the isomorphism with the left can extension. So the question was like can't we just consider Can't we just consider like just composing with R? And yes, yeah, we have a natural transformation. So actually like R composed with P is definitionally equal to this functor. But you run into problems when you're proving naturality. So you easily get an isomorphism of the collimates. Column is, but when you're proving naturality, like I don't know, you run into problems. Like, I think I have an example of why it what your problem is. So let's see, I can erase this, right? So you have we have like P s of uh composed with R is definitionally equal to F S R. But like when you're proving commutativity of some diagrams with colimits, so you can think about this. Like we have a map of profile sets and this yeah, so and if we have like a map to a finite set. Set then discrete quotients of this give, yeah. So we have like discrete quotient t and a functor to discrete quotient s, somehow and t over eta. And we have this element R. Can you push me to offer? Well, I mean you could you have simpler things like I'm not but anyway So So it's good to prove like commutativity of the diagram that ends in here because there equality of objects is not a problem it's a Objects is not a problem, it's a poset. But if we were using this, then we would have to reason in here somehow when proving the commutativity. And like, yeah, you don't actually have to prove the commutativity of this diagram because that's like false for the R's. But after taking colon, it's like something like that. So if you go this way, So if you go this way, like the congruence tactic works really well when you rearrange everything and just everything is roughly basically if you set everything up properly. So that's why I needed to prove that both were final values in both. But otherwise, it would be a much cleaner proof because R is the right event and right events are almost finite. But I haven't found a proof that works easily. Does that answer the question? I was hoping to get that question, so happy. Yeah, so okay, let's summarize a little bit. Two main results of the project. The constant sheaf of at x has like a more concrete description of its t-valued points, the locally constant functions, proved by showing the adjunction. Prove it by showing the adjunction. And then the PC of locally constant functions is left ex left kind extended from this Yomeba function finite sets, which gives the co-limit formula for discrete connection sets. And I haven't shown any code, so maybe I'll just uh prove to you that I formalize this with uh All these screens are arranged. So, this is like the file that wraps everything up. Try to condense. Type 2 condensed. What? Oh, yeah. The type 2 condensed is the. This is the constant sheaf functor and this is the locally constant functor. And they are isomorphic, like as functors, functorially in the set. For a given set, we have isomorphisms of the Have isomorphisms of the left Khan extension condensed set and the locally constant condensed set. And actually, the way you prove that the left can extension is a sheaf is by proving that they're isomorphic as pre-sheaves, right? And then, yeah, like transitivity, right? So they're all isomorphic. And we also get instances of full faithfulness. It's unclear a priori that the locally constant Constant, no, the constant C functor is fully faithful. I mean, you could probably prove it directly somehow, but it becomes very easy when you have the adjunction, when you have the locally constant description, because then the unit is obviously an isomorphism, and you get a fully faithful function. So yeah, I think that's it. 