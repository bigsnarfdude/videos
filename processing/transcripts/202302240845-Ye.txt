Sorry. So yeah, so today I'm going to talk about beautiful pairs of unstable theories. And this is joint work with Paul McCubidis and Martin Neils. And yeah, I apologize first in case you have seen this subversion of this talk before. Okay, so maybe let's let me just first give you some motivations of why we care about this. I'm not showing on zoom? Not showing on Zoom? I don't know. Yeah, when we just put it in the field. Oh, yeah, that's it. Okay, that might be fair. But now it's full fault. No, it doesn't work. Well, you should build an actual file. But tell me that we don't see easy. I know that this is disclosed. Did you even realize that I think 45? Yeah, that's right. I agree. Okay, sure. I'll just give you a step as well. Okay, anyway, so ACVF stands for the theory of algebraically closed value field. Well, it basically says you have another eigenfuel that's algebraically closed and the valuation is not true. And yeah, this is one company of the theory of value fields. Yeah. So notationally, we'll use the very standard notation. I think people have talked out this before. So for value fields, we'll use V to denote the valuation map, but gamma is a value group. And we use O to denote the valuation we need, and Lil K to denote it. Lil K to denote the residues. And yeah, so ACPF misquantifier definition in several natural languages. And it's actually not so important to actually talk about what exact language you are doing. But anyway, so and here's the guiding philosophy of X culture inertia. Basically says if you have a nice enough value field, then you can actually understand the value field just in terms of the residual field and the value field. And here, the goal of the talk is: what about nice pairs of value? And particularly, we care about nice pairs of ACBF. Okay. And here's another motivation coming maybe from a geometric perspective. So if you have a value field and you somehow have an algebraic k variety, then you can actually wheel vk as a topological space where you just use evaluation to induce a topology on it. Use evaluation to reduce the topology of it. But usually, this topology is bad. You end up with a totally disconnected space most of the time, unless it's only one point. Well, in the case k is actually complete and the value group is a subset of the ribbons, then you can actually think of the valuation as given by a norm. I'm not giving the norm of the field. The brokerage actually introduced this based the identification of B. And somehow, basically, the idea is that Basically, the idea is that why the topology is bad is because we're actually not seeing enough points in this space. And a way to fix it is just, well, why don't we just handle all these points? And somehow you end up with a much nicer particle space. And yeah, so set theoretically for a finite variety really. The identification is the self-semi evaluations extending V on the on the on the on the fun On the ring of regular functions. And here by semi-evaluation, I just mean it's a valuation, but it doesn't have to be the case that the valuation is infinity if and only if it's zero. So you can map things to infinity. So here there should be an infinity here. And the quantifier designation of algebraically closed value fields actually tells you a valuation on the other Evaluation on the ring of regular functions actually determines the type. And basically, this tells me that if you really look at this space, you can think of it as a type space. So for this given k, all I need to do is just adjoin the parameters of the real numbers in the value group. And then say, I look at all the types that are weakly orthogonal to the value group over those parameters. So could you call the semi-evaluation? Oh, semi-evaluation, it just basically means it's evaluation here, but you lose the problem. Here, but you lose the property that the valuation is infinity if and only if the element is zero. Can I also add one to the other? Would it take too much time, or can you describe the topology? The topology here? Yeah. Yes, that's a good point. So the way you can think of it is for each regular function here, it gives you a map from this space to the roots by just evaluating that function at that point. And then you take the weakest object on this thing so that. The rigid origin on this thing so that all those logic are the data. Okay, thank you. Another question? Okay. And here's another motivation basically comes from this. How do we study this object in CBS? No. Maybe this side is better. Yeah, so this is what I have decided. So every time I give a talk about purple spaces, the picture Talk about Berkwich space is the picture should be drawn somewhere. So, this is what the brokerage offi line looks like. It looks pretty much like a tree, and of course, doesn't look like a defined one set in the field sort in UACBS. So, if you really want to study this object definitely, some work needs to be done. It's a cold. Do you know what you should do? You should go. Maybe you should go and let us. But now I'm blocking this. I think that's where I'm going to be falling. Yeah, yeah. I just continue. Okay. Yeah, so here is a model theorem way to describe an analog of this burglar identification functor. And basically, it allows you to basically use geometric model theory on this object. So for now, we Object. So for now, we fixed a monster model of algebraically closed value fields, and k is just any value field we started with. And this we hat is the stable completion of the variety. And you should think of it as a definable set. And what it does is the following. For each field L extending K, it just assigns you to all the global types that are L-definable and authorized to the value group. And this is the following fact by Haskell-Hucharsky-McPherson. It says that if you have a global definable type, ACBF, then the following three conditions are equivalent. First one says it's author gamma. The second one says it's generally stable. The last one says it's stable enough. I won't really explain all the things, what all the things mean. But now this essentially gives us a way to sort of equip this thing with. To sort of equip this thing with the structure of a defined reset. That is not leaving the structure at all. Yeah, this is just literally you just set something to the type space, to a subset of the type space. But the idea is we want to somehow visualize this object as a definable set. Yeah, so we somehow have to enrich our category a little bit. So instead of talking about definable sets, we will talk about pro-definable sets. sets, we'll talk about pro-definable sets. So a pro-definable set is just a small project here. It's just literally just a small projector limit of definable sets. And you take the transition maps to be definable maps. And I think equivalently, you can also think of a pearl-definable set as just a type-definable set in each of the many variables. And the set is straight pearl definable if we ask slightly more. If we ask slightly more, so not only do we have the transition functions being definable, here we say that the transition functions have to be subjective. And if you take the other perspective of the, so you think of a pro-definable set as a type-definable set in infinitely many variables, then a strict pro-definable set basically says, well, if you cut up this definable set infinitely many variables, you end up having a definable set. And the theorem of Pushovsky logs in. And the theorem of Kushovsky and Lausaire, well, this is basically the fundamental step of their study of V hat is to show V hat is actually strict pro-definable. So you can apply appropriate versions of compactness to this object and you can study definable functions and things like that on this object. When you say ease, you mean homeomorphic tool or you actually come from. Yes. Yes. So this is how we actually encrypt it with the definable structure. So the pro definable structure on V hat is basically is assigned through the following approach. So since types are generically stable, we actually have this use of a uniform definition. So the feed, so since all the types here are definable, for each fee, we know the type has a feed definition. But since they're actually generically stable, the feed definition of the feed definition does not depend on the Does not depend on the formula giving the feed definition does not depend on the type. So for each formula v, we have another formula d of v that actually give you the feed definition. Meaning that for each p, you can actually find some parameter so that, well, this parameter gives you the correct feed definition. Well, now what I do is just if you give me this p, I assign to the, to, to the, to this. I assign to the sequence of all codes of these three definitions. And this is a pro-definable structure. So, if you think of it, this is really a type-definable set in each variables. And the strictness is equivalent to the statement saying that the set of codes, the set of phi codes for each for the function of all of P's is actually a definable set. So a priori, this is only a type definable thing. The strictness tells you this is actually definable. Strictness tells you this is actually definable. But yeah, so after spending all this time, now I can actually talk about other things, why we care about these things. So Berkeley identification is not the only identification functor that people care about. Another notable example is the Uber so-called addict spaces, where you is slightly bigger than the Berkeley space. I won't exactly tell you what it is. Exactly, tell you what it is. But the model directly analog, following Kuzhowski and Lozeri's approach, here we are looking at the type space of this one. You are looking at the so-called, we call it V tilde. And what we do is you look at the set of all definable types concentrating on V, that is orthogonal to infinity minus. And infinity minus just means, since we are working with the value group and the symbol infinity, and infinity minus just means the type concentrates at positive infinity, based below the actual infinity symbol. Below the actual infinity symbol. Yeah. So, in other words, you can think of it: v tilde is the space of all definable types concentrating on v, such that the definable images in the value group are always bounded by the, so for each L is bounded by the L. It doesn't actually give you any element that's directly as a type pass infinity. Yeah, so using stable embeddings of pairs of ACVF, so you look at pairs of algebraic loss of value fields that are stably embedded, you can actually assign a pro-definable structure in a similar way as what we did for V hat, to this V tilde, or even to the space of all definable types. And here, yeah, we say elementary pair is stably embedded if any total in the bigger, in the, in the, in the, so n is bigger. So, n is bigger, m is smaller. So, we say this pair is stably embedded if any type of n realize a definable type of n. So, this is really just a takeaway of what I've talked about so far. So, in general, stable embedded pairs are elementary in the language of pairs. This will imply the pro-definability of the relevant type spaces. Type spaces. And the purity of the predicate. So if you really know that not only do we have stable valid elementary, if we know that the predicate is somehow pure, purely stably valid, then this will give you strictness. Pure just means the induce structure is just whatever you have on this pragmat already. So in the SVF case, you look at the purity of the predicate just means the predicate is just algebraic close value. There is no additional structure. There is no additional structure. Yeah. So maybe let's now come back to the stable case. In a stable case, we know all types are uniformly definable. And the strictness is equivalent to the following. For each phi, we take a fee definition. Then the set of canonical parameters, the set of parameters that give you fee definitions for some type P is a definable set. And this is something. And this is something Bruno Poissar has already looked at. So now let's talk about beautiful pairs in stable theories. So T is a stable theory with quantifier innovation. And we pick some large enough cardinal. I'm not sure this is good enough, but I think it is. Just pick some kappa that's large enough. And we work with the L with a new additional predicate P. And we say elementary pairs of models. And we say elementary pairs of models M, P of M is beautiful if, first of all, the predicate is sufficiently saturated. And moreover, the bigger model is even more saturated over the smaller one. Meaning that if you give me a small set in a bigger model, I can realize any type over the predicate plus this small set of parameters. P of M is compassaturated with the induced structure or what? With the induced structure or what? PLM is saturated with its own structure. As just an L structure. Not with the induced structure. And we call an L P embedding is stably embedded. It's so-called SE map stable embedded map. This is just a doc name, meaning that the image is independent from the predicate of B over the image of the smaller predicate. Of a smaller predicate. So it basically says, yeah, the yeah, so this is, this is, this basically says that the image of A is sufficiently independent from the predicate of B. So this is the theorem by Poisson about beautiful pairs in the stable context. So every elementary pair of models of P can be stably embedded into a couple of beautiful pairs. Be stably embedded into a couple of beautiful pairs. And any two cup of beautiful pairs, actually, any two beautiful pairs are elementarily equivalent. They all have the same theory. And we call this common theory TBG, the theory of beautiful pairs. And not only do we have this, we actually have the following equivalence. If we know that any compass actually model, here we, by compassation model, I mean the composition model in the language of pairs, so of TBP, if we actually know this is always a If we actually know this is always a kind of beautiful pair, then we call this property a beauty transfer. This is another hawk name. But this is actually, surprisingly, it is equivalent to the things that people have studied. So it is equivalent to the strict pro-definability of types. So here, SDF is really, really everything, because every type is definable. So this beauty property of having beauty transfer is the same. Having BLD transfer is the same as strict pro-definability of the space of definable types or the space of all types in this case. Or we say the predicate is purely stably embedded, so there is no extra structure if you look at the predicate in the language of, I mean, in the structure TBP. Or the theory has an SCP. I think I won't really explain the definition of an SCP, but it's open to the TEQ having elimination of their CCP. Okay. What about the general setting? So now we come to actually something new. So we still work with a complete theory with quantum variety and kappa a large enough cardinal. And we use this mascal D, curly D, to denote the class of L P structures, where P is again the new predicate, where A is just any structure. Where A is just any substructure of a master model of T. And we actually, and we know additionally that the type of A over the predicate extends uniquely to a global PA definable type. And here, all these types are basically L types. There's no predicate here. And we say LP embedding, so back then in that case, it was In that case, it was given by the independence notion. Here, we want to do something slightly different. Since we know it extends to a global PA dividable type, here is what we want to say. We want to say the mapping is a stable embedded map, or I see embedding, if the image of A that is type over B realizes exactly this definable extension. So, I mean, you can also think of it: if you use the independence to say, oh, I realize. Independence to say, oh, I realize this definable, the definable extension as the notion of independence is exactly the independence saying that FA is independent from FB over F P of A. And yeah, so we will use this less than or equal to symbol to indicate that the inclusion is an SE embedding. And now we can define a similar notion of beautiful pairs. We say elementary pair of T is a. Pair of T is a couple of beautiful pairs. First of all, it lands in this class. So basically, meaning that every type here, every type of in M, if you look at its type over P of M, is a definable type. And such that it has a so-called richness property. It says that whenever I have some A that's embedded into M and some additional structure. And some additional structure, small structure B, such that I know A is a substructure of it, then I can extend this map to B. So it's in some sense a universal object. And not only can we do that, we can actually relativize to certain subclasses of D. So we don't necessarily really have to look at the self- all definable types. We can define the so-called We can define the so-called Kappa C beautical pairs analogously. And here, I won't really go into details trying to define what is C, what do we mean by certain subclasses? But typically in practice, C usually arise from if you take finite collection of zero definable types, and I want to say that this pair is in C, if first of all, it's in D, and also we know this type is orthogonal to this finite collection of things. Yes, in the previous case. You see? Can we? You see? So do you have that any two k kappa beautiful are again reservatory equivalent? I mean a priori we don't even know if such a thing exists. Yeah, but if if they do, yes. Yes. Yeah, so here basically you what I'm trying to say is you can restrict to a subclass and and and then you can define analogous notion of couple as C beautiful pairs by just looking at things in C. By just looking at things in C. And yeah, so as Amalor pointed out, we I mean, actually, we have to show all the marginary equipment, but it takes some effort to show they actually exist, like the stable case, where we know those properties hold automatically. So we say this class has extension property, meaning that if you have some structure, some pairs, some elements. Some structure, some pair, some some SE structure in C. And if you have some consistent formula, then you can extend it to another pair another SE pair such that you have a solution of that formula. And then similarly, you have this amalgamation property. I'll probably just draw it A one A two. So, whenever you have a diagram in C of this form, you can complete it to a C such that everything really and all the arrows are IC maps. Could you also write on the blackboard this SA embedding the definition because the definition of SA embedding? Could you write it on the like? Okay, sure, sure. So, so we say the map A map A P of A So we have a map F to B P of B is basically if the map is the map is S E if if you look at the type of F of A over T of B this is exactly the type of This is exactly the type of so here all the types are L types. Type of A over F of P of A and you take the definable extension. I don't have this. You take the definable extension to field. Are you gonna construct these models by using like a kappa? Exactly, exactly. And once you have these two properties, you can actually show the following. If your class has an extension property and the malformation property, then Kaf and C beautiful pairs exist. And not only that, any two such pairs will be elementarily equivalent. And you actually construct a back-and-forth system just by looking at all those substructures. And we use this. And we use this TCBP to denote a common theory of it. And again, we say it has beauty transfer if a saturated model of the theory is a built-fill error. And yeah, so for and usually this C, as I explained earlier, C comes from a class of definable types. So here I use the s I'm abusing notation to use c def x to mean the the the class of global definable types. The class of global definable types given by this class C. Do you want explicit as saying? Yes, there will be. I see. Sorry. Yeah. I feel like. This is always a good question. You know where exactly this is going. Yeah, so assume the C B pairs exist and C has built heat transfer, then we actually have a quantifier elimination. And all we really need to do is. And all we really need to do is just adding new functions in both that send each element to the codes of the fee definitions. As long as we have it, we have quantified definition. And in particular, following from this quantifier definition, we know the predicate is purely stably embedded as an L-strip here. And this will give you the strict pro definability of the relevant type spaces. Yeah, so I think a motivating example would just be either C taking C. Either taking C to be the one given by all definable types or the generically stable types, maybe. So here's actually a question. In the stable case, we know all these things like equivalent. But in general, we don't really know. Assuming the C beautiful pairs exist and the strict pro definability of the relevant definable type spaces, we don't really, does this imply beauty transfer? We don't know. We can only work out one. We can only work out one way of replication. Yeah, so maybe now I should just talk about the... Yeah, so in the stable case, some examples, the Poissar's beautiful pair and our notion of beautiful pair are essentially the same. I mean, by essentially, I mean, you we have some control over the cell types you want to realize, but they are more or less the same. And well, here's the first thing. A presm the presumable thing. The presenter study. And so I think the first point is actually, I've seen it in Gabe's notes. So an elementary pair of models of price burger arithmetic is stable embedded if and only if the bigger model is an amextion of the smaller one. Meaning that the smaller one is convex in the middle one. And it actually follows easily that the beautiful pairs of models of Press Manberger exist and it satisfies UV transfer. Satisfied UV transfer. And you can actually axymatize these beautiful pairs of pricebugger systematics pretty easily. You just say the bigger model is a proper end extension of the smaller one. That's all you need to say. Yeah. And now let's talk about ominous ones. So EP basically extension property holds for density of definable types. And you can also express You can also express elementary tear being stably embedded using marker sign, or basically this equivalent to saying that the model is that smaller one is that can complete the other one. And this is really first order expressible even if you have the pair, if you have the predicates. And in divisible order abelian groups, we can actually characterize all the all the all the all the all all the all the possible beautiful pairs that can appear. They're basically given by They are basically given by. There are two distinguished types: the zero plus and infinity minus. Maybe I should just say positive infinity. But I tend to think of it as value groups of value fields. So that's why we have this infinity minus. Yeah, so divisible value beautiful pairs can be axiomatized by, well, each stable in value pair. And you realize both of the types. That's all I need to say. And then you can sort of control, I can say things like, oh, I don't realize this type. I can say things like, oh, I don't realize this type of infinity. This gives me another beautiful pair. And it's the beautiful pair corresponding to the set of all bounded types. Or I can say, I only realize the types at infinity. And this gives me the sort of co-bounded or convex beautiful pairs. And those are all the beautiful pairs of divisible automating groups that appear. And similarly, for real closed fields, this follows from the work of Bloenberg and Lao Van Drins. And love integers. And beautiful pairs of real closed fields exist, and it's really easy to express it. It just says you have a proper pair, proper stably embedded pair. And that's it. Because in this case, you have the inversion, so these two types are really the same type. You cannot somehow separate them anymore. And that's really just everything. Yeah. So, yeah, as I promised, I'll talk about validators. And yeah, so we say the extension of value fields is separated if it is a first-order condition that we can trust. Basically, it says every finite dimensional vector space has a nice basis. And I won't really go into details. Okay, can I have just maybe... Okay. Yeah, so the point is that for nice enough stably pairs of value fields, being stably invalid is also first order. And nice includes all these good things we have. Cook things we have. Yeah, and so here's an aximatization of beautiful pairs of ACVF. Well, it's basically given by a sustainably valid pair, plus the corresponding beautiful pair of the residual field, and of course the excellence of the corresponding beautiful pair of valid groups. And you can also control this, you can also change this tool by, say, I can say that the pair is actually a trivial pair, or here I can say it's a bounded pair of divisible order-based groups. This will give me an. Other main versions, this will give me different classes of useful pairs of ACBS. And all of them correspond to natural, naturally arising definable subspaces of definable types. Yeah, so here's a picture. And yeah, so the space of definable types is basically the theory of full builtable pairs. The corresponding space is a Zariski-Riemann space. This is a Burke space. Here you have a proper pair. Here you have a trivial pair. And the other one, the Trivial pair and the other one is the one exonotyping addicted spaces. And all of them are strict ordinable. And yeah, so maybe I'll just end here. Lastly, we really have for a nice class of value fields, we have that the beautiful pairs are actually axiomatized by being a stable inverted pair plus the corresponding D-result residue fields and value groups. And I think I'm stopping. I think I'll stop it. So do we have a future questions? Do you have any applications in mind? Yes. So for the addict space, basically, once we have the strict pro-defined structure, you can sort of live Woody and fun so as a result of Goodyear setting and you have some structure description of curves or the lifting of their information tracking. For the rest of the remote space, it's slightly more complicated because the valuable becomes tricky and there's not really a meaningful notion of what you just map there somehow. It's slightly more complicated. It might give me results, or new proofs of results on I wouldn't be so confident. I hope so. That's why you're doing it, right? Yes. Yes. So in the previous slide, you said one of these choices for a restriction gives you this add, which I guess makes sense in a much wider class. I don't know, any theory. Any new theories that satisfy, I don't know, some reasonable analog of NFCP gets something like that, and you realize all the Like that, we realize all the stately. Yes, yes, I think so. I think so. I don't you can show the corresponding class have this the combination property and extension property, you end up having a beautiful pairs, then you take some work to show this beautiful. But then if you have it, then you have the strict work value of the spaces. So it looks like a C in square forms like a stable type case, right? Yes, then you just need to show that the that class has all these properties and the beauty type. Class has all these properties and the building transfers, then we will give you straightforward values. Yes. Does RCBF? RCPS, yes. That's this part. Yeah, so the nice examples include pairs of RCBF, C double rec T, R double rec T, Q P or Q P double bracket. Yeah, so this is so-called there's it has a space, some there's something analogous to. There is something analogous to workflow identification called real identification here. And we can give a strict pro-definable structure of it as well. And for QP, you have the p-addic spectrum data. Yes. That's a thank you for a beautiful part. We'll just say both.