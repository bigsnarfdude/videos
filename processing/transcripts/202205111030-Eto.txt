I'm Shoshieto from Tohoku University, Japan. I will talk about the configuration of regular in the serverless. And this is joint work with Takehirito and Takifiroito, Yasuj Kobayashi, Yota Otachi, and Timikiroasa. And this is outlining. This is outlining of this talk, at least. First, let me introduce the configuration problems. The configuration problems arise when we wish to find a step-by-step transformation between two feasible solutions of a problem such that all intermediate results are also feasible. In the reconfiguration problem, we move a token in every step under some loop and we decide whether there is a configuration sequence from an initial configuration to a target configuration. I will give an example of the configuration programs in the content set. Independent set, the configuration under token solid view is defined like this in the independent set configuration program the input is graph G and independent set S and T of graph G and the task is to The task is to decide whether there is a reconfiguration sequence under the conflating loop between S and T. I give some examples of independent set configuration. We start independent set S like this. We call blue buttons in the independent set tokens. Under tokens. Under token sliding loop, we move a token to the adjacent vertex keeping to the property of independent set. In this figure, we move this token share in the first step, first step like this. After the transformation, and this particular set. Set remains to be an independent set, like this. We repeat it, we move tokens under token sliding, like this, like this here, and so on. In this example, we can reach target solution T from S by moving. S by moving procluence under this sequence. In this talk, we consider the regular industry subgraph the configuration problem. To explain this problem, we introduce the definition of a regular in the sublime and we denote by an By and GU sublime of G induced by subset U. Now we say that but if subset U of graph G is the legular set of G if G U is the legular. That is the regular degree of G. So, the degree of each vertex in GU is exactly exactly for example in this figure subset S1, S2, and S3 are subset of U, subset of U. This includes these induces subgraphs three regular. Three regular industrial graphs because the degree of each vertex is exactly three vertex. And by the choice of degree, choice of the independ the regular in the subgraph can represent some well-known graph. Some well-known graph properties. For example, if D is one, a D regular in the subgraph corresponding to an independent set of graph like this. Degree exactly zero. And D is one. D advail in the cell graph corresponds to an induced. To induce the sub induce the matching of a graph like this, and if these two are delegular in the subgraph corresponding to an inducer site of graph, like this. Okay, at least two. Let me introduce our program. Problem in that the regular in the subgraph, the configuration problem that the input is graph G and the regular set SU and S D of graph G and task is to decide whether there is a R sequence between a US US and UT UT. This R is the configuration. On this problem, we then define two configuration, tokens jumping and token sliding. Under token sliding, a token can be moved. Can be moved for the current vertex to any other vertex and jump like this. Yeah, like this. And like this, and like this. On the other hand, token sliding blue, a token can be moved from the current vertex to its adjacent vertex like like this. Like this, only adjacent. Okay, like this. And I give some examples of regulatory subgraph configuration under token jumping. Example of token jumping sequence for D is one. Then we pan each vertex in one regular one regular set. One regular set US and UT is with blue is colored with blue. In this figure, is there a token jumping sequence between US and UP? And the answer is yes. In this In this video, we move this token token here in the first step like this. And after the transportation, this partic remains to be one legger in the subgraph right now. And that is indeed. And that is induced matching. Okay. We repeatedly move tokens and the token jumping like this. And jump here. Okay. And jump here. Jump here. And so on. And in this example, we can select target solution. Select target solution US and UT by move token under this sequence like this under tokens jumping next under tokens tokens writing I give an example of the URL in the server reconfiguration. Reconfiguration and that token. Example of token sliding sequence for P Corban in this figure. Is there a token sliding sequence between US and UT? The answer is no. In this In this figure, if this if this token will adjacent buttics like this or like this, then this component is disconnected like this. Okay, and degree of this vertex and vertex is zero and this Is zero and this particular is zero this particular and and this partic is degree of this part this vertex is zero zero zero and degree of this particular is two and therefore if the token move token move adjacent vertex then this subgraph is Then this subgraph is not one regular in the subgraph, like this. Other tokens are similar under token-side degree. And even if inputs input same instance, regular record. uh regular uh reconfiguration sequence if i buy the configuration rule okay let me introduce related work and our results um let me show related work of regular in the soda configuration um independent set equivalent to uh regular in the server As a regular in the server, the configuration like this. And in addition, click the configuration can be seen a special case of regular in the subgraph because a click is size a click of size k is k minus one regular subgraph. For example, For example, clip of size 4 is three legular in the sub graph like this. So pre-reconfiguration is special case of industry regular industrial reconfiguration. In this talk, we In this talk, we focus on coda graphs, coda graphs, and bibotype graphs. Graph is bibotte if each set can be partitioned into two independent sets like this. And a graph is coder if every cycle of language at least four has a code like this. Has a code like this. Let me show let it back for D is one. Such is independence on codal graph and to reconfiguration levels do make a significant difference for P is one and this programs on code algorithm is P space complete. is PSpace complete and a token token sliding rule and polynomial time solver and a token jumping and on piper type class this problem is p space complete and a token sliding build but np complete and the token jumping our results are summary or summary summarize Summarized of D is one or more in this table together with known result or D is one. On color graphs, both token sliding and token jumping rule have the same complexity for D is one or more. On the other hand, there are the zero uh diff different for uh the this one uh the d is zero on by party flow complexity of d is one one one show a kind of result phenomenon from d is zero the program becomes easier under token jump token sliding Jump token sliding and but because other under token jumping like this now let me talk about our result on bipartite graphs and the token sliding for D is one or more. This problem is solvable in polynomial time and we observe the tolerability tolerability and the tokens writing book for example in this figure a token t1 and t2 are connected component in this cloud one so token To token T1, I just send the text like this, like this, and a token threading. Then its component is disconnected because token T1 and T2 are included in the same independent set B, like this. Therefore, degree. Therefore, degree of each token is not one. For D is one or more. If a token adjacent by text and a token sliding move, then degree of the token is not P. Therefore, piper type graph terribly token sliding sequence exist. Next, let me talk about our results on coder graph and under token sliding. 4D is one or more. And this problem is best complete. Let me show brief sketch of this result. First, First, on color graph, every connected regular in the server is a complete graph, like this. Like this, okay. Therefore, on codergraph, the graph in the subgraph, the configuration is some click clicks the configuration program. And degree of these clicks is exactly D. The configuration like this. Let me show proof sketch of this result. We prove a reconfiguration for independent set uh for independent set reconfiguration. Independent setup configuration on color graph and the token striding. For example, these three in this figure, for each vertex on graph H, we take a set x group of O buses and this this graph is This graph is a silver graph, at least. And we add all possible edge edges between XU and XB if graph H has a UV H like this. And add possible edge like this, and so on, like this. And either all these edges simply like this, okay? Simply and in this graph and this graph this this This prototype can slide as about this but it's like this. Okay, I can move one step because these edges between these verses so one step I can this token can move one step like this and if a token And if a token T on vertex U in graph H then the tokens of three regular set R T on but except X U in Graph G like this here token If token T move adjacent by text like this, then token set R T move from Xu to X D. We move a token to adjacent, but let's keep the property of three layer like this. After the transformation, RT remains to be a three legged in the subgraph like this. Repeatedly moved tokens like this and so on. Finally, RT moved XU to XU like this. And if If this configuration sequence between S and T on independent set reconfiguration. Then there is a reconfiguration sequence between US, UT, in a regular industrial graph, encoder graph, or under token stratigraph, like this. This is the summary of this talk, and we also studied the connected version of regular in the server reconfiguration. The connected regular in the server reconfiguration problem: the input is graph G and the connected. And the connected regular into a regular set US and UT on Graph G and the task is to decide whether there is a sequence under regular reconfiguration between US and UT. Connected version is this one component. One component configuration like this, and it's all I have to say. Thank you for your attention. So, any questions?  So, ah, okay, so may I ask one question then? It's very clear technique for me, but for this new connected version of the token jumping model, yeah, you use a similar thing. Yeah, yeah, this result. Result to leave this result reduced from shortest possible configuration. This result? Anyway, my question would be: for the polar graph, the technique is very quite simple. I mean, you just make from the buttons, the creep, and make much volume. So you can say that for any fixed key. But for the my pattern graph, can you show the The general Dennality and generality and sorry, but one more. Okay, yeah. So for the colour graph, you can use the click of size T instead of context. But for the bipartisan graph, you can't use the same technique. Same technique. So to show that you are given some general D, for example, D equal to 2, but 2 or 3 is, yeah, we can imagine that. But for example, when you are given a D equal to 100, how can we prove that? So uh we need to make a gadget for general D, so yeah, uh, which is bipartite, which keeps the bipartite, right? And is that very complicated one or something to one? So here, do you have any figure for the uh Any figure for the gadget? So like a D call three, then so we just make a click of size three. If D call four, then we just make a click of size four, something like that. Maybe we use a minus one, plus one, something like that. Minus one, plus one, something like that. So it's easy. But yeah, and if you want to make the graph such a gadget, but need to keep a bypart tightness. Protagonist. So, so do you have any feed here? Yeah, yeah, but jump for the bipartite. Bypothec and  Yes, uh yeah, this is by the thigh the regular uh sorry regular T. Here D would be the size of the A and B is D half of A. Okay, maybe I got some idea from the construction. Yeah, I wonder if you can how how can we design generally but yeah I'm I'm I'm sure about the idea. Sure, about the idea. Okay. Any other questions? Okay, so thank you very much. Thank you very much. Okay, so we turn to the next talk.