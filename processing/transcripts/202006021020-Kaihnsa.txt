So I'll be talking about convex pulsive trajectories. It's a joint work with the same name with Daniel Chiripoy, Andreas Lohne. Andres Lohne is a professor at University of Vienna in Germany. Daniel was his PhD student and Ben Schumfelds. He is associated with Berkeley and MPI Leipzig. And he was also my advisor at the time. Also, my advisor at the time. So, in the survey, I was asked two questions: why are convex hulls interesting? And to talk about their computational aspects. So, convex hulls, they, well, convex sets in general, they appear most often, more often than not in almost every field of math. So, you can think about discrete geometry. You can think about discrete geometry, optimization, linear programming, semi-definite programming in computational geometry, and all sorts of things. But our driving motivation was talking about convex cells of trajectories. It came from attainable region theory, which okay, I somehow cannot. Okay, so attainable region theory, which is a theory in chemical process engineering. So this is the book by the same name. Engineering. So, this is a book by the same name, and this study started in 1964 with Fitzhorn and has been worked on by primarily by the authors of the book and Martin Feinberg. And so the authors are David Ming, David Glasser, Benjamin Glasser, Diane Hildebert, and Matthew Metzberg. I'm sure there are other people as well who have worked on this theory over the time. So, what this theory does is it's about looking at a geometry. It's about looking at a geometric region, which is, of course, convex, as the name suggests. And it's a region which they want to figure out this region because it helps in the designing of chemical reactors. So this theory has its own web page, and on the web page, they say adrenable region theory. It's a branch of chemical reaction engineering that incorporates elements of geometry and mathematics. Elements of geometry and mathematical optimization to understand how the chemical reactor networks can be designed and improved. So, basically, it's an optimization problem where the feasible set is exactly the attainable region. So, it's a theory is unique in that it is geometric in nature and is particularly useful for understanding complex reactions involving many competing reactions and species. Okay, to begin with, I'll just Okay, to begin with, I'll just, as Polly did, I'll also explain a little bit again on what chemical reaction networks are. It's the same definition under the same assumptions of mass action kinetics. I'm sure Polly has said it and Alizanda has said it yesterday. I'll just go over it very briefly and very quickly. So for me, X1, X2, X3, up to X5, these are chemical species. It's like a graph. And on the vertices are chemical complexes. are chemical complexes. So X1 plus X3, X4 and X2 plus X2, X5, these are chemical complexes. The graph has edges which are weighted by reaction rates kappa 1, kappa 2, up to kappa 5 and these are chemical reaction rates. So it's basically a graph with edges saying about chemical reactions on the vertices are chemical complexes, and the reactions are taking place between the complexes weighted by their reaction rates. By their reaction rates. So, given such a network, there is always under the assumption of mass action kinetics, we can associate a dynamical system. And this dynamical system is given by multiplying these three matrices. The representation is different, but the idea is again the same. And the equation that we get out of it is the same that we got when, as Poirie described and Elizanda said in her talk yesterday. So, for me, A. So for me, A kappa, I just want to stress out that this is the Laplacian, the negative of the Laplacian of the graph, which is the adjacency matrix minus the degree matrix. Okay, so once I have these matrices, so psi x has monomials corresponding to every vertex, x1 plus x3 is written as x1, x3. The small x's are The small x's are the concentration of the capital x's, and this is what we see in the dynamical system evolving over time. And y is the stoichiometry matrix. So on vertex 3, there are x2 and two components of x5, which is what the row 3 gives us. You multiply them out, they give us that ordinary differential equations. So once we have this dynamical. So, once we have this dynamical system, we can pick an initial point and we can start the trajectory. So, now I'll describe what the attainable region actually is. So, we take the starting point, we run the trajectory, we reach some point. So, this is my trajectory. We can play a game and we can do two things. One is we can do mixing, so I can take any two points on the trajectory. Two points on the trajectory and mix them in some proportion. So I can, in effect, get any point on the line joining the two points because I can pick my proportions in which I'm mixing. I can do this over and over again. I can do this again, taking some two different points. Eventually, I can actually get all the points in the convex hull of the trajectory. Once I have this trajectory, I can, the second process that we can do is. Second process that we can do is pick a point in the convex hull or among all the points that we can attain by mixing. And so for me, that's now the new point is the pink point and start the trajectory again. So there are two things which can happen. One is that trajectory can actually go outside the convex hull. Other is that trajectory stays within the convex hull. So So the property that the given a convex set and the trajectory stays for any point, I pick up a point and treat it as an initial point and run my trajectory and see if the trajectory stays within that set, then that set is called forward closed. And my attainable region by definition is the smallest convex hull. The smallest convex hull that contains the trajectory and is forward closed. So I have my trajectory, there is a convex set which encompasses it, and I can pick any point inside that convex set and run my trajectory. The trajectory is going to stay within that convex set. So, to talk about this region, I'll just give one more definition about spectrahedral shadows. Spectrahedral shadows. These are maybe stop here for a second to ask a question. Yeah? Yeah, so the question is, like when you describe this, do you calculate the trajectory or it's a theoretical procedure so far? So are you describing a computation or right now? I'm talking about the definition of the attainable region. I'll come down to The attainable region. I'll come down to the computational aspects a little bit later. So, well, thank you. Maybe the second question, or you're answering the first one. I'm just saying that I will give a description of the computation for linear reaction networks now, and then I'll describe the computations later. But maybe you want to ask the other question. Yeah, so the second question is like in the The second question is: in the previous talks on chemical reaction networks, there were parameters playing a role and they somehow disappeared, or you fixed them to be some numbers? Right. For me, everything is positive, but they're fixed. Ah, so the parameter values are just some fixed numbers now. This kappa one, kappa two. Okay, okay. So for attainable region is fixed with, so I have a fixed dynamical system and I'm Dynamical system and I have a fixed initial point. So, attainable region is with respect to an initial point because it is supposed to contain the trajectory. If I pick a different initial point, then the attainable region also moves. Okay, thank you. Yeah. Yeah, so I don't have a notion of varying parameters. Okay. Okay, so once we write, so I'll give one more definition about spectrahedral shadows. These are basically, okay, so these are points x1, x2, xm, such that there exist y1, y2, yp, such that this inequality hold, where a0, ai, and bj's, these are real symmetric matrices. So the sum of them is real symmetric matrices, and this inequality. And this inequality denotes that the matrix that we get is positive semi-definite, that is, the principal minus R positive. So, under those inequalities, this is basically a semi-algebraic set where with such that this set is in fact convex. So, this is a special semi-algebraic set. Okay, so. Okay, so now to describe the attainable region, we have a linear chemical reaction network such that the ODE which is coming from my chemical reaction network is linear. So, all the polynomials are in fact linear, and this is given when the graph has vertices which are just where the complexes. Just where the complexes are single unit species. So, when this for linear chemical reaction atols, we can actually describe what the attainable region is under the assumption that the Laplacian has eigenvalues in rational ratio. When this happens, the convex hull of trajectory is a spectrahedral shadow. And for linear chemical reaction networks, the convex hulls are always forward closed. Are always power closed. Therefore, the attainable region when the Laplacian has eigenvalues in rational ratio is a spectrahedral shadow. Okay, any questions so far? Right. Uh now so Now, so if I take a curve, there's this nice paper by Christian Ranistad and Ben Strompfeld, which talks about the convex hull of space curves. And now I'm moving gears to just talk about the convex hulls in general. So for algebraic curves, convex hulls are always semi-algebraic sets. The boundaries. The boundaries given by the semi-algebraic spectrohedral shadows and their semi-algebraic sets. So, for this particular curve, it has a very nice convex hull representation. There are two tri-tangent planes, one at the top, another at the bottom. So, this top tri-tangent is given by joining this point and this point and this point on the curve. And there is another one at the bottom joining these three points. And there is the surface, the green surface. The surface, the green surface, it's a degree 16 surface. It has part of it is on the front, part of it is in the back, and then there is a yellow surface where part of it is in the left and the other one is on the right. But we don't always get the nice representation of a curve when we're dealing with ordinary differential equations. But what we can do is get the points by integrating the ordinary differential equation. Integrating the ordinary differential equations. So when we have these points, computing their convex hulls will give us basically the polytopes, which will look like this. So this polytope we computed using the software Penzol, which is developed by our other to co-author and the colleagues Benjamin Wising, Angus Launay, Daniel Sherpoy. And once we have, so but So, but when we have these points, we get this polytope. But we can pick a finer set of points and we can get a final representation of the polytope. Now, this polytope is actually looking closer and closer to the actual convex hull of the body. So, this is the idea that we use in computing the convex hulls, which is more the points, the closer it is to the actual convex hull. Convex hull. And using this notion, we develop a theory of limiting phases of polyhohedral approximations of the convex hull to the actual convex part. So, right now there are some, so here is a definition of how we pick when we have the points, what is the kind of approximating polytop that we get. Polytop that we get is if we have a curve C, we pick a finite set A epsilon. Epsilon represents how close is the finite set to the curve, is if for all y on my curve, there is a x in the set such that the distance of the x from the y is less than epsilon. So, smaller the epsilon, finer is my set of points that I'm picking. I'm picking. And then I take the convex hull of this finer set and I get the convex body, which is A epsilon. And I'll use another definition of how I'm taking the distance between two compact sets is Hausdorff distance, which is the maximum of minimum between the points of the two sets. Of the two sets and the minimum of maximum of between the point of two sets. So that's the definition of my host of distance. Basically, if you take two lines, you take the largest distance between the farthest point and this closest point to one set and the other one, and you take the maximum distance of these two. So that's my host of distance and And so, using with some genericity assumptions on the convex hull, on the curve and the convex hull, these are the statements that we actually prove is that if I have a polytope which is approximately describing my actual convex hull, and I have finer and finer polytopes which are approaching to my actual convex hull, I take their host of convergent proper phase. Host of converging proper phases, and then its limit is a proper phase of my convex body. Conversely, if I have a face which is a simplex of the convex hull such that it is uniquely exposed, that is, there is only a single hyperplane which, when intersected with When intersected with the convex body, gives me the face that I am considering. Then there's a sequence of host of faces which limit to this face. This is all well and good, but what we really want to do is give the points to the computer and for it. To the computer and for it to output as a representation of the convex cell of the body. Now, that's the computational aspect that I would want that I'm going to talk about now. So if you look at this convex fall, its boundary basically consists of two tri-tangent planes, one at the top and two at the bottom. So these are two two-dimensional faces. And there is this. And there is this family of lines. It's a tool surface. So there is a family of lines. There is one-dimensional family of lines here. And there is one at the back. There's one on the right, and there is one on the left. So there are four one-dimensional family of one-dimensional faces. And there are two two-dimensional faces. We call these regions as patches. But how do we define them? Define them. So the main idea of defining them comes from using the notion of normal cycles. What we do is we take the convex set and its dual convex body. On the boundary of the dual convex body, we consider the exposed points of the convex body. And the normal cycle is then defined as follows: U and V. U and V are points on the boundary of the convex hull and the boundary of the dual convex body such that v dot u minus u prime where u prime is all the points on the convex hull is greater than zero. Basically, v is the normal vector to all the points on the and is pointing outside. Now we want to consider just the exposed points. Points. So the def uh pi1 and pi2 are projections on the first coordinate first boundary of the convex cell and boundary of the dual convex body. And psi phi is a subset of normal cycle and it's a patch if it is a connected differentiable manifold. The second projection belongs to the exposed set and Set and pi 2 vary continuously in the host of metric. So, think of it this way: so the one line on the family of lines will have the same point in the projection of the side. So, it's fibered, it's exactly one line. Would it be possible to show this on your picture? What this normal cycle corresponds to. What this normal cycle corresponds to your picture? Just to well, so it's a product, it's a product space. So I only have a picture of you know the convex set. So okay, so V is my normal vector. Think of V as my normal vector. So if pi 2 psi is an exposed point, think of V as the normal vector pointing outside. But this normal vector on the whole line is exactly the same. Right, so if this is my line, the normal, okay, just look at this face. If I have a normal vector here, it's exactly the same as I have a normal vector here. So it should vary continuously. So the fiber is exactly all of the points on the triangle. And if I take a normal vector corresponding to this particular line, then it's again. Line, then it's again going to all of these are going to be the same, and all of these should vary continuously. Okay, thank you. So, pi 2 is in the exposed set, and the fibers of pi 2 vary continuously in host of metric. And the first projection should have dimension n minus 1, which is, you know, all the so all the lines and the family of lines, it's the whole surface in three. The whole surface in 3D, so it has dimension 2, and size should be maximal with these properties. So, this is how we define the patch. There are, of course, interesting questions about asking about patches and normal cycles in general: whether they exist, or if they exist, are they Exist or if they exist, are they finite? If they're so for semi-algebraic sets, by Tarski-Seiner-Buck theorem, they're always finite, but in general, it's not all that clear. Okay, so here, so now we come to the algorithm. I'll just give a general, okay, I still have eight minutes, I'll give a general idea of what for What for the algorithm for n equals 2? We have an algorithm in general, but we have implementation for n equal to 2 and n equal to 3. It gets really expensive for dimension higher than 3. So I have this. Just to clarify, timing wise, I mean, eight more minutes is until the end of the question session. So we're a little bit over time. Oh, sorry, my apologies, my apologies. No, you have eight seven minutes. Sorry. Okay. Seven means sorry, okay. Yeah, okay. So, uh, I have this curve and I have points on the uh so yeah, I have this green curve and I take points on this curve. So, the convex hull will be the points and these line and the other set of points. So, the lines forming the arc and this big these longer lines. So, when we So, when we use the algorithm, what we do is we give the set of points on the curve and a threshold value delta as an input. Then we compute the polytope corresponding to the points that we gave. And it computes the what. So, for this step, we use the software PenSolve. It gives us vertices and edges. And then we construct a graph. And then we construct a graph on the edges. We take the edge, the two edges, and there is an edge between the two nodes of the graph if they have a common vertex and they are both piny. So we want to make sure whatever lines that we get on this part of the curve, whatever polytope lines that we get when we construct the Lines that we get when we construct the polytope, or the phases that we get are very, very, very small as compared to this huge line because this is a one-dimensional phase. Those would be, those are supposed to be zero-dimensional faces, which are basically the points for us. And we output the number of, well, isolated nodes of the graph G. So the isolated nodes would be the longer edges and the number of delta zero, which would be the connected. Delta zero, which would be the connected components of graph G, and these connected components would give us this arc. So the convex hull of a planar curve is basically consists of arc and the edges. And the connected components of GIs would be arc for us, and the isolated nodes would be the edges. And once we have the connected components, we can output the list of curve points where these arcs are. Where these arcs are, and this represents the ith arc. So, this basically tells us what our faces are and where they are. So, we know where our zero-dimensional faces are, where our one-dimensional faces are, because we know what curve points correspond to which edges of the actual polytope. So, this way we can actually get the patches out of it. And the longer edges correspond to the isolated nodes. To the isolated nodes, so this gives us the entire description of the boundary of the planar convex hubs. Now, okay, so for three-dimensional, we also used our algorithm and did a lot of experiments. So, there is a general theorem in the same paper of convex level of smooth curves, which says if C is my general smooth compact curve of degree D and genus G in R3, its boundary is an. Its boundary is an edge surface that has an irreducible degree given by this function in d and g, and there are this many number of complex charter engine planes. So we do this for degree six up to, well, I think 28, but I'm only reporting it here for 26. So there are, let's say for degree 14, there are 1320 complex tritangent planes. And the edge surface has this degree when computed is 286. But here on our experiments, when we ran it, so this is the maximum that we get for this is what it looks like. So these color. So these colored figures are one-dimensional family of one-dimensional faces. We get 20 of these patches, sorry, 30 of these patches, which is maximum of one. And the triangles, there are 20 of these triangles. So there are 20 of real triangles which correspond to the boundary of this convex. All of these implementations are available at this link. Link for software and the trajectories. And there's a little bit more which I'm not going to say is that if we have the boundary of the convex hull, we can also figure out the points where this convex hull is actually forward closed, where it is not forward closed, and talk about how the vector field behaves on the boundary of the convex hull. And I think I'm going to stop here. I'm going to stop here. Thank you. Thank you very much. If there are questions, oh, Jodis wonder hulen wants to ask a question. Yes. Hi, can you hear me? Yes, I do. Okay. Just to link with model theory a little bit, I wonder already in the planar case, In the planar case, are these if you expand the reels with these attainable regions, will you define an o-minimal structure? If you expand more? So yeah, the question is if by taking these attainable regions, whether you can Sustainable regions, whether you can still have some kinds of oscillations inside your that remains in the picture or whether you somehow get rid of all oscillating behavior that you may have in your vector fields. These boundaries look very tame, right? Very tame, right? Very so. So, usually in model theory, this is modeled by O minimal structure, the concept of O minimal structures. And in the particular case of linear systems, you mentioned that often they're actually semi-algebraic, which points in the direction that this might be a more general view. That this might be a more general phenomenon? So I can say why it happens like that for linear systems. It's particularly because, under the conditions that I imposed on the Laplacian, it turns out to be an algebraic curve. And for algebraic curve, we know that the convex hull is actually semi-algebraic. But we don't know what happens when my curve is analytical. When my curve is analytical. Right? Or the trajectory of an so you will definitely have cases where parts of the boundaries are curves themselves. You can see that well in the in the but but what is annoying for not having all minimality is that you have very long stretches. Very long stretches which are not which are analytic, but which are also oscillating. And this, I think, somehow it cannot happen. You can only... So if you take, for instance, something like the sine curve and you take convex holes of parts of the sine curve, then the oscillation will just disappear, right? So it somehow seems that you get something which is closer to what, yeah, in model theory you have the restricted analytic function, so Rn, that you would get something like that from the point of view of definable sets. Um I don't know, maybe you're right, but uh let me just say one more thing. Maybe if it helps you think about it better is I don't really care what happens for me inside the convex hull, right? What I care is that every time I have a vector field on the boundary, the vector field should be pointing inside. Pointing inside or is tangential, right? Only then I can never find a point on the boundary such that if, because if it is pointing outside, I can pick that point on the boundary and it will just waver off. So, if there is some sort of oscillation behavior inside. Some sort of oscillation behavior inside the convex hull, I don't think I would care all that much. No, so yeah, so that's why I asked the question. Is that the natural conjecture to try proving that these boundary regions can only generate o-minimal structures from a logical point of view? Uh I I I don't know well I think we can summarize it. It seems that they are usually better behaved than the trajectories themselves. So it might be. We can talk more in the conf session. Are there any other questions? Then I have a short question. So, in the beginning, you had two properties: convexity and forward equivalence. And somehow, you were mostly talking about convexity. Is it because you restrict to linear case? We eventually started just talking about how to even describe. How to even describe a convex hull, right? So probably just reduced to discussing about how to describe the convex hull rather than how to describe the attainable region, because even if we have an attainable region, that's also convex in some sense. But saying what's the boundary is, it's already not so clear. And in chemical terms, convex how is that you can take the Can take the states of your reaction different points and mix them, but you're not allowed to continue reaction further after you mix. Ideally, you can, I mean, that's the definition of attainable region. You can do both of the processes. Yeah, but if you meet forward closedness, then this means that you can only mix. Is it Is it um a forward closed is so forward closed? It's a property of the set, right? So it it so for being forward closed, it doesn't have to be convex. But when we introduce the concept of mixing, then it becomes convex. Okay, okay, okay, thank you. Are there any other questions? None, let's thank the speaker.