First of all, I wanted to explain to you a little bit of why people started looking at this problem of tree colouring PTV graphs. So the cake colorability problem were just vertex colouring, so each vertex gets a colour, and whenever two vertices are adjacent, they get different colours. And now the problem is given a graph G. And now the problem is, given a graph G, is it colorable with K colors? So, this is one of the first problems which was proved to be NP hard. But what is it about this problem that makes it hard? Is there a certain structure in some graphs that makes this difficult? Yes or no? So, a way to study this question is to restrict the class of graphs and then to see if the problem is still hard. So, like a very natural model that people started studying is restricting it by looking at the class of Restricting it by looking at the class of graphs which don't contain a certain graph, H, as induced subgraph. So throughout my whole talk, I'll be talking about H3 graphs that will always be induced subgraphs. So now the question is, is K colorability MP hard or solvable in polynomial time? Where polynomial time just means polynomial number of steps in terms of the number of vertices of the graphs that is given as inputs. So you yeah, I mean you always need to sort of specify in what's parameter. Specify what parameter. So, in order to study this question, just a simple observation is that whenever we make the class smaller and we can still show hardness, we also get it for the bigger class of graphs. So, when we, this result that graphs of Kurt at least G, that it's MP-hard in this class of graphs, it also shows that it's MP-hard on HP graphs whenever H contains a cycle as a new subgraph. So, why is this? Well, if we have So, why is this? Well, if we look at H3 graphs and we look at the cycle length, say it's like length ten, then we look at the class of graphs of curved at least 11, and we know that the H3 graphs contain this graphs of curved at least 11 as subclass. And then another result is that edge coloring is NP-hard, even already three-edge colouring. And edge coloring is the same as vertex coloring, the line graph. And line graphs have. And line graphs, as everyone knows, I guess, are a subclass of claw-free graphs. So, this means that whenever our graph H contains a claw as an induced subgraph, we know that the problem remains empty-hard. So, where are we at now? We know it's hard when it contains a cycle or when it contains a claw. And when this is not the case, you can actually show that the graph has to be a disjoint union of paths. So, now it's quite a natural thing from here to restrict to the case where H is Restrict to the case where H is connected, and that's how people arrived at this problem of K-colorability on PT-3 graphs. So, people have looked at this a bit, but I'll first go through a couple of very easy cases. So, if we let PT denote the path on T vertices, then the very trivial case is P2 free graphs. They just don't have any edges, so it's easy to decide. P3-free graphs is still fairly easy, so whenever you're P3-free, So, whenever you're P33, you're a disjoint union of cliques. So, say five colorability is very easy. You just see if one of the cliques is at least of size six. And then after that, P4-free graphs are still kind of trivial. So, these co-graphs, they're perfect, so you can use that, but you can also prove it directly for P4-free graphs, that's still not too hard. So, the first non-trivial case is P5-free graphs. And a bunch of authors decided this in 2010, that this is possible. This in 2010, that this is polynomial time. So, the main idea in their proof is that two colorability is polynomial time. That was known already. You can reduce it to two sets. And if you look at k colorability, you can actually reduce it to k minus one colorability, k minus two colorability, et cetera, and eventually reach two colorability by finding this sort of small dominating set. So, if you have this dominating set, you just try all possible colours for this dominating set, and now for the remaining colours. And now, for the remaining colours, you kind of hope that the number of colours has reduced by one and that you can continue in some way. So, that's very sketchy, but sort of the main idea in their argument. And after that, a bunch of authors a bit more recently settled some of the other open cases. So, I'll talk about these hardness results later on in the talk. But these other polynomial time results, they're very quite technical and difficult papers where they reason about this absence of a P6 or a P7. This absence of a P6 or a P7 to show that the graph must have some kind of nice structure which they can then exploit for doing some kind of algorithm. Okay, so this leaves this sort of obvious gap here for starting from P8. What is the complexity of tree colouring? So in our joint work, we can't actually answer this question whether it's NP heart or polynomial time. But what I'll now talk about from our joint work is that we can About joint work is that we can do it in sub-exponential time. So, our algorithm is actually very similar to an algorithm from Browse and independently, Pasco, Martin, and Tusa for maximum independent set. So, they showed you can do it in sub-exponential time for PTP graphs for this problem. And we sort of adapt this algorithm to show that we can count list three colorings of PTP graphs in time about 2 to the square root n for n the number of vertices. So, note that. Of vertices. So note that, yeah, this three colouring, what I mean by this is that each list is a subset of one, two, three. Not to be confused with three list colouring, where we just place the assumption that the lists are size at most three. But we really know that all the lists are subset of one, two, three. Yeah. So our algorithm uses some structural results of PT3 graphs. So I'll try to explain some of those first. Of those first. So, sort of very easy observation is that you can always guarantee a little, like, a reasonably high maximum degree for a PTP culture. So, I'll just try to sketch you a little bit of the argument. I don't know if you can see this, but I think a lot of people have seen this argument. You start off with the vertex V, and now you expand out this neighborhood, its second neighborhood, up to its T neighborhood. But actually, whenever you would have a vertex in the T. Whenever you have a vertex in the T neighborhood, you can find a path back to, and this would have been an induced path in your original graph, which you assume doesn't exist. So this means that actually starting from that point of time, you have reached the whole graph, but each time you expand it by most a factor of delta. So from that, you get some kind of, you get approximately the inequality that the max degree to the power t needs to be at least n the number of vertices. So then Vertices. So then going back to the lemma, but we can, you can, yes, you can get a bit better bounds than this, actually, but you get some kind of lower bounds on the max degree. And this is actually enough already to get a sub-exponential time algorithm. And this is what they originally used for the maximum independent set algorithm as well. But then they later improved the exponent using small three-width. So three-width is some kind of graph parameter that I won't explain in the talk, but if you have In the talk. But if you have small three-bits, say at most log n, then you can solve all kinds of problems efficiently. So in our case, we have a bit of an improvement on this. So what we show is that you can also bound the path width and the tree depth of PTP crops. So in terms of the algorithm, this doesn't matter too much, but it does show another sort of structural result of PTP crops. So PathWidth and Tapper. Graphs. So, PathWidth and Tap are just two other crop parameters that some people are interested in, which have this relationship between them. So, I can explain a little bit more about this at the end of the talk if people are interested. But yeah, this, so the reason why this comes up is that basically what we can now do is that as soon as we reach a graph with small maximum degree, we know that the graph must have small three-width, so we know that it can do it. So, we just have to sort of reach this situation where the graph has small maximum degree. Maximum degree. Is this clear to everyone so far? So I'll just go into the algorithm then. So first, it's a technical assumption. Whenever we have a small number of vertices, we can just do whatever we want, and we can always change the constants in front of our polynomial. So exponential time in our case. So this is just sort of a technical assumption by which we can assume that the number of vertices. By which we can assume that the number of vertices is sufficiently large. And now, if some list is empty, then we know it's not list colorable. And if there's a vertex with a single color in its list, we can just assign the colour to the vertex. So what does this mean? We remove the vertex from the graph and we update the lists of all of its neighbors. So if one of the neighbors have this color in it, then we remove it from it. And now, whenever we see a graph which is not connected, we can just do whatever we're going to do. Just do whatever we're going to do for every component and then multiply the results because the total number of colourings will just be the number of colourings on all of its components multiplied together. Now, if we have at some point reached a state with small maximum degree, then we can use this small 3-bit or 3-depth or path width to use folklore algorithms to solve the problem. And finally, if this is not the case, we just do the stupidest possible thing. The stupidest possible thing, we just take a vertex of maximum degree and try all possible assignments of colors for this vertex and sort of do all these kind of possible branches. So this is the algorithm, and the algorithm for maximum independent set is actually very similar. That's also sort of the most trivial thing you can do. You pick a vertex, either you put it in your independent set or you don't put it in your independent set. And the reason this worked for maximum independent set was that whenever you pick a vertex of maximum degree and you decide Maximum degree, and you decide to put it in your independent sets, you actually know that the entire neighborhood of this vertex won't be part of the independent sets. So you can remove both the vertex and its entire neighborhood from the graph. And because you always took something of high degree, you know that at each stage the number of vertices drops by quite a lot. So in one of the iterations, it drops by a little bit, and in the other branch, it drops by a lot. And in our case, we're in a bit of a similar situation, but But we don't really know about anything about how much the number of vertices will drop with each step, because in principle we just remove the vertex that we've assigned a color to. But in fact, we can always guarantee that something else drops. So for this, we define something that we call weight. That's just the sum of the list sizes of the vertices. So instead of showing that the number of vertices drops a lot each step, we'll show that the weight reduces significantly in all but one step. Significantly in all but one step. So I'll just sort of go through this argument with you now of in what way this weight drops. So, first of all, what do I mean with this? So whenever we choose to colour vertex V by colour C, we know that the weight will drop exactly when this colour appeared for one of its neighbors. So whenever the colour appears for one of its neighbors, we know that we can remove this colour from its list. So if it used to be present in the list, List, if it used to be present in the list, then the way it's constructed. So that means that suppose now that we had two different colors that we wanted to assign to our vertex, and for both of them, the weight doesn't drop by a lot. That means exactly that this color doesn't appear in the list for this vertex, for at least half of its neighbors. So we have now we have two sort of subsets of the neighborhoods, and both are strictly half of the size of the total neighborhood. Of the total neighborhood. So, Pigeonal principle shows us that we have one neighbor of P for which both of the colors weren't present in the list. Okay, but now these lists were subsets of one, two, and three. And now we know that there's two colors that are not present from one, two, three. So we know two distinct ones. So we know that the list has size at most one. So but if you now think back on our algorithm, we're actually. Our algorithm, we were actually quite careful to ensure that whenever we chose a vertex of maximum degree, we actually knew that the lists of all the vertices were size at least two. So because of this sort of contrapositive of what we had above, what we see is that the weight reduces by at least half of the degree for all but at most one colour. And after this, the exact same analysis goes through. So you know that in sort of one branch it decreases. That in sort of one branch it decreases by a little bit, but for the other two branches it decreases by quite a lot. And we know that the maximum degree is quite large. So we selected that each day is of quite a high degree. Okay, so this gives us the sub-exponential time algorithm. But yeah, I now want to go back to sort of this hardness questions. So what does this still, why is this still possibly interesting to have a sub-exponential time algorithm? So the fact So, the fact that it's hard, this just means that for every three-set instance, we can find some PT-3 graph G such that this instance is satisfiable if and only if the graph that we created is K-colorable. And moreover, we have this assumption that the graph we create can be at most polynomial in size of our instance. So, this last assumption is actually quite critical because if we would create a graph which is really exponential in size of our instance, then even if we have some kind of bulk. Of our instance, then even if we have some kind of polynomial time algorithm, it doesn't help us anything because it's polynomial in some exponential is still exponential. So, but then actually, if you look at all the hardness proofs for the PT-free graphs, but also for cycle-free and for the claw-free graphs, they actually didn't blow up the instance size at all. So it was linear in terms of the instance size. And that means that means. And that means that if you assume the exponential time hypothesis, then no sub-exponential time algorithm could have existed in those cases. So the exponential time hypothesis just says that there's no sub-exponential time algorithm for tree satisfiability. And we get this result now because whenever we would have had such a sub-exponential time algorithm, then we could have used this reduction that they give in their papers to give a sub-exponential time algorithm for three sets, which we For tree sets, which we then assume doesn't exist. So, what does this tell us about tree colouring of PTP graphs? Well, first of all, I think it's slightly interesting because it does separate out somehow this case of tree colourability of PTV graphs that people have been struggling with for a while from the other cases. But, second of all, it also tells us a little bit about what the NP completeness proof should look like. Because if you're a believer of the exponential time hypothesis, Of the exponential time hypothesis, then that means that either you have to start off from a problem that's not three set, like something that has already blown up, started from three set, or you should blow it up when you do your proof. You need to blow up the instance size in some kind of way. So it does give us a little bit of information of what the complexity picture is like. So are there any questions so far? So for the rest. For the rest of the talk, I just wanted to go through some related colouring questions because it's also for a workshop, so I thought it would be nice to have some open questions. But first, I'll go back to a very related question that mentioned some sort of simple results. So, this is what I mentioned before as well, but if this set size is at most two, then we can actually list three colour in polynomial time. There's some kind of reduction to two set that can be done, and then to d finding a directed path. Than to finding a directed path. And now, if we have some kind of dominating set, which is not too big, then we can just try all possible assignments of colours for the vertices in our dominating set. And because we're list three colouring, we know that after that, at least one neighbor is colored for every vertex. So the lists are after that of size at most two. And then the bullet proof above, point above, shows that the rot remains can be done in polynomial time. So these two facts. So these two facts, they actually you can use them already to show that diameter two graphs can be three colours in some exponential time. It's very much the same analysis as happens in our paper. And I think this is a very interesting open question as well. What is the complexity of three colouring diameter two graphs with a bit of a similar flavor to the PT3 graphs case? And I just wanted to mention as well that it is known already that if you go to diameter, It is known already that if you go to diameter three graphs, that it's then NP hard, even if the graphs are assumed to be triangle-free and of radius two. So I thought this was quite an interesting result and question to mention. And I'll just mention a couple of more questions that I think are interesting. The first of all, our sub-exponential time algorithm actually also works for graphs without induced cycles of length greater than t. In our paper, we also posed the question of what happens. Also, pose the question of what happens for this class of graphs. And as you might have seen on the page of the workshop, they also ask about triangle and PT free graphs. So in general, there's some open questions for H1, H2 free graphs still. And at the start of my talk, I mentioned that we were left with the case of disjoint unions of paths. So for this, for the unconnected case, there's also several open phases starting from Open phases starting from eight vertices. So there's one result that I wanted to mention here about that if you take P6 and a bunch of P3s, then it is known to be polynomial time. And for all, like I said, all graphs were at most seven vertices. And then finally, so I have one more slide, but some questions after this, but for this slide, the final one, I recently came across a paper that was mentioned. Across a paper that was mentioning this result, this question about chordal bipartite graphs. So, as everyone might know, bipartite graphs are three-colorable, but for this three-colorability, it's actually MP-hard. But now, with this assumption of chordal, it might become easier again. So, this might also be quite a nice question for a workshop. And yeah, this this these were spoilered a little bit on the in the previous talk. In the previous talk, but for maximum independent sets, the case of P7 free graphs is still open, and after that, and also subdivided claws, as far as I know, are open. So, claw-free graphs, it actually is polynomial time for maximum independent sets, even if you subdivide the claw once in a single edge. But all the other cases are open for subdivided claws. And chromatic number on even all-free graphs is open, but in particular, at Barbados last year, the question got asked about even The question got asked about even all free circular arc graphs. And I also wanted to mention another question that came up at the workshop last year that also got published by Kasperswong and Polisma about chromatic number on C44P1, C4P7 and C4P8 pre-graphs. I haven't thought that much about these questions myself, but maybe these are quite nice questions for a workshop as well. And let me maybe also mention that the results. Maybe also mention that the results that we have for a sub-exponential time algorithm, you can also compute some kinds of graph polynomials which encode other information about your colorings in them as well. But yeah, thank you all for your attention. Thank you very much. Any questions?