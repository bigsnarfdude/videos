This is work done recently in different collaborations. And in particular, it's work done with Simon Wood, who is in the audience. And whenever I miserably fail to answer questions, then Simon is there to help me. And so I think to this audience, the notion of rigidity. The notion of rigidity will need a very little introduction. But still, let me quickly go through this notion. And let's assume that everybody here knows what a monoidal category is. It is a category with a tensor product. And in this, so depending on from which community you come, you can safely imagine here the representation category of a vertex algebra. You can imagine the You can imagine the representation category of a Hopf algebra. And then the right dual of an object is another object in the category, which comes with two morphisms. It comes with an evaluation, which graphically we would write in this way. So this is a morphism from C tensor C into the monoidal unit, and it comes with a co-evaluation, which is a morphism from the monoidal unit. From the monoidal unit, the trivial representation, if you wish, into the tensor product C box tensor C dual. And this is not an error that the order of the objects here and here is different. That's necessary for the definition because the property for a duality is that the usual zigzag relations hold. So, for example, this So, for example, this here, which is a composition of a co-evaluation and an evaluation, is equal to the identity on the right dual, and there is a different, another zigzag relation. If you talk about right duals, you can define left duals in a similar way. You simply put a mirror here and you look into the mirror and you get the notion of a left dual. And the category is called rigid. And the category is called rigid if all its objects have both a left and a right dual. And the obvious fact I want to emphasize is that rigidity and the existence of a rigid dual is a property. And we are very much used to this property. So we are used to this from the very first term at university when we learned that the category, monoidal category of finite dimensional vector spaces is rigid. And whenever Is rigid, and whenever I will say vector space or algebra, then secretly I will have in mind finite-dimensional objects. Then this generalizes, so for example, finitely generated projective modules over a ring are also rigid, which shows that they are very naturally categories that are not rigid. And then the category of finite dimensional modules over a finite dimensional hop. Modules over a finite-dimensional Hopf algebra over a field is rigid. Essentially, the notion of a Hopf algebra has been designed in such a way that this holds. And the category of tangles is rigid, and indeed, rigidity appears in many contexts in quantum topology. So, two consequences of rigidity are the following: one. If I take the functor which is given by An endo functor of C, which is given by tensoring with a certain object C0, then this functor has both a left and a right adjoint. And if the category has a good notion of, has a good set, is a good setting for homological algebra. And later on, all the categories I will have in mind are to simplify matters, finite categories, then the Then the tensor product is exact. Another property we are used to, and which comes in the graphical calculus by the fact that this symbol makes sense for X tensor Y, the Y dual X dual is that the dual is omonoidal, by which I mean that it reverses the order of X and Y. Of course, you have seen all. Of course, you have seen all this many times. Now, one point is that if we are interested in conformal field theory, in particular, if we are interested in conformal field theory, which has chiral data that are not semi-simple, then we should be interested in vertex algebras. And let's fix a class of vertex algebras where there is a nice tensor product theory. Cancer product theory. This HLZ refers to this long and impressive series of papers by Huang, Lipovsky, and Chang. Well, then we have examples where the tensor product is not exact. So really, in this setting, asking for rigidity is asking for much and is asking in particular for too much if you really want to investigate the corresponding. Investigate the corresponding conformal field theories. So, hence, and this is the question I want to discuss in this talk, what is a good notion of duality for vertex algebras and for vertex algebras, I always have in mind vertex algebras to which this theory here can be applied. So now. Now, let's start to study a toy example. And what I'm doing is very simple. You could do it in any algebra class, and it's still, in my opinion, instructive. So we are working over a field, no particular requirements on the field, and we fix a finite dimensional K algebra. Then the tensor product of if B and B If B and B twiddle are A bimodules, then you're familiar with the usual tensor products. So the tensor product of two bimodules is defined as a co-equalizer. So here we have the difference of left action of A on B and the right action on B twiddle. And it is. It is an important fact that this tensor product is right exact. Now, there is kind of an obvious candidate here for a dual. This is take an A1, A2 bimodule. And for the moment, I allow that A1 and A2 are different. Then we can take its linear dual and endow it with the structure of an structure of an A2A1 bimodule in a very standard way by acting and then applying our linear form. This defines an involitive contravariant functor, involative because all our vector spaces are finite dimensional. And this is definitely a candidate for a good dual, but this functor fails to be optimal. Fails to be opmonoidal. So, this, if you look at the dual of a tensor product of bimodules, it is not the tensor product of the duals. If I'm supposed to give you a counterexample, then let's go to the specific case where M is the monoidal unit, so the algebra itself seen as a bimodule over itself. Then we have here A, then this simplifies to N, and then. To n and then m was put equal to a. But then you see that here we have a functor which takes g and a dual. And tensor in which a dual is a famous functor. That's the Nakayama functor. And obviously the Nakayama functor is not necessarily trivial. So for example, in general the Nakayama functor maps projectives to injectives and vice versa. To injectives and vice versa, and it induces an involution on simple objects. So, I have a question if you don't mind that I interrupt. When the dual of a bimodal exists, is there a formula for the dual? I mean, you gave us something which is not the dual. Can you tell us what the dual is when it exists? You're talking about a rigid dual. Yeah, yeah. Well, you see that. You see that one necessary, it is a condition on the if you want to have that every bimodule has a dual, then you should definitely a necessary condition is that A dual is isomorphic to A. So as a bimodule, and that's, of course, related to Frobenius. But I'm not sure I can immediately give you a criterion when does a bimodule over an arbitrary finite dimensional algebra have a rigid dual? Simon, if you find the solution, then interrupt me. Okay, thanks. Yeah. So, this failure of op monoidality, we take it as a definition. So, So we take, and I should here better put a to the minus one for some reasons. We take here, we introduce a second tensor product, which is defined in this way. And since g is a contravariant functor, this tensor product is left exact. So this left exact tensor product has a different monoidal unit, namely, if you take, if you pick a dual and you apply A dual, and you apply A G to it, then we have G of A dual, but G of A dual is A, and tensoring over A gives a monoidal unit. So naturally, the category of bimodules comes with two different tensor products, a dual and sorry, a right exact one and a left exact one, and they have different monoidal units. And if you are bored by this part of the talk, By this part of the talk, then, or if you're looking for an exercise for your students, then ask them to prove the following isomorphism, functor isomorphism in the category of A-by modules. So if we would have a rigid category, then we would put here at this place the monoidal unit, and we would take here a dual, but for bimodules, the general. But for bimodules, the general correct formula is to take here A dual, which is not the monoidal unit for the tensor product we are using here. So, of course, this is a structure that's known. A dual is a dualizing object for in the category of A bimodules. And let me quickly illustrate with very classic. Quickly illustrate with very classical stuff the usefulness of this type of structure. So, the Einberg-Watts theorem from the 50s or 60s, it tells you that a right exact functor can be always represented by tensoring with bimodules. And f of A1 is a bimodule. Well, since F is a functor from A1 mod to A2 mod, it is bimodal. To A2 mod, it is by birth a left module over A2, but on A1 we have the action of right multiplication by any element, applying the functor to this. This becomes also a right A1 module. And then it's a classical fact of algebra that any right exact functor can be written in this way. So, of course, I don't want to talk about Of course, I don't want to talk about this case. I now want to take a functor which is not right exact, but which is left exact. And to reduce it to the previous case, then you see that if I take first the dual, apply h, and I go back, then I get a right exact functor to which I can apply the classical Eilenberg watts to write this right exact functor as tens. right exact functor as tensoring with some bimodule and applying g to the minus one to these two sides, we see that h of m is g to the minus one of this tensor product here. Now you see that this is just this second tensor product which we introduced and the Einbeck-Watts theorem for For left and right modules, become left and right exact functors become completely parallel. So it can be written down by tensoring with a bimodule that's applied, that's obtained by applying the functor to the monoidal unit. For right exact functors, you have to take the monoidal unit of the right exact tensor product and Right exact tensor product, and for left exact functors, you have to take the left exact tensor product and the corresponding monoidal unit. And actually, this is secretly a much bigger example. If you take bimodules, then you can, this category I'm looking at here is secretly a category of representation over the simplest possible. Presentation over the simplest possible HopfLJ proite. Now, if you take a HOF monad on a category of bimodules, which has a certain additional property, that's what people typically call a Hopf-LJ proid. It is known that Hopf monads preserve this type of duality structure. So you will find a similar type of duality structure on any HOPF on the representation category. On the representation category of any Hopf LJ protes. So, rigidity is not the natural duality structure for Hopf-LJ protes, and I want to convince you in this talk, it is also not the natural duality structure for vertex algebras. So, what is the natural structure? So, let's go to abstract things from our settings here. So, we are given a model. Here. So we are given a monoidal category. It has a monoidal unit. It has an associator and the left and right unit constraint. And I won't consider them in the sequel. And then there is an additional object. This additional object was a dual in the previous example. So an object in a monoidal category is called a dualizing object. Is called a dualizing object if for every object y, this functor here is representable, is representable by some object which depends, of course, on y, which we call g of y. And the contravariant functor is an anti-equivalence. That's very important. That's implementing effectively finiteness conditions. So the basic thing that The basic thing that's behind these quotent de Guertier categories is the following thing. So, a monoidal category is a quote de Guertier category is a monoidal category together with a choice of a dualizing object. And the word choice has to be taken very serious. Remember that before the The having a rigid dual was a property and not a choice. Here, the choice of a dualizing object is a choice. So this is really structure. And I think that's already my first comment. Now it's the second comment. So the choice of a dualizing object is structure. Actually, Structure. Actually, if you have a dualizing object, you can tensor with any invertible object, and it gives you different dualizing objects. And I shouldn't say that quote-que-quertier categories are a recent invention. They are known since the 70s as star autonomous categories. Actually, if you look at a little-interrupt and ask yet another question. And ask yet another question. Does that give you all dualizing objects? This procedure of tensoring with an invertible? Yes, indeed. Yeah. Thank you. Yeah, so that's. I'm just seeing that there are several things in the chat. So if there's anything in the chat I should notice, then please tell me and interrupt me. So one of the organizers should stop me in this case. Is this okay, Robert? Yeah. You, Robert? Yeah. Let me interrupt you. So, you define the growth of the value category as the existence of a journalizing object, but there is another definition that there exists the internal harm functor. I will come to these two equivalents. I will come to the internal harm in a moment. So, thank you. So, maybe concerning the star autonomous categories. Concerning the star autonomous categories, in the early literature, these categories are automatically assumed to be symmetric. So there is a braiding and even a symmetric braiding. I mean, these days, we don't want to do this. So you have to be a bit careful to take results from this period. And also, in a similar vein, there is a notion of linearly distributive categories. So we have two tensor products. We have two tensor products and we have a duality, and such linearly distributive categories with a duality, which is then called a negation. That's something people are looking at in linear logic frequently again for symmetric categories. But I think we agree we need to go beyond the symmetric case for vertex algebras and for quantum topology, we should also study the case without any. Should also study the case without any braining. Okay. So now comes the internal hum. So the point is that the interform the tensor product is right exact, whenever the notion of right exact makes sense. And the internal home exists, and the internal home can be given very explicitly. Very explicitly, and it can be given in terms of this functor g. G was this anti-equivalence from C to C. And of course, now you can play with the axioms. If you are just asking that some inner home exists, then this is not enough. But if you assume that the inner home can be represented in this form, it's not a hard. Presented in this form, it's not a hard exercise to show that you are equivalent to a quote de Guettier category. And I should also mention that you can define a second tensor product exactly the way we did it before. It is left exact, and the monoidal unit at this point is the dualizing object K. K. And the following can be shown. And the paper for this is a paper by Boyachenko and Trinfeld. The double dual is monoidal. So the dual itself is not op monoidal. That's what's giving us the second tensor product. The double dual is a monoidal equivalence. The whole thing very nicely works with a braiding. So there is a node. With a braiding, so there is a notion of a braided Croton de Coitier category. Then, without a braiding, there is a notion of a pivotal croton de Goetier category. Pivotal is the idea is that we have a good identification of X and its double dual. So, this would be a monoidal natural isomorphism of the identity. Isomorphism of the identity functor in the double dual. This would be pivotal in the rigid case, but there is a good notion of a pivotal croton digwetier category. And if you combine the two, there is a notion of a ribbon-crotenty Gwertier category. At this point, you are quite happy because these are all things we like and we need both. Like and we need both for vertex algebra as for quantum topology. And there are a couple of more encouraging results. This is a paper by Lucas Müller and Lucas Wolke a year ago. And they showed that you can actually characterize pivotal quotantier categories, so no braiding in terms of algebras, actually cyclic algebra. Actually, cyclic algebras over a suitable operator. This is a little disk operat in a cyclic little disk operat in one dimension since there's no braiding. And they also found for, and here I should actually replace this by the word for written quote and dequati categories, a similar characterization. And building on this, they actually showed that. Actually, showed that these quotant equity categories lead to representations, well, not of mapping class groups. That's what we would like to have, right? Mapping class groups are groups of diffeomorphisms of surfaces up to isotopy. Here, these are not all diffeomorphisms that you can represent, but only those which extend. Only those which extend to a handle body. So, if you want to have a rough idea in mind, then for the torus, you don't have the modular group, but you have just the daintwist along the cycle that's contractible in the handle body plus s squared. So, in this sense, this looks like a good start. Now, let me explain an action. Let me explain, and actually, for the vertex algebra people here, the subsequent chapter will be very simple and will have essentially a lot of work has been done exactly by these people here. So let's study now a vertex algebra to which this HLZ theory of logarithmic tensor product applies. And let's assume. And let's assume that we are given two abelian groups for the gradings, and we, the vertex algebra itself, has grading by A. So think about A like a root lattice. And then typically for the modules, you should be able to admit a finer grading. So our modules will be graded over this bigger algebra abelian. Algebra abelian group and then assume that we are given a nice module, a strongly B-graded generalized weak module. So in particular, we do not assume that the Virasoro algebra or the zero mode acts semi-simply, but it can have a nilpotent part. And H here, H, which is a complex number, that's the pre- Complex number, that's the principal value, not necessarily an eigenvalue. And there is an additional B due to the grading group, capital B. And part of our assumptions is that these homogeneous components here, if I take the L0 principal value and m, that these are functions. That these are finite dimensional. So we can take the linear dual. This is the linear dual. And it's not that we can take it. It appears in HLZ, right? And the linear dual has the structure of a module over the vertex algebra. And in order to do so, they are using something that's called the opposed field map. Opposed field map. And what I want to emphasize here is that if you define this opposed field map, then the Virasoro algebra, so the conformal structure of V, that's actually enters. So there is a choice of structure on the vertex algebra, the conformal structure, and that gives us a notion of a contract region dual. And the contract gradient dual is involative. That's, of course, also due to the fact that we don't want linear algebra to mess up. So we have finite dimensional components. And it is quite important that the contract gradient is not necessarily isomorphic to the vertex algebra itself. And the W23 is an important example. And the W23 is intellectually in the vicinity of percolation problems. So these are not, if you are interested in CFTs, these are not cases you should rule out, but you actually need to consider them and to develop a decent theory for them. And if you have now the vertex algebra, it has a clear categorical role in the representation category. The representation category. It is the monoidal unit. So you need a categorical structure that has a clear categorical role for this other distinguished object, the contragradi dual of the vertex algebra. And that's actually achieved in this setting of Code and Dequétier categories. It is a dualizing object. It is a dualizing object, and actually. Actually, before I want to explain why this is true, and again, HLZ did all the work, let me very, very briefly highlight the way the HLZ tensor product is constructed. Well, you first, if you want to take the tensor product of two modules over V, then you tensor them and you... Then you tensor them and you take the dual. This is algebraic and this is very, very big. Then you are looking inside for a subspace on which the idea is that the V action on M1 and M2 coincide. And actually, this subspace is a bit too big to be in our class of representations. So you're specifying again a subspace. Again, a subspace. But please keep in mind that the first step in defining things is not by taking a co-equalizer, but it is by taking a subspace. So morally, this is an equalizer. And so you could argue that this left exact tensor product even comes first, and then the ordinary tensor product we are used to is defined by. Is defined by applying the contract region dual to it. And that's, of course, very similar to the formula we had for our tensor product, which was, sorry, I should write it correctly if I'm repeating it. G of n tensor g of m. So in this sense, we have to, it is not completely crazy to have a left exact tensor. To have a left exact tensor product in the game as well, and actually, HLZ did the crucial work for us. They proved an isomorphism of intertwiner spaces. If I write them in terms of the category, then these are isomorphisms of homes, homes between tensor product. And you see, if I'm now specifying here M3. here m3 to v uh sorry to v prime then um i get here by applying this identity i get here um v double prime that's this m3 prime but v double prime was equal to v and y prime in this argument and well v was the monoidal unit so i'm left monoidal unit. So I'm left with this identity, and I've verified essentially based on all the hard work of HLZ that V prime is actually a dualizing object. And remember, what V prime is, require the opposed field map. And in a sense, it depends on additional structure, it depends on the conformal structure of the vertex algebra. Vertex algebra. Well, now, rather briefly, there is an interesting example that we study in our paper, namely, if you go to the Heisenberg vertex algebra, well, it's known for more than 30 years that if you compute central extensions of the semi-direct sum of the high Semi-direct sum of the Heisenberg algebra and the Verasovo algebra, then the space is three-dimensional. So one is the Verassovo central charge, one is the central extension of the Heisenberg algebra, but there's an additional parameter. And this additional parameter actually translates to the fact that for the Heisenberg vertex algebra, there is a family of conformal vectors. So probably I don't So, probably I don't have to explain notation if I'm saying that the thing marked in blue now is the standard conformal vector in the Heisenberg algebra. And if I'm now picking Heisenberg algebra based on some finite dimensional vector space, if I'm picking a vector in this vector space, then I can modify the The conformal vector, it will have a different Viraso horoscal charge. And well, this is called the Feigen-Fuchs boson, or we call it with many other people, the Feigen-Fuchs boson. Obviously, if you want to go to a very simple case, if you want to compactify the boson on a lattice, and maybe we make like And maybe we make life simple for tonight by saying that the lattice is just an even lattice. Then you have to make an appropriate choice for gamma. I don't want even to discuss this. Well, in this case, the representation category is very easy to describe as a braided monoidal category. Rated monoidal category, namely, we take the dual lattice. Well, due to our conditions, L is a sub-lattice. The quotient here, in the simplest case, will be a finite abelian group. And let's even assume that the finite abelian group is cyclic. And then it's also very well known that the possible braidings and Associators are classified by third abelian group cohomology. And this gives us, in any case, a fusion category, a braided fusion category, in which all objects are invertible. It is rigid. Now, I explained earlier on that the possible dualizing objects. Dualizing objects. Well, first of all, I should have said that in the rigid case, the dualizing object is the monoidal unit. All other objects are obtained by tensoring invertibles. So in this case, you can pick any object in the category as a dualizing object, but there is a ribbon-quote de Guettier structure only if n is even and k is a. And k is a square. So only every second dualizing object will give a written code in the Great E structure, and that nicely fits calculations you can do very explicitly in this setting of the Feigen-Fuchs boson. And okay, so now you won't be surprised that if you have If you have such a nice theory at a chiral level, you want to see whether you can construct a full local CFT with bulk fields, boundary fields, disorder fields, and so on. And that's a moment where problems appear and where you learn about the power of rigidity. So can we construct boundary fields? Can we construct Boundary fields? Can we construct bulk fields such that we get moduli invariant expressions for the torus? Can we explain OPEs and so on? And there are several problems going up at this moment. The first problem is you are used to think that the braiding is non-degenerate. Now, there are different characterizations of non-degenerate. Characterizations of non-degeneracy of a braiding and the fact that they are equivalent in the setting of finer tensor categories, that's a relatively recent result. That's not, well, maybe it's now five years old by Shimitsu. So one of the most convenient characterizations of a non-degeneracy of a braiding for our purposes is factorizability by which By which I mean the following thing: that if you are given a braided monoidal category, then you can go to the Trinfeld center. You have a functor to the Trinfeld center. Well, the Trinfeld center are simply pairs consisting of an object of C and a half braiding. And of course, you can take the half braiding of C itself to get a braided functor. But with the braiding, you have to have a brand. But with the braiding, you have also the opposite braiding, and you can combine these two functors. And a nice non-degeneracy condition is if this braided monoidal functor is actually an equivalence. This is, and I will briefly sketch this in the last part of the talk, this is incredibly useful. The first thing is you can construct bulk fields and default. Construct bulk fields and defect fields as objects in the Drinfeld center. And you get very compact expressions. The mathematical structure governing this is generalizations of the central monad and co-monod. So the other thing is if you want to describe conformal blocks, you can use certain scheme theoretic techniques called Techniques called string nets, and they are an incredibly powerful tool, at least in the semi-simple case. For the moment, they are not yet string nets available in the non-semi-simple case. So, this is very useful in the rigid case, but the Trinfeld center becomes problematic in the case when the category is not rigid anymore. So, you can Anymore. So you can come up with examples of a finitely semi-simple category where Z of C can be infinite in the sense that there are infinitely many indecomposable objects and the category is even not semi-simple anymore. So somehow these nice things about the Trinfeld Center, we are used now for quite some time. For quite some time, this doesn't hold at least if you're using the naive definitions. And I mentioned the importance of the central monad. So the central monad is essentially extracted from the forgetful functor, which forgets the half-brading on the trail center. All this theory cannot be readily used. A second point is that the theory of module categories. The theory of module categories, which is very important, very useful, is not developed in this context. So module categories in the CFT context, if you are given a modular tensor category that specifies Moore's iBack data, whether it's semi-simple or not, in this case, a module category specifies what modular invariant partition function to choose, how to combine left movers and right. How to combine left movers and right movers. But again, the world here is full of problems. So, again, you can find finitely semi-simple categories, which can have infinitely many inequivalent in decomposable module categories. So, there's nothing like these finiteness results, which give us finitely many modular invariants for a given chira data. And maybe even worse, no, not maybe even worse, much worse. An important tool for module categories is that we have relative delinear products or for bimodule categories. So we don't have really for the moment a decent structure on all Cordon de Coetier categories. If we have rigid tendencies, We have rigid tensor categories. We can take exact module categories. We get a nice category which is defined in terms of bimodule categories. That's why I would call it a Morita category. Bimodule categories, bimodule functors, bimodule natural transformations. In the case of the croton-tiquet categories, this doesn't exist simply. And this implies that That the following successes in the case of chiral data described by a rigid model at cancer category cannot be implemented at the moment in the Cordon de Gretier case. So let me briefly talk about these successes because it's always nicer to talk about successes. And I want to highlight what CodeNDIC VETI gives us and what it doesn't give us. It gives us and what it doesn't give us. So I already mentioned that the additional datum to specify a local CFT that's given a modular tensor category, and we don't even know what modular precisely means, is a suitable module category. Well, then there is a nice dictionary from CFT to To mathematics of tensor categories, which is now established for an increasing degree of generality for 20 years. So boundary conditions are objects in the module category, and boundary fields are described by inner homes. And boundary OPEs are compositions of inner homes. So for Koten Dick, So for Koten Digwertier, this looks fine. There are inner homes. That's already good. Now, it turns out that the modular tensor category is pivotal. Well, that's good for Corden de Cuerdier because we have a notion of pivotality. But to construct a CFT, even if C is If C is, if the modular tensor category is not semi-simple, we need to restrict to a specific class of module categories, so-called pivotal module categories. Pivotal module categories are in particular exact, and there is a very rich theory of exact module categories, and this theory is not available at the moment. And for CFT reasons, we want Of T reasons we want to have that the inner home has the structure of a symmetric Frobenius algebra for each M. Actually, that is a consequence of a in a pivotal module category, but also this is not under control for code and equity. And then you want to construct the bulk algebra. I explain, I mentioned already that it is very Already, that it is very nice to do this in the Trinfeld Center. And I want to give you a feeling why it would be so nice to have a good replacement of the Trinfeld Center then. And I'm focusing here on the construction of bulk Frobenius algebras. And it uses very classical, by now classical theory. So if you are given a finite tensor category and Tensor category and two C module categories, then the category of right exact module functors is also a module category, but it is a module category over the Trinfeld center. And well, how is it? So suppose I'm given f a right exact module functor, then I can define a new functor by picking some z. Picking some Z in the Trinfeld center and acting on the resulting functor. And I have to endow this with a module functor, and this is completely standard by using here the braiding, the half braiding in the Twinfeld Center to switch these two tensor ends. And then you can show that if C is pivotal and M and N are exact module categories. Are exact module categories that the functor category is again exact. And you can compute a very important quantity in such an exact module category, the so-called relative SAR functor. And essentially, what we want to do is we want to trivialize this functor. And this can be done if these Nakayama functors can be trivialized. Yama functors can be trivialized, and if C is unimodular, which means that the canonical invertible object is trivial. And then again, by Shimitsu's result, we get plenty of symmetric Frobenius algebras in the center. Namely, we get all the inner homes, because these are inner homes in a functor category. I call it an internal natural presence. Internal natural transformation, these are Four Bino's algebras, and for the identity functors, these are even graded commutative asymmetric Frobenius algebra. And this is extremely nice because it gives us immediately candidates for the field content of a CFT. So if you are given two phases. Given two phases of a CFT labeled by a module category M1 and M2, then you can show that defects between them are labeled by module functors and fields sitting on these defect lines and changing the type of defect, they will be labeled, if you look here at the Poincaré dual graph, they will be exactly labeled by this internal natural transformation. internal natural transformation and this internal natural transformation is actually can be written as an inner as an as an end over internal homes and it is understood here that this end comes with a distinguished structure of with a distinguished half braining and if you simplify this and you go to bulk fields that's for on the next transparency if i manage to Transparency: if I manage to go there, but somehow my iPad seems to be frozen. Yeah, then you see that if you simplify this, go to the inner, write down what the internal home is, you are getting in the specific simple case, which is frequently called the Cardi case, you're getting a partition function, which is a pairing of. Function, which is a pairing of representations and the duals. And the whole theory is, in the rigid case, again, nice enough. So you get even since these are natural transformations by mimicking the theory of natural transformations, which have a horizontal and a vertical product, you get exactly OPEs. Here I picked a very old paper. Very old paper, and where OPEs, in a specifically simple case, namely one boundary condition and bulk fields have been exhibited. And you can show that all these structure maps that Levelle was postulating for CFT in the early 90s, multiplications and co-multiplications, they come from the they come from the structure of a They come from the structure of a Forbenius algebra on the inner home and on the internal natural transformation. And then forbidions means that you have no problem with these constraints. For Benius means that you have no problem with this constraint. Then another thing that's easy is if you are multiplying two natural transformations, you're doing this component-wise. This is this constraint. This is this constraint, and here the constraint D can be derived from by using dinaturality. Well, so you see it's quite nice to have this a working quantity like the Trinfeld center, and it's incredibly painful that we don't have it yet for the Groton de Guettier case. Of course, just for the experts in the audience. In the audience, this constraint here and this constraint that's not genus zero, that's genus one. So, this here is also called the Cardic constraint. That's much harder, and that's not solved even in the rigid case at this level of generality. For semi-simple, it's not a problem. And yeah, so I hope you see that we have quite a couple of nice results in the rigid case, and we've got. Results in the rigid case, and we have quite a couple of problems in the case when duality is not rigid, but rather code and equity. So there are two things what needs to be done. We used, in a sense, the HLZ theory of tensor products in a very quick way. And it's not clear that the HLZ theory is. The agile Z theory is producing quote braided or is producing written code and degradier categories at such a level of generality. So we might simply miss properties. So it would be very important for people working on the vertex algebra side to see what is special about the quote-de-quetier structures that appear for vertex algebras. And on the other hand, at the categorical side, Other hand, at the categorical side, I think it is very important to go beyond finite includes rigid, so it's very important to go beyond rigid categories and beyond exact module categories and to understand what kind of mathematical structure we have there and to what extent we can use it. So, this is an outlook on probably not months, but rather years to come. Not months, but rather years to come. And I hope some people found something interesting in these questions. I thank you for your attention.