What I want to talk about today is the latest contribution we have in a project that started 12 years ago now on the road design. I'll just click on the screen with the mouse. Okay, so this is the black box. Johan asked for black boxes. This is mine. That's the only black box you want to see here. But there would be DFO algorithms here. So what I want to talk about is a little bit. So, what I want to talk about is a little bit about the raw design problem, explain what the problem is, and then our contribution using multi-objective algorithms. And then I will relate some numerical results we did. So, most of that work was done last year by Aya, one of our master students who graduated last year. And yes, this is true and work with Warren. We've been along that road optimization adventure for the last 12 years. So, here's the problem. You have to start the. So, here's the problem. You have to start the destination and you want to build a road between the two. So, what you don't do is something like that, because that's awfully expensive, short of staff, but then you need to drill tunnels, you need to build bridges and all that. Yeah, you don't have the money to do all that. What you do instead is something like that. Meaning that most of the cost in road design is going to be the cost of digging material, moving material, and filling up other parts. So, this is a potential road. Is a potential road? Here is another one, and because we're an optimization, we know: hey, no problem, we're going to cost both of them and take the cheapest one. So, that's really what the road design problem is from a very high level view. In terms of the cost, we do have several costs that we're looking at. So, you can look at land acquisition, bridges, tune in, paving, all of these costs. The two costs I'm going to focus on is going to be what we call earthwork. So, this really minimizing the cost of building the whole. So this really minimizing the cost of building the road and the fuel consumption. Okay, I'm not going to treat any of the other costs here. So the reason I'm focused on these two is first because, well, the earth work is the main cost when you're building the road. And that one, because we are working with industrial partners and they were starting to be interested into fuel consumption. So the focus here is going to be for them is really they're looking at mining roads. Looking at mining roads. Okay, so how do we split the road design problem? Then you're going to split it into four different sub-problems, and they're all hierarchical. So at the highest level, you're going to look at the map and say like, okay, which corridor are you going to take? So which valley are you going to build your road on? Then when you know the corridor, you're going to do what's called the horizontal alignment, which is a satellite view of the road. How do you optimize your horizontal alignment within that corridor? Doing that corridor. To do that, you need to compute what's called a vertical line. So, where are you going to cut? Where are you going to fill? And the very last level is the earth work is what amount of material do you move from one part of the road to the other part of the road? So, all these four problems are heretical. If you want to solve the first one, the top one, then you need to solve that one and so on. Okay, this talk, I'm going to focus on the last two because we can actually do both of them together. Okay, the tech. The techniques we do for these problems are the corridor selection. Mostly you fit a grid and you apply a shortest path algorithm, shortest paths or distance transfer and that kind of discrete algorithm. And that's very coarse, but it does give you a good idea what the corridor should be. At the horizontal alignment, there are different approaches. If you want to do what's called the 3D alignment, if you're solving all of that together, you can apply one of these heuristics. All of you know these are croinks. Know all these colonies there will be a quiz unitic algorithm, ant colony optimization, uniting, particle swap. Yeah, you're good. What we did instead is more applying some mathematical programming. So that one we have a paper using a bi-level approach where we take that thing as the black box, and then we apply some algorithm here. Okay. Okay, here the vertical alignment, you can do both of these things together. And depending on your model, your cross-section of the road, it could be a mixed angle linear program or a quadratically constrained quadratic program. If you only do VF work, simplest case, this is actually a network flow, special case of linear programming. If you add, if you want to take into account that sometimes you create two net origins, then you're going to have integer variables and then become a mixed integral. Variables and then become a mixed integral linear program. But that does give you an idea of so far what's been done here. And really, there are two schools of research. I mean, we're really in the more mathematical programming side of things, but there is mostly one other school, which is really more on the heuristic side of things. So, as I say, we've been working on that since roughly 2009-2010. We started, it's like we have a company. We started, it's like you have a company contacting you, and you're very happy about it, and you say, Oh, we got that problem. You say, Okay, we're going to solve it. It's going to be three months for the earth work, and then we can look at the vertical alignment. And then two years later, you're still on the earth work and saying, Why is it so hard? Well, it's so hard because they tell you something at the beginning. And when you give them a solution, they say, Oh, we would like to add that thing. And being computers and software engineering, you say, Oh, oh. So, what they wanted to add is that bridges and tunnels, which transform the problem from linear. Which transformed the problem from linear program to mixing linear linear program, and everything just took a lot more time to actually consider. But we work on all the four levels here. We got some money, some people pay us to actually do all that. And we even got a nice prize here. Warren Jurin there. You should know. So that was given at Dublin, just for the story. And Warren was not there, but I put him there. Not there, but I put him there. I like it in one. Yes, I need to catch up here. Internal difference level earthwork. I assume that should be the picture people have in mind. Vertical alignment. So this is where I'm going to show you several pictures of the. Is I'm going to show you a single picture on the x-axis. You have distance from the beginning of the road, the y-axis would just be altitude. This is the satellite view where you get some control plots, and that's the horizontal line. Yes. Are you larger or ten larger? So, the theory works for any kind of roads, which means you can have a road which is several hundred meters up to, I think, the longest we won was. To, I think, the longest we won was 120 kilometers. But that's very like you can understand there is a lot of variation between the highway and the logging road. The model accommodates both, but of course, the value of the parameter are widely different. So, industry partner has a lot of customers in logging roads, because that's where you build a lot of new roads. But now they're looking at mining roads. Okay, so vertical alignment. Okay, so vertical alignment. I think by now you should understand the black here is going to be the ground profile. So, what you want to do, you don't build the road flat like that. What you do, you build something like that. That's what we call the vertical alignment. And from there, you have to solve the earthwork. So, identify where you cut, where you fill, and then you start moving stuff. Okay, you move stuff like that, and you end up with your own profile. You say this is an easy problem. So, if it is, then why can't I do it in 2D? The vertical line, man. Well, it's in 2D except the road. If you do the cross section, you need to compute the volume. Okay, but you simplify that by discretizing the road. That's what I'm going to explain. Why is it an easy problem? Because you can use the one-dimensionality of the road to actually essentially push the material as you go through. That's why it's an The material as you go through, that's why it's a network flow problem, not just giving you can mostly do that in 2D. Why can I sort of push a pane and make it? I mean, you can. And that's what the network flow actually gives you. Yeah. But yeah, getting to there. How do we actually model that? We are going to discretize the road. So the civil engineer, that's not my terminology, I'm just apt to use it here. They discretize and put points that they call station. And put points that we call station. So the station can be indexed by, I mean, one, two, three, four, or they sometimes index it from the distance to the beginning of the road. Station 20, maybe the first station, but it's 20 meters from beginning of the road. So you have these stations, and then you look at the interval between this middle of the two stations. We call that a section. And then when we model the road, we model the vertical alignment, so it's going to be a curve. And as mathematician, you say, oh, that's cool. I can use. As a mathematician, you say, Oh, that's cool, I can use any kind of curve, or cubic spline looks pretty cool. No, the engineer of restriction is say you are going to use a quadratic spine, no choice. Okay, I can tell you for horizontal, we try to use these cool Bayesian curves, and they say no, it's going to be straight line or circle. That's it. But there is a physical reason for that. So, horizontal line, man, when you're driving, you don't want to do that when you're turning. You want to go, move your wheel, and then. Move your wheel and then go back. That's a circle. Okay. Same thing here for the quadratic, they have what's called a stopping side distance. You want to be able to what's on the other side of the wheel and apparently the quadratic helps them doing that. So they really want the format in the specific, the curve in a specific format, so we have no choice. And of course, if you put more stations, you get more precision. Okay. So what we are looking at here, So, what we are looking at here, we're going to look at two costs: construction and what you call a vehicle operating cost. This is really the fuel construction here. And we're going to have a bunch of constraints. I'm not going to show you a bunch of formula with all these constraints because you're going to have two pages of notations, and I'm sure you will fail the quiz at that point. What we want to do really at that point is two things. The first one was to build a fuel consumption model because we didn't have one before. And then we want to try some really objective optimization. We want to try some multi-objective optimization, something simple. Okay, that's what I'm going to say. I really apologize for all of you who had some wonderful multi-objective optimization methods. This paper was done a year ago. I didn't know about them. But we do have a few that we try that. Construction cost, just to simplify, this is what the course we're going to have. The course is going to be linear. All the constraints are linear, but we do have some integer variable popping up from time to time. So that's really the mixed integral linear. So that's really the mixed integral linear program we have. So we've been working on that one for a decade now. So the industry partner is very happy with it. And we have been trying to convince them lately that maybe a quadratically constrained quality program will do a little better, but we're still checking on that. The new one is that fuel consumption. And by the way, this is the stuff we're going to drive under all. It's not your bike or your car. We are going to make some simplifying assumption. Like I said, this is the Simplifying assumption. Like I said, this is the first shot of the problem. And we're going to assume it's going to have a constant speed on each section. And on each section, we're going to have different force. Well, if you don't move, you're still using fuel. That's one. We have what's called the tractive force, which going to split between all these different categories. And then we have the acceleration. So we sum all the fuel consumption for each of them and for each section. And then we analyze it together. We're also going to assume it's a. We're also going to assume it's a mining road. So your truck goes empty, filled up, and goes back loaded. Okay, and the cost is you add more cost. And that's where we get to our bio objective model. Okay. So like I said, building cost linear. Operating cost, not as nice. It's actually continuous, but non-smooth, non-convex. And the constraints are mostly linear with a few integer values. Are mostly linear with a few integer variables. But that's really what it looks like. So at that point, you're probably thinking, okay, what will the Pareto front look like? So I'm going to kill the suspense and show the Pareto front right away. This is what we ended up with. The different dots here are different methods that I'm going to go for, but that's the kind of Pareto front we end up with. Okay, not convex. It's different optimization methods. I will go through each of them and I will go back to that graph. But I wanted to just give you an idea so you have the Pareto front in mind and saying, look, this is not something like we've seen where you're going to have the domain where the function is not defined or anything like that. This is really what we have. And keep in mind, we have two objectives. So, all of you with plenty of new algorithms for multi-objectives. Yeah, we only have two here. It's a simple case first shot. Yes? Shot. Yes. Yes. Yeah, we don't know the exact one. Yeah. I like boost. So did I ask? Dollars. So this is the parable. Yes. But that's really what the answer is. We didn't want to have an answer which is going to depend on the price of fuel. Which is going to depend on the price of fuel. So, by doing that, we say, okay, this is going to be fuel consumption in liters, and this is going to be the building cost in dollars. So, yeah, you can put them together, but they're really not that comparable if you want to be independent of the price of fuel. Okay, so what did we try? Two objectives, epsilon constraint methods. Sure, most of you know about that. Quickly, this is we simplify the problem and say, well, This is we simplify the problem and say we're going to solve that problem with a single objective problem. We pick one objective, the other one, we put it as constraint with an epsilon parameter. Epsilon parameter is going to be bounded. And then we're going to increase the epsilon parameter. And as we do that, we're going to get more points on the paradox. We have two strategies to under the epsilon parameter, the passive one, which just increased by the fixed increments, or the dynamic one, where you just take the left one, right one, something in the middle. Left one, right one, something in the middle, and then you try to avoid the places where you already know the paradox. So, what does it mean in practice? This is the passive method where you just increase like that. And this is the parallel front of one of the roads. We have 30 roads that are real roads. So, you can see here as you increase epsilon, that we have plenty of iteration here where we don't learn any new information. Don't learn any new information kind of stuck here when we get there. Okay, we get the market. So, what we would like to do is try to save time by not going through plenty of iteration that actually you solve optimization problem, but don't give you any power to point. Okay. So, what we did was the dynamic method where I said you get the left most, right most, something in the middle, and then you keep adding this. So, here you can see, okay. Adding this, so here you can see, okay, that I will get that one, that would get that one, but I will try not to put too many points here and you keep adding it. Okay, it's a little bit in computer science of linear search, binary search, that's kind of the same idea. And we're trying to refine it so we find more folks here. Okay, so that's the first two strategies we used, then other methods. Then, other methods we try besides the epsilon constraint method. The weighted sum method, that's usually what you do. Just say I put two weights and just go ahead and do that. That works fine. I think this audience knows perfectly well that if your paratoff front is convex, no problem. If it's not convex, you're not going to find anybody here because you're taking convex combinations. And that's the same thing when you move your points, or you want to do it for fancy pictures. Other methods, weight and metric method. So, in this case, what you do, you take a reference point, you take some kind of metric, and you want to find the box which is going to touch your paradox frontier. So if you take the momentum distance of one norm, you can see that you're going to miss some of the points in the non-convexity. If you get the Euclidean or the two-norm, you do a little better here, but you don't capture it completely. Completely and infinity normal traffic are going to be low comprehensive. So that's all the methods we looked at. And now, of course, you look at what other people are doing. And one of the post-popular methods in this multi-objective optimization is genetic algorithms. I learned this week that there is NGSA3. So I'm sorry we stopped at two here. I'm not going to explain the I'm not going to explain the algorithm. This is actually a very popular algorithm for this multi-oplective. So we tested two, the NHGA2 and the front prediction NHGA2. And we didn't modify them, we just downloaded the code from the internet and just try them to give an idea of comparisons. Other things before going to my experiments, we look at warm starting. So this is typically a problem. So, this is typically a problem where you say, well, if you move your epsilon a little bit, well, your solution should not be too far off. So, we experimented with Warmstar strategy to pick the epsilon and to pick the weights, just to try to get accelerated computation people. Okay. Almost ready for my results here. The last thing will be the performance. So, I was happy to see, hey, you guys, you saw. So I was happy to see, hey, you guys used some of these metrics before from this conference. So I'm not using the purity, but I'm using hypermoding, hyper volume, and spacing. And some of you already use that. So the hyper volume, you pick a reference point at the top here, and you want to maximize your volume, which is going to give you an indication that you capture the most part of front. The spacing is just trying to make sure that all your points are not clustered on something. You want to space them. On something you want to space them as much as possible, okay? And of course, the last one was the CPU type. Okay, so what do you use as solvers? We look at that. So the code we have for the construction cost, we recorded everything, we've been working on it for 12 years, but we recorded everything from C code to MATLAB and we use the Yalmid tool And we use the Yalmee toolbox. And the idea was to simplify it for the students. So they enter the constraints like they write in mathematics. All of that is entered. YALNIP is an algebraic modeling language. So what it does is take whatever your constraints here and it's going to transform it into whatever format the solver wants. So it's going to build your matrix for you, it's going to build your gradient, your Asian, it's going to do all that work for you. Okay? And because in this case, Okay, and because in this case we got explicit formula for it, it would actually make sense to do that, and that allows us to use solvers like DARO, which requires the explicit formula for evaluation. So we coded that in YaleMap, and the other advantage of YaleMAP is it's got a bunch of solvers. So you can just skip a switch and literally is going to do the work for you and you can use different solvers. The solver we tried were skip down and VMR VLD, which is included. The LD, which is including the ALMIP, and what we selected is Baron in the end, and it's actually using calling CPX in Baron because it was the most performing solder. So, say, okay, we're going to use that one. We, one point here, the weighted metric for P equals U, we are kidney, a distance. We dropped that one at that point because the problem and they were being very complicated and none of the solvers were actually giving. None of the solvers were actually giving us solutions that we could explode. Otherwise, genetics, like I said, we just download the code from the internet and say, okay, a lot of people are using it, it must be good. Okay. As for the vehicle, and that's one of the weaknesses with the physical model, you need to know a lot about that thing. I mean, you need to know area in front because this is going to be your air resistance. There is a lot of parameter that you need to know. Parameter that you need to know. So we were able to actually find a website and get from the company, get a lot of this physical parameter information so that we can actually use our model. But if you tell me, oh, here's my car, I mean, how much am I going to use as fuel? I'm going to say, well, here is the 10-page list. Well, probably two pages list of parameter you need to tell me before I give you the answer. The vehicle speed was 10 meters per second, 136 kilometers per hour. And then the timers we put would depend on number of stations. Timeouts, we put what depends on the number of stations. So the optimization problem actually grows with the number of stations, station sections. So we wanted to have more timeouts when we have a lot of stations, but when we have little, it's not as much. Run everything three times just to make sure your operating system is not doing a garbage collection when you're timing your stuff. And the genetic algorithm adjustment five times. These are stochastics, so you won't get the same results all the time. Okay. Okay, all of that. Let's go back to that paradox format. So, this is the result we get where we run all of that and we just plotted points every time the method found a non-dominated point. So, you can see the shape of the paradox font. You can see that if I look at this diamond here, which are the genetic algorithms, they find, I mean, they usually find a pretty good solution here, but then they don't have much special. But then they don't have much special entire font. Some diamonds here, I mean. So, not capturing a lot of the font. The other one, I think the blue one is doing tiny bit. It's missing that first area from the project. So, looking at all of that and just trying to determine, okay, which method actually will we use, and the epsilon constraint method here is giving you a pretty good paretofont. You say, okay. Parado front, you say, okay, that one looks pretty good. It's missing a tiny bit here, no big deal, no big deal there. Then it's missing a little bit of a cluster here. So one thing you have to keep in mind, we don't solve these things to 10 decimals. This is the road optimization problem. The first thing you look at is your data, and then you ask your engineer, okay, what's the precision of your data? And the answer is 5%. If you solve anything below 5%, If you solve anything below 5%, they don't care. They care about computation time and being below 5%. That's really what they are looking for. So, not about the decimals, which, okay. So, epsilon constraint is doing pretty good here. So, the next thing we look at is the warm start. No surprise, it's doing better. There is no inconveniently using it, so we're going to use it all the time. But we were able to quantify the speed improvement. It's between 5 and 15 percent. 15 percent and the number in parameters is the standard deviation. So, you see, it's fairly cluster here, and that's fairly consistent. So, absolutely consent is really very important to a lot from the one star more than the other methods. Some methods we are not able to actually so from this data, we decided okay, we're going to use warm start from now on. And because it looks like it's really working well, our next metric. Our next metric was hypervolume. So you want to maximize that. So you normalize it. You want to be as high as possible. So on the x-axis, you get the different methods or different run of the same method for genetics. On the y-axis, you want to be as high as possible. So the first thing you notice is the genetic algorithms have a lot of variations. And they're not as high. A lot of variability here. But again, there's stochastic algorithms. But again, there's a stochastic algorithm when the other ones are deterministic, so in a way it's not too surprising. Other things you can see that the warm starting is really not penalizing you. And the one which we really like is going to be that epsilon constraint will warm start. Because we get thirty rules. We get 30 rules. Okay. Last matrix, that was the here we're looking at the spread. So in this matrix, you want to be as low as possible. You want the distance between two consecutive points in your paradox one to be as small as possible. And the yeah, what we notice here is again the same thing, a lot of spread for genetic algorithms. A lot of spread for genetic algorithms that are not doing too well on the specific problems. The other problem has less variation, and again, that epsilon constraint with warm start is doing pretty good here. Well, they find the same one, it's just the one stuff, it's really something which is going to. It's just a warm start, it's really something which is going to help you in terms of the computation speed. It's not going to change much in terms of the quality computation speed, so performance profile. All of you are probably seeing plenty of that this week. So, what do we have here? So, you want to be as left and as top as possible. And what we find again is: well, the best one seems to be pretty clear that epsilon constraint with one start is doing very well. The other one. Doing very well. The other one, the second one, is going to be that weighted sum method here. And again, the genetics on this problem, they are really struggling. That will be it. So, in summary, what do we have here? So, the one starting is really a very good strategy, but it's not going to double your speed. But you do get some, I mean, five to ten feet in per second. Get some, I mean, 5 to 10, 15% speed improvement, so you may as well take it. The best method we had was the epsilon constraint with dynamic selection and warm start. That's a little bit too surprising because we only have two objectives. So if we have more than two objectives, the epsilon constraint is going to be more and more costly. But for two objectives, we're doing blue here. The second one was the weighted sum. Again, the dynamic solution in one star. Genetic on this problem, we're not doing too well. Now, we're not an expert. Doing too well. Now, we're not an expert on genetic algorithms, and there is a huge number of parameters you can tune. So, maybe if you tune them, we can do a lot better. But so far, not with the parameter we use. The other contribution we had was really that fuel model, where now we have everything, everything coded in YALMIP and all that. And that model we actually validated on some data that we were able to find. And it's actually pretty good explaining the fuel consumption. So, we are very happy with that. So we are very happy with that. And we do have a test set of 30 roads. Now, the roads are, all of this data, of course, all numerics depend on the test set. And the roads we have are, okay, they are mountain roads, but they're not too long. So if you change your test sets, we, yeah, the numerics are definitely going to change. I don't think the comparison of the method will change tremendously because I think the epsilon constraint when you have two objectives are When you have two objectives, and it's a very good method. But definitely, if you want to build a highway, I would say you probably need a different asset. We didn't use highways here, we used logging roads. And the next step for there is, yeah, come to your car, and we like to tell you how much fuel you're going to use. So we need to have all these physical parameters. And then we like to add more objectives. So there's plenty of things you can do. The first one, the target. The first one, the tire, we maybe likely to look at it because for mining roads, you've seen the size of our tracks. Imagine you have to change one tire. You know how much that tire is going to cost? So tire wear is actually a huge expense for mining roads. So that's definitely one that we would like to look a little more because that will have a huge impact. The road maintenance course is also another one where mining roads have a lot of data on their roads and they use them fairly quickly. And they use them fairly quickly. So that's another one that will be interesting. Plenty of things we can try. There is one major constraint on that research: we do have an industrial partner. And what they do, they sell software to civil engineer. So they build the software when you want a lot of roles. And they contacted us because they wanted to say, look, the engineer entered all of our thing, and now he has to build the alignment. He has to do it manually. What we want to do is automation and credit. Is automation and press a button and get a starting alignment that can start more easily. That's how we get involved in the project. Their big goal with their software is to keep it simple. Okay, so you get protocol 3D and you get all of that, which is a fairly complicated software with steep learning curve. Now, the really targeting engineer basically you can use our software, it's going to be a lot easier to use. What that means is, if we do a single objective, you press a button, you find your roads. A button, you find your roads, understand the cost, all that kind of makes sense. You start moving to two objectives, now you get your parental front, that's a little harder. Put three objectives, they will have a lot of work to try to explain to the engineer, okay, what exactly do I mean? How do you select a point in your paradox? So there are limitations that they will have to work through. And the reconstruction cost can be improved, and we have other work when we like to. Improve and we have other work when we would like to incorporate in the model. Like I said, we started redoing all the modeling last year. So we have more stuff to incorporate, and we have grass finance working on that. The assumption we use for fuel efficiency, yeah, we like to relax that, have different scenarios and things like that. And I think that's going to come because the company has contacted, I mean, mining companies. So they probably have some ideas how to compute costs and do that. And of course, the last one is this. And of course, the last one is: this is the vertical. We get to the hard stuff, the horizontal line. Can we actually do that? And that's a lot for that problem, it's a lot more challenging because it's non-convex, actually discontinuous depending on your course. So that will be, yeah, I think that will keep us up for the next 10 years, probably. Being good. And lastly, there's plenty of people to thank. And so I am, like I said, the Masters and Graduate Lab. I am, like I said, the master's student graduate last year. Warren this year. I bought some pictures from people over the years. And this is, I try to list everybody, every student try to work on the project. Warren can tell me if I forgot. This is the company I'm working for, Software Technical System Incorporated. They're a very small company, and it's been a pleasure to work with them. And they bring us a lot of data and stuff like that. And that's telefrancer behavior. Of course, we're funded by. paper and possibly only the diagram.