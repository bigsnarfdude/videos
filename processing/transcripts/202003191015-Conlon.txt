I'm ready. Okay, so David Conlong, can you go ahead? All right, so can you see the screen okay, the slides? Yes. Okay. All right. So what I'm going to talk about today is a slightly new topic that myself and Misha Chomkin, who's been working with me at Caltech, came up with that we quite like. It's quite a Quite like it's quite a pretty thing in some ways. But what we're going to talk about is proper edge colorings. A lot of people have been talking about proper vertex colorings. I'm going to be talking about proper edge colorings. So like this example here, where it's just the case that each vertex, you color the edges and each vertex doesn't seem to see the same color twice. Okay, so everybody knows what this is. Knows what this is. So, the part of the motivation for this is that there have been actually quite a lot of results about proper edge coverings in recent times. So let me just state a couple of those. So one is a very nice result of Alon, Pokrovsky, and Sudakov from 2017 that sort of kick-started a lot of work. So, what they proved is that every proper edge coloring of KN, and in this talk, I will only Of Kn. And in this talk, I will only talk about proper edge colorings of the complete graph. So every proper edge coloring of the complete graph actually contains a rainbow path whose length is linear in n, basically as long as it can be. So n minus minus little o n. There have been several previous results showing that you could find things of length n over 2, 3, n over 5, and so on. But this sort of nails it down to as long as it can possibly be. It's a very nice result. Possibly be. It's a very nice result, and the methods that they developed became useful for several other things. So there's been a lot of work, for example, finding large trees or finding many copies of various isomorphic large trees, large rainbow trees, within proper colorings. And where that has ended up is very recently there's been a result by Montgomery, Pakrovsky, and Sudakov solving an old computer. Solving an old conjecture of Ringel. So the conjecture of Ringel states that if you take any n-edge tree, then and you take a complete graph on two n plus one vertices, then you can perfectly pack copies of that tree into this complete graph. But ultimately, that boils down to a question of this variety of finding some structure in a proper edge coloring. So what they do is for a certain fixed property. For a certain fixed proper edge coloring, they show of k2 by n plus one, they show that it contains a rainbow copy of any n-edge tree. But it solves this very nice, very, very old conjecture. And I'm brushing over lots of things. In the last three or four years, there have probably been 20, 25 papers proving nice results in this kind of area. But all of these are about large structures. And what myself and Misha were interested in is actually quite small structures. Actually, quite small structures. So, this is the definition. Let me actually ignore the definition for a minute and explain what it is that we're actually interested in. So, what we're interested in is we fix a graph H, so a small graph. We fix a particular number of copies, so say K copies, and what we want to do is we want to figure out when is it the case that our proper edge coloring contains K copies. K copies of a particular graph H, all of which have the exact same coloring. So we want to find basically colour isomorphic copies of your fixed graph H. And the condition, when I say, when are we guaranteed to find some such copies, what I mean is what tends to happen is that when the number of colors gets small, you do start to get copies, these color isomorphic copies. So, formally, what it is, I actually What it is. I actually phrase it the opposite way around. So formally, we're asking for the smallest integer, C, such that there is some proper coloring with C colors that doesn't contain these K vertex disjoint colour isomorphic copies. But really, when you're thinking about it, it's somehow easier to think about what we want is we want to find the number of colors where if we have a proper coloring with that number of colors, then we find k copies of H, all of which. find k copies of h, all of which have the exact same coloring. Okay, so a few remarks about this definition. If you think of it from this point of view of trying to ban these copies, then it's clear that this function has to exist for the simple reason that if you take a rainbow coloring, which has n choose two colors, then you obviously can't get any repeats because no color repeats twice. So there's nothing. Repeats twice. So there's nothing you can say there. Another thing that's fairly obvious is that this function has to lie between n and n squared, basically. So n choose 2 is the maximum number of possible colors, just where every edge gets a different color. And the minimum number of colors in a proper edge coloring is n minus 1, just because any vertex sees n minus 1 edges. And actually, if n is even. Sorry, I assume when you say colour isomorphic, you're only allowed to permute where it sees an edges, not the colours as well. Yeah, you're not allowed to permute the colours, yeah. Yeah, I mean, you can ask the question if you if you permute the colours as well, but for us, uh, you want to be able to overlay them so that uh the colours match up. Got it, okay. So, um, yeah, so sorry, I was saying, so if n is odd, Sorry, I was saying. So, if n is odd, then the minimum number of colors in the proper coloring is n. So, this n minus one lower bound can be taken to be n when n is odd. And the final remark I'll make is that I don't require within the definition that each copy of H be rainbow, but it turns out in each of the cases where you show that you get a bunch of these repeats, you can always show that they're rainbow. So you can sort of think of these as So, you can sort of think of these as getting multiple rainbow copies where they're colored the same. Okay, to try and get some feel for this, let's just look at some very easy case. So the simplest possible case you can think of is when are we guaranteed to just have two edges of the same color? And that really is completely trivial because as soon as you move away for rainbow coloring, as soon as you have less than edge two colors, you will get. Colors, you will get two edges that have the same color. So that's completely trivial. What happens if instead you want to, for your interest in this, K repeats things, you want to get K edges of the same color? Well, that just means that each color class has to contain at most K minus one things. Okay? So, sorry, some chat coming through here. Yeah, so Nina asked, Is it clear that fewer colors means more copies of H are guaranteed? It's actually not completely obvious, but it is true, actually. Misha said exactly the same thing there. So it is true, but it has to be proved. Okay, so getting k copies of the same edge, we want each color appears at most k minus one times, so that means that the total number of means that the total number of colors has to be at least n choose 2 over k minus 1. So in particular, if you go below n choose 2 divided by k minus 1, some color has to appear k times. And that's also sharp because you can find packings where you can take matchings of size k minus 1 and you can cover a complete graph with matchings of size k minus 1, provided you're given some divisibility conditions. Provided you're given some divisibility conditions. Okay, so that's a very easy case. But what happens for other cases? So the next thing maybe to look at is triangles. So we just want to find, say, two triangles that have the same color. And it turns out there that the problem also sort of trivial. Are you looking for disjoints? Vertex disjoint somewhere? Vertex disjoint, yeah. You can ask. The first question there didn't say vertex disjoint. You just said two edges of the same colour. Vertex is shown. You just said two edges are the same colour, but not necessarily vertex. Oh, but it's proper coloring. So, um, oh, of course, yeah, yeah, yeah, so yeah. Okay, so um, yeah, so throughout, I'll be talking about vertex disjoint. So, it turns out that for non-bipartite graphs, the answer basically trivializes in that there are essentially proper colorings with as few colors as possible, which don't contain two repeats, even. Which don't contain two repeats, even. There's a slight caveat here in that if n is odd, that is definitely true. There are proper colorings with as small a number of colors as possible, which don't contain any odd cycles. For even we have this gap where the lower bound is n minus one and the upper bound is n plus one, which we haven't been able to close. It might I'll ask it again at the end as a problem, but it might be easy, it might be hard to close that off. But the only thing I'll actually prove in the talk is that. I'll actually prove in the talk is that when you're a triangle and when n is odd, then there is a proper coloring. So I'll give you the proper coloring. So what you do is very simple. You just treat your vertex set as a copy of the cyclic group Zn, and you color each edge AB with just the sum of the two endpoints taken mod n. Okay, so then if we know So, then, if we know the colors of this triangle, then those colors actually determine each of the vertices. So, if we had a triangle x, y, z, and the colors were x plus y, y plus z, z plus x, then we can get back x, y, and z from those colors, just from doing what I've done here. So, you take x is a half, the first color minus the second color plus the third color, and that works really well for. Really well for odd cycles. So, the same proof works instead of triangles if you had a cycle of length five or a cycle of length seven. So, in particular, it works for any non-bipartite graph because a non-bipartite graph has to have an odd cycle. Okay, so actually it's quite easy in some sense to show that for non-bipartite graphs, it's not a particularly interesting question. Okay, so non-bipartite graphs are not so interesting. So non-bipartite graphs are not so interesting, but what about bipartite graphs? So here's the first result, which again is a result saying that actually maybe it's not so interesting. So it says that if H is a bipartite graph where the number of edges is larger than what I've written here. So for k equals 2, when you're looking for two repeats, it's basically saying if the number of edges is at least twice the number of vertices, then again, this function. Then again, this function collapses to being linear. We don't have any control over the constant, but it again collapses to being some linear thing. So in particular, with very, very few colors, we can ban two repeats of any fairly dense bipartite graph. Okay, and the proof of this uses the Lovas local lemma. It needs some twist on the Lovas local lemma because the local lemma Lovas local lemma because the local lemma doesn't actually guarantee a proper coloring, but there's some trick that allows you to use the local lemma. In particular, if you look at this result, if you look at it closely, it shows that actually if you have any graph for which the number of edges is at least the number of vertices plus one, then there must be some k where it trivializes to being linear. So anything that's So, anything that's denser than a cycle, eventually it will trivialize to being linear. And actually, we prove a stronger result showing that it's the case that if you have any bipartite graph that contains a cycle, so this includes cycles themselves, which aren't included in the local lemma, then there is some k where, in order to get u. So, basically, what this is saying. So, basically, what this is saying is that you can find some coloring with a linear number of colors where you don't contain k repeats of any particular bipartite graph containing a cycle. Okay, so somehow for a large enough number of repeats, this function trivializes. Okay, the proof of this is significantly harder than the proof of the first result here. So, as I said, the first result is an application, the local lemma. This uses This uses something called the random algebraic method, which was developed by Boris Buch in studying extremal numbers. And it uses notions from algebraic geometry over finite fields. It takes some work to actually prove this result. Okay, so again, where have we gotten to? We know that for non-bipartite graphs, the answer sort of trivializes. Sort of trivializes. We know that for bipartite graphs that have a cycle, the answer trivializes if you go high enough. So if you're asking for a high enough number of repeats, it collapses to linear. So where does that leave us? It leaves us with trees. So what happens for trees? In particular, one case that's nice to think about is just the two-edge star. So you just have two edges which meet at a vertex. Meet at a vertex, when are we guaranteed to get two repeats, and it's two vertex-disjoint color isomorphic copies of the two-edge star? This is not at all obvious. So it takes some playing around, but eventually we realize that actually around quadratically many copies guarantees that you get two copies, which is slightly surprising because if you think about it, each If you think about it, each of these colors is probably typically appearing a constant number of times. And even though each color is appearing just a constant number of times, you can still guarantee that you get two repeats of this two-edge star. And actually, more surprising again is that that's actually true for any tree. So for every tree, it's the case that there is a constant C such that if our number Such that if our number of colors is smaller than Cn squared, then we're guaranteed to have two repeats of that tree T. Now, I won't say too much about the proof of this, but basically we form some auxiliary graph between pairs. So we form a graph where its vertex set is pairs, and two are connected by a particular color if there's a matching between the two vertex sets in that colour. That's in that color. And then you find a tree within this auxiliary graph, and that gives you a tree within the, gives you two matching trees within the original setting. If you work that out and do the numbers, it gives you that quadratically many colors is enough and is the correct thing. Okay, so that's what happens for two repeats. What happens for three repeats? So, okay, so two repeats. So, two repeats, it worked that n squared was the correct number. So, maybe for three repeats, n squared is also correct, but that turns out to be false. So, the actual answer for two repeats is that you have to collapse to there being n to the three halves colors. And at around n to the three halves colours, you will get three repeats of that two-edge star. And this, again, is true for any tree. So, for any particular tree, So, for any particular tree, at n to the three halves, when there's around n to the three halves colors, or each color appears typically root n times, at around that value, you're guaranteed to get any tree three times. And moreover, this, and this moreover is actually quite, it's one of the harder results in our paper. Um, this is best possible for any tree with at least two edges. So, n to the three halves is the correct answer for any tree that has two edges. Um Tree that has two edges. Why do I say two edges? Because we saw earlier that when we just had single edges, the answer was quadratic. So you need to have some caveat on things. Okay, so what happens as we go higher? So when are we guaranteed to find k repeats of a tree? So our result says that, so the natural extension of the result from the previous page says that for every Says that for every tree t, there exists a positive constant c such that we get k repeats above n to the k over k minus 1. Okay, so this is, however, where it starts to get a little bit strange because this is not tight for all trees. So it is the case that actually, if you talk about the two-edged star that we were talking about, then We're talking about, then n to the three halves is the correct answer for more than three repeats. So if we're looking for four repeats, n to the three halves is the right answer. For five repeats, n to the three halves is the right answer, and so on and so forth. So somehow, for two stars, or for stars with two edges, it bunches up at n to the three halves. That doesn't seem to happen for larger stars, but there's a bunching up phenomenon that happens. Bunching up phenomenon that happens for every tree, and that happens at this threshold. So, if our tree has m edges, then it's the case that once we reach n to the m plus 1 over m, then we get arbitrarily many repeats. So past that point, we actually get arbitrarily many repeats. David? On the previous slide, I'm not sure I understood correctly. Is your bound getting worse as k gets bigger? As the sk gets bigger? So, what's going on there? Yeah, so it's tending downwards, or it should be tending downwards. So, the last proposition here, that C is changing with K. So the constant is changing. The polynomial is not changing. Sorry, the constant is changing. So, for 2, you have n squared. For 3, it has n to the 3 halves. But for 4, it's like 1 over 100 n to the 3 halves. For 5, it's. One over 100 into the three halves for five, it's something smaller, and so on, and so on. What's really happening is that if you have little O into the three halves, then you get basically arbitrarily many copies or omega of one copies. Okay, but a similar thing happens for any tree that basically there at this n to the m plus one over m, you start at that point, you get arbitrarily many copies. Basically, if you go a little low of that, you get omega of one copies of your tree. Of your trait. Okay, so what we think is happening, but we can't prove. We're able to prove it for the two-edged star, we know exactly what's happening. We think that, for example, for a three-edge star, we think for two repeats, it's n squared, for three repeats, it's n to the three-halves, for four repeats, it's n to the four-thirds, and then it sticks at n to the four-thirds. So we think that basically, as you increase the number of edges, it drops, it drops, it drops until it hits. Until it hits this threshold where you have the number of colors is one more than the number of edges, and then we think it stabilizes at that point. So we can prove that for, as I said, for two stars, but we can't prove this behavior exactly for more than two stars, for more than two edge stars. What we can prove is that eventually, if you fix your tree, then eventually it has to tank out at this n to the n plus 1 over m. This is n to the n plus 1 over m. So for any m edge tree, there is some k where in order to get k repeats, you have to be that small. Again, this uses this random algebraic technique, and it's not that easy. Okay, so I'm going to round up actually. So, with various open problems. So, one open problem that we have is the thing I mentioned. Is the thing I mentioned a second ago. So for any m edge tree, what is the smallest k such that basically what it's saying is that such that there is a coloring with n to the m plus one over m colors such that there are no k repeats of that tree t. And we think that that happens when k is m plus one, but we can't prove it. We know that this there's some k, but we can't prove it. My expectation is that this problem is very difficult. My expectation is that this problem is very difficult. It's very closely related to the Zarankiewicz problem. The reason why we were able to do it for two edge stars is that we understand the Zarankiewicz problem fairly well for K23. So, for banning complete bipartite graphs, we have two vertices on one side and three on the other. But for larger things, we really don't have good control. So, I think that's probably. So, I think that's probably a very difficult problem. But here's a much easier open problem. So, or what I think is probably a much easier open problem. So, is it the case that if we're just trying to ban two repeats of a triangle, then the answer is n minus one? So, I want a proper edge coloring when n is even with as small a number of colors as possible, which contains no Which contains no two repeats of a triangle. What you can show, if you have n minus one colors, is that there have to be two triangles that are colored the same, but those triangles might not be vertex disjoint. So, and we don't know what the answer is otherwise. This might be quite easy, actually. It might just be that somebody sees an example straight away. But we tried a few things, but we couldn't find anything. Can you repeat the question again? question again so so the question is uh we want to find um a coloring a proper coloring with n minus one colors which is as as few as possible such that there are no two vertex disjoint color isomorphic triangles so um so basically a proper coloring with with no two triangles that are colored the same um okay the uh the next question The next question I'll state is: We don't really know what's happening for cycles of length four. It's an interesting thing. So, for cycles of length six, we know that for two repeats, the behavior is not linear. It's actually somewhere between linear and quadratic. But for C4, we don't know. We can show that for three repeats, the answer for C4 is linear, but for two, we're not so sure. For two, we're not so sure. So there might be some nice example again that gives this. Another thing that we think happens, but haven't been able to show, is that we think that if you take a very long cycle, then it should be the case that for two repeats, the answer approaches quadratic. This would be in keeping with the feeling within extremal graph theory that longer cycles are easier to find than shorter cycles, and they're much closer to being. And they're much closer to being like a tree. So we think that it might be the case that if you're just looking for two repeats of some long even cycle, then the answer approaches n squared, but we haven't been able to prove that. And the last thing I'll mention is a slightly different thing. So instead of finding two vertex disjoint things, what happens if I want to find two paths of length t, which are colored the exact same, but are connected? Same but are connected. So you have basically a path of length t, and then you have the same thing repeated again. So, but all contained together in one path of length 2t. And there we also think that it might be the case that for long t it tends towards n squared, but we wouldn't be able to get any traction at all on that problem. It's related to some other Ramsey-type question. Okay, so that is the last thing I want. That is the last thing I wanted to say. So thanks for listening. Okay, thank you very much. Are there any questions? I have a question. When you mentioned this initial proposition where you said you had a variant of the local lemma, do you have? Yes, yeah. Do you have a genuinely new probabilistic lemma or are you using the local lemma? Yeah, we use the local lemma. The local lemma basically, you put in an extra condition. So you ban the configurations that you don't want to happen. And then you also ban any vertex from having too many neighbors in a particular color. And then you just recolor those. So basically, by multiplying the number of colors by, so suppose each vertex saw each. So, suppose each vertex saw each color at most k times, then by multiplying the number of colors by k plus one, you can recolor. Yeah, you can recolor. You lose a certain constant, but basically it works. Excuse me. Yes. Can you turn your audio off? Can I turn it off? No, I think we're getting a lot of noise from you. I will certainly turn it off. Turn it back. Certainly, turn it off. Turn it back on with a couple minutes. Will do. Okay, thanks. Yeah, sorry, I was getting a bit of reverb from that. So, yeah, I was just saying that basically it is the local lemma. It's just by banning. So, if you know that each vertex sees any particular color at most k times, then you know that each color class basically has max degree at most. Basically, it has max degree at most k. So, by using Wiesing's theorem, you can recolor so that you can recolor that color class with at most k plus one colour. I see. So, you don't find the object you want by the local lemma. You find something close and then you find something close and then you recolor. Yeah. I understand. Okay. Thank you. Any other questions? David, does it matter how they share the endpoint for the last problem? So the particular So, the particular yeah, that's a fair question. The thing that we were. So, one thing, because it's a proper coloring, basically can only happen one way. So, if the first edge was red on both of them, then they have to meet at the second endpoint because they can't meet at the first endpoint because there will be two red edges sharing a vertex. You could ask some more general thing about instead of it being an endpoint, you just want the two to intersect with each other. You just want the two to intersect with each other. But for the Ramsey thing we were interested in, you actually do need to have a path of length 2t that basically runs one color sequence and then runs the same sequence again. So that's the thing that we're actually interested in. Okay, thank you. Anything else? I have a question. What about hypergraphs? And there's a relationship here with extreme. There's a relationship here with extremal problems for graphs. I'm wondering if you think that maybe it's also have some of the same flavor in hypergraphs as like 6.3 and other questions of this sort. There probably should be some sort of general relation for hypergraphs. We asked it as a problem in the end of our paper. We didn't really think about it. I think we'd gotten to the point where we'd thought enough about it. But there definitely are, you can ask various different versions. You can ask various different versions in hypergraphs. You can ask just the exact same thing, but there's lots of different ways in which you can define what a proper coloring means in a hypergraph. So there's like for each uniformity, there's an array of different possible things. So you could ask, you know, every edge containing a vertex has to be different, or every edge containing two vertices has to be different, and so on and so forth. We didn't enter into it, but it seemed to be. didn't enter into it, but it seemed to be quite possibly interesting. Yeah. Do you expect that any of the problems for graphs would not be theta of n to some power? I think it is probably always theta n to some power. Yeah, I think it's probably always theta n to one of these fractions, actually. Ooh. No, let me plead the fifth on that actually, because I don't necessarily believe that the corresponding extremal problems are end to some power. And I think if the corresponding extremal problems are not end to some power, then that will actually carry over to these cases as well. So I'm not sure. I'm not sure. Okay. All right. Anything else? Anything else? Let's thank David again.