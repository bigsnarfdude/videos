Okay, so uh now you start. Yeah, okay, good. Okay, uh, so first of all, I want to thank the organizer for this conference and I'm very happy to be here in Oaxaca. So, okay, so okay, maybe. So, today I want to talk about the mini. Maybe. So, today I want to talk about the minimal non-signal scattered linear order of an inaccessible cardianity. I know it's a long talk name, but at the end, we will construct a tree. That's like the end goal. But we want to do something which is like some people think is important. So, we need to get the reduction to the tree. So, this will be the start of the talk. So, let's start with some conventions. Let's start with some conventions. So, throughout the talk, kappa will denote a regular and countable cardinal, and lambda will denote an infinite cardinal. For a set of ordinals C, we write the accumulation C. The set of accumulation points of C is all the ordinals in C such that the soup of the C intersection alpha is just alpha, and the non-accumulation is all the points which are not in the which are in C and not in the accumulation of C. And so today we're going to talk about linear orders. We're going to talk about linear orders. So, during all this talk, M will be will denote some class of linear orders. And we are interested, we have this class of linear order. We are interested in understanding some structure on them. So, to understand structure, we need some relation between them. So, we have the relation of embeddability. So, given two linear orders, L and K, we say that L embeds into K, or why it is less than equal to K, if and only there exists some function. only we there exists some function from L to K such that for every two elements of L if X is below L below Y in the L order then the in the image fx is less than F Y in the K order so this is the ability and the question that we are interested in today so we have this structure now and we have this order between so we have this class and we have the order between them so the question that we want to address today is a minimality question so the question Question. So the question is: Is it consistent that there exists a linear order in our class M such that whenever you give me a sub-order of it, some K which is embeddable into L, so I will call it a sub-order, such that K is inside of our order M. So the minimality is with respect to the class M. And we want to ask: can you embed the whole linear order into the sub-order? Okay, yeah. So embedding is not necessarily one, right? Yeah, yeah, yeah. Okay. So, what class are looking? Yeah. Say is inconsistent? Yeah, so yeah, I will cover some of the history in the following slide. So, the class of today is going to be shown in a minute. So, first of all, we need the definition of scattered linear order. So, a linear order is... Scattered linear order. So a linear order is scattered if the rationals are not embedded into it. And now we can look at a bit more complex linear order. A linear order is sigma scattered if it is a union of countably many scattered linear orders, sub-orders. So we will focus today about the non-sigma scattered linear orders. So obviously countable linear orders are sigma scattered. So if we are talking about the class of non-sigma-scattered, we are talking about uncountable. Signal scatter, we are talking about uncountable linear orders. So, what kind of linear orders are in this class? So, we have the Arnstein lines, which will be the main focus of today. We have real types and we have Baum-Gartner types, which are less important for today's talk. So, okay, so as I mentioned, we are going to have we are interested in minimality in linear orders, but a very useful tree when we talk about linear orders is trees. So, let's just start with. Trees. So let's just start with the definition of a tree. So a tree in our set theory is a posset such that if we look at for every node in the tree, the set of predecessors is well ordered. And the height of a node in the tree is just the order type of the predecessors of the node. And the height of the tree is defined to be the soup of the height of the nodes plus one in the tree. And a very important notion is the delta level. Delta level. So the delta level is just all the nodes in the tree which are of height delta. And another useful notation is the tree restricted to some set C. So C is some set of ordinals. So the T restriction to C is just all the nodes of a height in C. Okay, a kappa tree is a tree of height kappa whose levels are of size less than kappa. And now we can give the definition of an aronshine, a kappa aronshine. An aronshine, a kappa aronshine tree. So, a kappa aronshine tree is a kappa tree. So, the levels are of size less than kappa, and there are no chains of size kappa. Usually, when you talk about aronsine, you also mention sustain trees. So, a kappa tree is sustained if it has no change, but also not anti-change of size kappa. Okay, by the way, there is the slide showing in this URL. And if you're feeling like you missed something, you can go check. You missed something, you can go check it out. Okay, so as I mentioned, we want to move from trees because we know how to construct trees in a very nice way into linear orders. So, how do we do that? So, all the trees today will be of the following form. The trees will be a function from less than kappa, so some ordinal alpha less than kappa, to omega. And usually, the okay, in this talk, the tree will be download close. talk, the tree will be download closed. So when you give me a function which is a node in the tree, also its restriction is in the tree. So how do you get a linear order from tree? You use the lexicographic ordering. So the lexicographic ordering is defined as follows. So given two nodes, S and T in the tree, we say that S is lexicographically below T if S is a subset of T. So remember S and T are two functions, so S is a subset of T. Or if it's not the case, we are incorporating. If it's not the case, they are incomparable by this relation, then we look at the first delta, which is just the first ordinal such that they get different value. And we ask which one is bigger at this delta point. So you can think about it that we have like a tree, which is functions. And at every point, we look at all the immediate successors, and we say that this one is before this one. One, okay, the two, yeah, obviously. Okay, so uh, good to know. Uh, if you have a kappa aron chain tree, then when you look at its lexicographic ordering, then this is a kappa aron chain line. Okay, so this is good, we are heading to the right place. Similarly for Kappa Sosenin trees. So the first result I want to tell you about today is by Baumgartner. Later, it was, we found the gap and Shokup fixed it. Fixed it. So the result is as follows. So assuming you have diamond plus, there exists a minimal, which is what we want, right? We are talking about minimality today, a minimal sustain line, okay, with respect to the class of uncountable linear orders. So what do I mean by that? I mean that whenever this sustain line is such that whenever you give me a sub-order of it, you can embed the whole line into the sub-order. This is minimality. Okay, so Bankens asked two questions about that. Two questions about that. Can you weak this Diamond Plus to Diamond, which is much nicer? And whether you can construct something which has this property, but is not sustained. It's some minimal RON chain line, which is not sustainable. So these two questions were recently solved by Cummings, Adolf, and Moore in a beautiful paper. I really suggest you read it. I really enjoyed it. So they gave a positive answer to both questions. Answer to both questions. And furthermore, they gave a first example for higher analogues for these linear orders. So, this is what the talk is about today. And what did we prove? So, as I mentioned, we want higher analog of minimality. So, they showed that consistently for each infinite cardinal lambda, there exists a minimal with respect to being non-sigma scattered. Recall, non-sigma-scattered is the class we are talking about today. About today, and of size Lambda plus, and which is a Lambda plus Canton. Yeah. Okay, so what did they do? They had two construction. One is by forcing a generic tree. We will talk about it a bit later. And the other, they did it conveniently. So they used this square webinar, sub-lambda, principle, which holds under V equals L. holds under V equal L and they constructed the Lambda plus R and chain tree yeah where the tree as I mentioned to you is like a function from less than Lambda plus to omega and this tree is not Lambda plus so slim which means that it has a very large anti-chain of size Lambda plus and they they also showed that they constructed the tree with some properties we'll get there but they showed that for every anti-chain They showed that for every anti-chain x of size lambda plus, this when you look at the lexographic ordering, this gives you what you want. This x in the construction is, sorry, is a minimal non-sigma linear order. So again, it means that whenever you look, you give me y, subset of x, which is a non-sigma scattered, okay, it's in the class we are looking at, then it embeds into the whole line. This is the minimality. Okay, so and they. Okay, so and they suggested at the end of the paper that it should be possible to extend this result for inaccessible. So, as you can see, the result is stated for a successor cardinal. So, this is what I want to talk about today. I want to describe such an extension. So, yeah, we are talking about today. So, we describe some key ingredients from the papers. So, okay, so the first idea we need is a modification. Modification. So eta will be a modification for the whole talk. A modification is a function from successor ordinals, alpha plus one, for example, to the integer z. So and the modification is a function which changes value only finitely many times. Okay. And the change must take at alpha plus at successor ordinal below alpha. Okay, so you can think about it as we have like a modification. We have like a modification, eta is can be coded as like a sequence of Cn and some Kn. Well, let's say N is below M, M is some finite ordinal, and Cn is just a successful ordinal, which says that at this point, we get the value Kn. We get the value kn, right? So this is finitely many changes. So we can code this change. Okay, so we denote by raw the set of all such modifications. Okay. Okay. Yeah, I know it looks scary, but for any two elements of H kappa, let's say eta, which is a modification, and T, which is going to be a function in the tree, we need some operation. I call it star. It's the operation, but eta. Operation, but eta is action on t, the star action is going to be the empty set unless good things happened. What are the good things? Eta is going to be a modification, as I said. T is going to be a function from less than kappa to omega. So it's going to be, it's possible that it is in the tree. And the map is, the map eta star t is going to be from the domain of t to omega. So it's going to be to give me another. So, it's going to be to give me another node in the tree. But notice that this is to omega. Okay, this is very important. And how do I define it? Eta is some function which changes value finitely many times. At each coordinate, eta star t is just the sum of the two values, if you can do it. If you cannot do it, just give me the value of the node t. And if this function, if this operation doesn't go to omega, if it's not well defined, you give me the empty set. Empty set this like solves some convention, like it's very useful. Okay, so we have this tar operation, which is just the sum operation in some sentence, coordinate-wise. Okay, so now that we have modifications, say we are okay, so yeah, this time just said that we are closed under restriction for the tree. So, when you give me a node in the tree and some ordinal below the height of the node, then the restriction is also in the tree. Restriction is also in the tree. Ah, okay, it's missed. It's supposed to be in T at the end. Okay, so we say that the tree is raw coherent. If, whenever you give me two nodes in the same level, in the same successor level, then the subtraction map, just coordinate-wise subtraction, is going to be a raw modifier. Okay, so in some sense, when you look at the subtraction between the two, it's finitely... To it's a finitely, it just a raw modifier, so it's finitely many changes and happens on successor. What? Yeah, modification, yeah, raw modifier on GitHub. Yeah, um, so what is raw uniformity? So, a tree is raw uniform if for every node t and whenever you give me a raw modification, the operation star is giving you a node in the tree. So, recall that if it doesn't make sense and the operation is something which is nonsense. Is something which is nonsense. We get the empty set, and the empty set is in the tree. So everything is good. So this is uniformity. And we need the following idea that, okay, so right, when we have a tree, we can say that a node S is an extension of T, right? Just by the extension of the tree. But now we need an I extension. So an I extension means that whenever you give me some C here and you look at the value of it. And you look at the value that S gets here, it's going to be greater or equal than I. So T is an I extension of S. So it's the opposite. Yeah. So T is an I extension of S if T at X C, whenever X is here, is between the height of S to T, it's greater or equal than I. Okay? Okay, we also have the subtraction. The subtraction, like the opposite map of a modification, which is just coordinate-wise doing the opposite, just minus operation. It will show up in the end. So why coherent and uniform? So, and why aren't shine? So, if T is a kappa aronshine, then by the theorem of Fausdorf, if you look at this order, it's a non-sigma scatter, as I mentioned at the start of the talk. And if the tree is raw coherent and raw uniform, which is the good properties we are looking for, then every subset of the tree which is of size less than kappa is going to be sigma scatter. Okay, so remember in minimality, we look at the subset of our set, of our linear order. So if the subset is small, it's out of the class. We don't need to care about it. Okay, so get it to have minimality, we only need to care about things of the same size, of the big size kappa. Okay, so we end. Okay, so we aim to construct a tree, a kappa on shine tree t such that every sub-tree s, I know there's some ambiguous about what is a sub-tree, so today it's a downward clause of size kappa, there exists a function which takes the whole tree t to the sub-tree s, which is very nice. It has all the following properties. It's order preserving, it preserves the lexicographic ordering, and it preserves incompatibility in the tree. So this is a very key idea from their paper. A very key idea from their paper that if you have raw uniformity and raw coherent, then you can actually get okay without something which I will add in the future of the talk, you can get this nice property. And this nice property is helping you to get the minimality, okay, that you want. So, this was achieved in the paper using the following idea: a frozen cone, which is a very good name. So, what is So, what is the frozen cone? So, let's start with what is the cone. So, a cone of a tree t is just by determined by a node s, is just all the nodes t which are comparable in the tree with this s. So, say we have this s, right, this line, all the presence of comparable with it, and this cone above it. This is the cone in our tree. And a frozen cone is all the nodes which are a Which are either below the node S or I extension of T. Okay, so above this S, they get values greater or equal than I. Okay, so this is a frozen cone. And notice now that actually, if you look at this sequence of frozen cones, when you enlarge the I, look at all the options of I, this is a decreasing sequence. And the intersection of all of it is just all the predecessors of the the node S. Source of the node S. Okay, so this is like a filtration of the cone. Okay, we have like a filtration, and actually, a very nice idea here is that if the tree is raw uniform, so it is closed under all eta, all raw modifications, then the frozen cone contains a copy of the cone itself, which is one of the main idea here. You can move. Of the main idea here, you can move everything upward by an eye extension by a raw modifier, right? Just put I from the piece point on. Okay, so we are looking at the following reduction, right? We have the problem of minimality, but we want to a very useful thing is the following reduction that was in the paper. So assume t is a tree from less than kappa to omega, such that it is a normal kappa one shine tree and not kappa summary. Kappa R1 chain 3 and not kappa cysteine. So we have a large anti-chain. Assume T has the two properties I mentioned: raw coherence and raw uniformity. And you have the following idea. Every subtree of T, so every subset of the T which is downward, closed, and of size kappa, it contains a frozen cone. Okay, what do I mean by frozen cone? So say you're giving me some S sub t. There exists some node T in T and some I less than omega such that T S I, the frozen cone, is contained in S. This is what I mean by contain the frozen cone. So then, if you have a tree with all these nice properties, then they proved that for every anti-chain X of size kappa, the linear of X of size kappa, the linear order when you look at x in this anti-chain with the lexicographic inherited order is minimal with respect to being non-sigma scattered. So yay, we did what we want. We just need to construct such a tree. So how do we construct such a tree? So with the microscopic approach. So in a series of papers by Watsky and Rinot, we presented new foundation, a new method to construct kappa trees. The foundation consists of a family of The foundation consists of a family of proxy principles that enable to construct kappa trees regardless of the nature of a cardinal kappa. So it can be LF1, it can be LF2, LF omega plus 1. And the method is known as the microscopic approach. And specifically, we are kind of following ideas from a construction of a coherent Kappa Susslin tree. So the main result is as follows. So assume Kappa is regular and countable cardinal. Assume we have diamond kappa. Assume you have diamond kappa and you also have the principal X box kappa, then there exists a tree T from less than kappa to omega, which is normal, not suslin, low coherent, raw uniform, and every subtree contains a frozen, then you have what you wanted. Sorry, yeah, okay, it's missing. We have what we want, what we wanted, the minimality, the linear, the minimal linear order. So just to mention, So just to mention, this Xbox Lambda plus is strictly weaker than this square with built-in diamond sub Lambda. And yeah, so let's say what is the assumption of the X box that we really use here. So we assume that we have diamond cap. So kappa is a regular uncountable cardinal. We have diamond kappa holes. There exists some sequence, C alpha, a C sequence, such that whenever we give me a limit. But whenever we give me a limit ordinal of kappa, C alpha is a club in alpha. So the C sequence is containing clubs in alpha, yeah, club. And for every alpha, we have coherence. So for every alpha and for every alpha bar accumulation of C alpha, C alpha bar is just C alpha intersection with alpha bar. So you can see it here in this picture, right? We have this C alpha. It's a club in alpha. Let's say that alpha bar is a limit point in this C alpha. In this C alpha, then the C alpha bar, the letter of C alpha bar is just C alpha in the secondary of alpha bar. So this is the coherence property. Okay, what more? So we have the following heating principle: that whenever you give me a sequence, cofinal subset of kappa, so loud sets, there exists stationary many alpha. There exists stationary many alpha such that for every i less than alpha, the soup of the non-accumulation of C alpha intersection Bi is alpha. I know it looks scary. It will be only at the end of the talk, so try to avoid it for a second. But we also need this following idea that the set S, which is just all the nodes alpha below kappa, such that the other type of C alpha is below alpha, so it has all the alphas which has small order type is stationary set. This idea, this the first This idea, this fourth point, is going to help us to make sure that there is a large anti-chain in the tree. So if you have all this bunch of assumptions, you have diamond file, you have this C-sequence with the coherence and a heating property and small set which is stationary and the other type is going down, then you can get the tree in the reduction we were looking for. So this is what I want to present today. I want to show you how to construct such a tree from this assumption. To construct such a tree from these assumptions, and we are going to do it with the microscopic approach. So let's get ready to do it. I'm talking too fast. Okay, without loss of generality, we are going to assume that C alpha contained a zero point. Okay, this is okay. Thank you. Thank you for that. Thank you. Thank you. Thank you for just square. What what am I doing? No, we have a hidden principle here, right? This is not in the square. So but it but it is a square sequence, but yeah, yeah, it's not it's not it's non-trivial, yeah. Yeah. Okay, any more questions? Okay, so let's construct the tree. So we will need the following idea from by Brodsky and Winot. They introduced the following equivalent form of diagram. Following equivalent form of diamond kappa, which is the diamond H kappa. So we have the following idea. We have some politician RI of kappa, okay, which is so the idea with RI is that we have some bookkeeping we need to do. We need to take care of some assignment during the construction. So this RI, this partition, is kind of doing it for us. Like if you are, if at some point you're talking about some ordinal in RI, you About some ordinal in Ri, you will already know what job to do by this partition. And we have a guessing sequence, this omega beta, where beta is less than kappa. These are guessing sequence. So usually it's like a subset of kappa, but a subset. So omega beta. So usually in diamond, we have like a alpha is a subset of alpha, but here omega beta is going to be an element of h kappa, okay? And whenever you give me some parameter p in h kappa plus, okay. In H kappa plus, okay, for example, what sorry, yeah, so when you give me some parameter of H kappa plus, for example, the tree which we constructed and some int, some i less than kappa, some place you want to be in the partition. And whenever you give me a set omega, which you want to guess, subset of H kappa, then there exists an elementary submodel M of H kappa plus such that. H kappa plus such that the model contains the p. So the model will know what you're talking about, it contains the parameter you're looking for. The height of the model, m intersection with kappa, it will be in Ri. So this is why we are looking for every i. So you can find a specific element model such that the height of it will be in Ri, will be in the prepartition. And when you look at the set you wanted to guess, omega, subset of H kappa, what the models see of it. What the models see of it is just the guess at the height of the model. Okay, hopefully reasonable. Yeah. What? You don't insist at all. No, yeah, it just happens. Yeah. Yeah. It usually does. Okay. So, yeah, I know it looks a bit scary. It will follow just at the end of the talk. So you can just forget about it for now. So we will need some shuffling. So, we will need some shuffling projections, which from the previous slides are going to follow. So, as I said, we fix some RI partition of kappa and some omega beta with this diamond h kappa and fix some function pi. So, pi is a like recording for given some alpha less than kappa, it shows in some place in the partition of Ri, right? Place in the partition of our i, right? So pi alpha will tell you where in which i it shows. Okay, we have a partition, we have alpha less than kappa, then there is some r such that it shows, so this is the r pi alpha. Okay, okay. More than that, because we have diamond h kappa, we know that the side of the size of h kappa is just kappa. And because the size of h kappa is kappa, we can fix some well-ordering of it of all the type kappa. Of it of all the type kappa, and let's fix some witness to this isomorphism. So, like whenever you give me something in H kappa, let's say a modifier, eta, okay, it will show up by this psi. So, now we can record it. So, we just need to add it to R to make sure that this recording happens many times, okay? So, we do it as follows. It's just the interesting map. The interesting map we were looking at is phi, which is going to be ψ composition with pi. So let's say we are interested in some eta raw modification, which is an element of H kappa. Because it is an element of H kappa and Psi is just an isomorphism, we know that Psi I is just eta, right? For some i, sorry. For some i, you can make sure that psi i is just eta. So give me some. So give me some beta in Ri. Let's see what phi beta gives you. Phi beta gives you it's just psi of pi beta. But what is pi beta? Pi beta is just i. So this is pi psi i. So you get eta, because psi i, as we said, is just eta. So whenever you give me beta in i, in, okay, yeah, okay, fine. So this is like the shuffling subjection. This take care of all the bookkeeping that we are. Care of all the bookkeeping that we need to do. Okay, so we want to construct a tree today. So, how do you construct a tree? By recursion, right? This is a good way. Okay, so the tree, as I mentioned, is going to be functions. The nodes in the tree are going to be functions from less than kappa to omega. And we are going to construct it by recursion. We are going to construct it by recursion on alpha such that at every alpha stage we construct T alpha, the level T alpha, and at the end the tree itself will be just the union of all the levels. Okay, so we want to construct the levels by recursion. So what do we do at the start? Just the empty set. What do we do at the non-accumulation point? We take all possible options. Okay, so T alpha plus one is going to be the node T, where T is in. node t where t is in t alpha concatenated by n so i mean just put n above of it okay so this is how you construct an alpha in non-accumulation like yeah actually we construct like alpha plus one here uh what do you do when alpha is an accumulation of kappa so let's have a drawing so we have alpha level and we have some node t here and we should And we should make sure. Okay, so in the construction, we will have we will make sure that this set it is going to be non-empty. What is it? It is all the ordinal, finite ordinal, such that when you look at the pre-image of the function t, it's going to be cofinite in alpha. Okay, so we will make sure that this it is going to be non-empty. Actually, it will be a singleton, and we will take this the successor. Take the successor of this node t to be only this unique element in it. Okay, so in the alpha level, which is in the accumulation of kappa, we have only one successor. It's T by minimal of IT. Okay, so all the points here have one successor. How do you still decide who's on PL? What? No. What? No, so yeah, I didn't get there. Yeah, we're, yeah, you're right. This is the limit case. So, this is the interesting part. So, suppose alpha is a non-zero limit ordinal, and suppose you already constructed everything until now. So, all the levels T beta, where beta is below alpha, has already been defined. So, we will define, identify some node, bold B alpha, from alpha to omega, and we will take T alpha to be all this. All functions Z from alpha to omega, which are raw modification of B alpha. Okay, so because we need uniformity, we have to do it, right? We take a branch and we take everything else, and we cannot take anything more because of coherence, right? So all these things, these properties will give us for free these two properties that the tree which we constructed is raw coherent and raw uniform. A raw uniform. Okay, we just need to take care of everything else, like making sure that it's kappa-aronshine, not suslin, contains every subtree contains frozen corn, all the easy stuff. So how do we define the branch B alpha? So maybe let me try to have a picture. So yeah, so we have a tree. We are going to We are going to let's let's be more we have a tree right now until the alpha level. This is alpha in accumulation of kappa and we want to define B alpha. Yeah, let's have a different color. This is going to be B alpha. And how do we do it? We maybe, you know what? Maybe. No, sorry. Ah, okay, too much. Sorry, ah, okay, too much. Okay, how do we do it? In order to define this blue B alpha, we are going to choose along the way of this letter C alpha some nodes, okay? But they must be, we want to construct a branch, right? So we pick at every node in C alpha. Let's say we have some beta here, which is in C alpha. I want to identify some node here. And at the end, after you identify the node for every node in C alpha, because C alpha. For every node in C alpha, because C alpha is cofinite in alpha, we can just take the branch to be just all of them, just like the union of them, because these are functions. So the way we do it, like the notion we do it, we have this B alpha, which is a function from the letter C alpha to the to the three, where at every n ordinal beta in C alpha, you just give me some node at the at the T beta level. Some node at the t-beta level. Okay, so this is just a way this function b alpha is going to be useful just to identify what we what you do in the recursion on c alpha. Okay, so we want to define again, we want to define a branch at b alpha. We do it by recursion on the on the level C alpha. The ladder C alpha is a club in alpha. Okay, so at the end, if you choose at every point a node in the tree at the right level, at the end you will get a branch. This is the branch. End, you will get a branch. This is the branch we want. So, and we want to do it in a coherent way. Okay, we could use the fact that our C sequence is coherent. This will make sure that at limit point, if gamma is accumulation of C alpha, then the B alpha at the gamma level is just going to be the branch you chose at the gamma level. So the construction behaves very nicely. This is what we want to do. And now I need to tell you what will happen. And now I need to tell you what will happen when you give me some beta minus and beta, which are successive in C alpha. Okay, so we want to say that. Okay, so in order to do all that, we will assure the following two things. So the second point is that the coherence that I just mentioned, if beta is accumulation of C alpha, then the branch you chose at the beta level is going to be a subset below the branch at the alpha level. Branch at the alpha level. And furthermore, if you look at all the points which you get zero value, these points are just the letter C alpha. So look at the zero points, this coding all the C alpha, the C alpha level, the C alpha letter in the C sequence. Okay, so this is, as I mentioned, how you do it. So at the start, you take just the empty, right? Zero is in the letter C alpha. We do it by the Causional. C alpha. We did very caution on things in C alpha. So you just take the empty set. Next, let's say that you give me two successive elements of C alpha, and let's say that B alpha beta minus is already been defined. Okay, now we want to define B alpha beta at the T beta level. And we want to make sure that it is in this frozen corner. This just says that this B alpha at a beta minus is so that. So let's say B alpha beta is a subset of B alpha beta minus when you concatenated it by zero. Okay, so we want to make sure that at the zero level, at the beta minus, you get zero. But then everything from this point to this point, you want to be non-zero. This is what we mean here by the intersection of T beta and the intersection with the frozen cone at the one extension. So no, no, zero. Extension. So no, no zero values in this between the two points. And this will actually assure one, right? Okay. And if you do all of this very carefully, like and you and you in a coherent way, consulting always things backward, this construction will have the property two. This is, yeah. Okay, so in order to define B alpha beta, as I mentioned, it's going to be a subset of. As I mentioned, it's going to be a subset of this set T beta intersection the frozen cone. We will consult some set Q alpha beta. So, before I tell you about this Q alpha beta, let me okay. No, okay, let's okay. So, this Q alpha beta is going to be a subset of this T beta intersection T at frozen cone. So, you don't need to be scared of this part, right? Of the start of this set. This is fine. Next, we This is fine. Next, we will ask a question. Q alpha beta is like a question that you want to ask. So an element T is going to be in Q alpha beta if it's in the right set, right? It's in here. But you also need that there exists some node S outside of omega beta. Omega beta is some guess from our diamond H kappa. We want to know that S is a function from T restriction to beta. So it's a node, let's say, a node in the tree below beta. Below beta, and it's outside of the gas, such that when you look at phi beta, so what is phi beta? Phi beta is some element in H kappa. But if it is not a raw modifier, then this star operation will give you empty set and everything is not important. So phi beta is just, let's say, let's just imagine that it is a raw modifier because that's what it is. So this raw modifier, so suppose it, so at the beta level. So, suppose it at the better level, you get some wall modifier. Now you look at the action where this green dot, the no, this, sorry, okay, I don't know. Where is it? Here. This point here, B alpha beta minus, concatenated by zero, is moving to this phi beta by the raw modifier. Now you ask, is there some s in this set which enlarges? And Enlarge it and you want to know that also that when you pull back this raw modifier to phi minus beta on s you know that t is above of it above a free set. So yeah, I know it looks kind of absurd, but it will be showing up in the frozen cone when we talk about it at the end. So I will it will be back again. You don't need to remember it. So we have this q alphabet, whatever it is. If it is If it is non-empty, just take the least element like we took in the H kappa well ordering, which is when you want. So B alpha beta is the list where you want it. And if it is empty, then take anything in here. But why is there something here? Because of raw uniformity. Okay? Okay, so anyway, we are able to do the next step. Either if the question is empty or if the question is done empty, we get to where we want. Okay, so now, as I mentioned, Q alphabet has some microscopic nature. It depends only on things from below. It depends on T beta, on omega beta, on phi beta, on the ladder C alpha until beta minus level, and on the B alpha. level and on the B alpha beta minus. So whenever you give me ordinal gamma, if the letters C alpha and C gamma are the same until beta plus one, then the branch you took are the same. So this is like uniformity of the construction. It is yeah. Okay, what do you do at limit point? As I said before, you just take the union. So save at B alpha at the at the sorry, no. So, say that you have beta in the collection of C alpha and you already define the branch until the beta level, then you just take the union of the image of everything of this function of putting choices of the nodes. And this node, because of the coherence, things are well done. So, this is indeed this B alpha beta that you just defined is going to be the branch at the beta level, and it's going to be in the tree. And it's going to be in the tree, right? Because the B, the bold beta is an element of T beta. This is the way we constructed the beta level at the limit point of beta. Okay? Okay. Okay. So in the end, the bold B alpha is going to be the union of all, of the image of this function B alpha. Okay, yeah. Yeah. Okay. Okay. Okay. So, why the trees kappa on chain three? So, obviously, the levels are of size less than kappa, okay? We just took modifiers, and modifiers are very simple. There are not many modifiers. So, let's assume that there is a branch, right? What is a kappa orange ion tree? It means that there is no branch. Assume on the contrary, there exists a branch. For every alpha in S, let's look at, let's denote by T alpha. Let's look at, let's denote by T alpha, just the branch at the alpha level, restriction to what alpha level. This, because it is a branch, this T alpha is in the alpha level. Recall that S is this, all the nodes alpha, which are going down by the other type. All the alpha, which are going down, the other type of M. So because T is an, this is T alpha, sorry. So T alpha is an element of alpha, of the T alpha level. So it is by the construction just. is by the construction just at alpha yes star operation on b alpha so by photolema we can now go down right we can we can find some c below kappa and such that for every alpha and beta in al you make sure you okay you can okay you can because eta alpha and eta beta are like finitely from below defined right this is like a finitely function you can go down there by following Function, you can go down there by photo lemma, and you can make sure that eta alpha is going to be a subset of eta beta, just because of this nice definition. Okay, so now we can, so we, okay, so we take this S set and we, by the follow lemma, we make sure that every alpha in L is going to be, all the other type is going to be the same x. And this gives us that. And this gives us that whenever you give me T alpha and alpha and beta in Al, and T alpha is a subset of T beta, this just means that eta beta star B alpha continuated by zero is a subset of eta beta concatenated by B beta. And this implies, right, you can just do the eta minus. Sorry, we and we get that B alpha concatenated by zero is a subset of B beta. But what is C. But what is C alpha? It's just the pre-image of zero. So now the order type of C alpha plus one is less than or equal to the order type of C beta. But by the photo lemma, we got that they have the same order type. So yeah, you assume you have a branch, you code a bunch of things, go down by the photo using the assumption that you have a set just that the order type is small, and then you get a contradiction to the assumption there is a branch. Okay. Branch. Okay, the proof that this is not a kappa substantially is kind of the same. So recall that this is the set S. By photolema, we can find a subset of accumulation of kappa and s such that for some c less than kappa, for every alpha in R, again, the order type is the same fixed value. And now we can denote A as just. A as just the branch B alpha where alpha is in R, we claim that this is an anti-chain. So, why is it an anti-chain? Just because if, let's say that you have alpha and beta in R, such that B alpha is a subset of B beta, but it is not an anti-chain. So, C alpha is just a pre-image of B alpha at the zero. And the only extension of B alpha is the T alpha plus one. Okay, is the function B alpha concatenated by zero? So again, we get the same contradiction. We get that the order type is increasing, but it is the same. Okay, so what do we have until now? We have a tree which is raw coherent, raw uniform. It is a kappa tree, it is a kappa iron chain tree, and it has large anti-chains. It is not kappa sus name. So we just need to make sure that every sub-tree of T contains a frozen corn, and we are done by the reduction. And we are done by the reduction by the reduction from becoming more isolated paper. So recall that we have this H kappa, and we had this property, this assumption, that for every sequence of BI, cofined subset of kappa, we have stationary many alpha such that the sup of the non-accumulation of C alpha intersection Bi is equal to alpha. Maybe it's a good time to have a picture of that. Okay, so what do we have? We have kappa here, and we have this set BI, which is very large, like that. So there exists stationary many alpha, so let's fix some alpha here. We have here some alpha, and we can look at the And we can look at the letter, right? We have this letter, C alpha. And now we say that if you, but confinedly many times in alpha, right, you can find here many, many points, which are, let's say this is beta point. Beta is going to be in the non-accumulation of C alpha and intersection with BI. So many, many times you're hitting this set. Times you're hitting this set. What is going to be BI? It's going to be some nice set which codes that you took care of some raw modification. So, along the way of alpha, we want to make sure that we did a bunch of stuff and took care of all assignments that we needed. And this thing will make sure that for finitely many times you took care of it. Okay. Okay, so we want to show that every subtree of T contains a frozen cone. Just to remind you, what is the subtree? Frozen cone. Just to remind you, what is a sub-tree? A sub-tree is a subset of the tree of size kappa, which is downward closed. So say you have some A, subset of T, which is downward closed of height kappa, which doesn't contain a frozen cone. Whenever you give me T and I, T and I, the frozen cone is not contained in S. Okay? Let's say, okay, let's be, let's say this is S, A. Let's say this is S, A, and the assumption here is that it doesn't contain a frozen con, so ah, wow, it's the opposite. For every T and for every I, we have that T, the frozen cone of T I is not subset of A. This is the assumption. So we aim to get a contradiction. What will be the contradiction? We will, at the end, show that A is just a subset of T restriction to alpha for some alpha. Restriction to alpha for some alpha. Let me just mention that these all ideas are also showing in their papers. This is just like a very extension, small extension to the inaccessible cardinal. And okay, so we have the diamond H kappa. This will help us. So the omega, the guessing, let it be the subtree A. Okay, we have this A, which is a subtree. And the parameter is going to be the tree itself. Okay, so by Okay, so by the H diamond H kappa for every I less than kappa, because of this sub elementary sub-model thing, we know that the set BI, which is all the betas in Ri, such that A intersection with T intersection to beta, is going to be, right? The model gives you, you are given some model. This model is of height beta, okay? So, what does the model see? It sees the tree, right? So, what kind of tree it sees? It sees the tree restriction to. It is the tree restriction to beta. Now we know that we guess it, so we know that the omega beta is going to be A intersection T restriction to beta. Because what was the assumption was that M intersection with omega, right, this is A, is going to be M of the kappa intersection M. No, omega, sorry, omega. So, okay, so this is here, right? Omega beta. This is the height. Okay, so and because of this is the elementary sub model, and because we know about the tree, we know that this A, this guess, doesn't contain a frozen cone. This is just, yeah. Okay, so this set Bi is stationary at the end. Now let's denote by, for every alpha, let's denote. For every alpha, let the note by m alpha the set of all road modifiers which are from alpha to omega. Okay, just function from alpha to omega. Applying the assumption on Bi, right, we had this heating assumption right here of Bi. We know, and the club, and we have this club D, which is all the alpha such that the modifiers are subset of the psi alpha. Psi was just an emergency, not an energy, by injection between kappa and h kappa. kappa and H kappa, to obtain some ordinal alpha in the club D, such that for every I in alpha, we have the heating property we wanted. Okay, so at the end, we use this diamond H kappa to get a stationary set which sees the the the the the gassing sees it well, okay, it sees the the the the everything we want. The everything we want. It says that this is a sub-tree of tier restriction to beta, which doesn't contain frozen cone. And we also made sure that this alpha is going to be closed under all the modification below alpha. And we have this eating property. So now recall at the start, I said that this I is going to be, every I is going to be corresponding to some raw modifier eta. So now let's use it. So to see that A restriction to To see that a restriction to is, okay, to see that the subtree is just a subset of t restriction to alpha, which means that it's not a real subtree. Consider some node y in t alpha. The node y is just eta star b alpha, right? This is the way we define the node in the alpha level. Now, alpha is in D, so eta is an element of the set of modifiers. element of the set of modifiers and we can fix some i below alpha such that psi i is just eta so in the inner we we we have we have i below alpha which sees it okay so now let's fix some beta in the non-accumulation of C alpha intersection BI from the heating we had principle we had on the C sequence this implies as I mentioned at the start phi beta is just psi composition pi so A composition pi. So pi beta is just i because beta is in r i okay bi was a subset of r i so now we get that phi beta just gives us the raw modifier we wanted okay so just to have the big picture again we want to show that every subtree which doesn't contain a frozen cone is not a subtree it is bounded so we give some node y at the alpha level we pick At the alpha level, we pick alpha in a good way. We pick some y at the alpha level. It is modifier eta star B alpha. We want to show that during the way, we took care such that the extension is outside of A. Okay. Okay, because beta is also in BI, we know that the guessing sees that omega beta is just a subtree which doesn't contain a frozen cone. This will be very useful. So let n be So let n be the maximal n, absolute value plus one, such that n is an element of the image of eta. Remember that the eta is just a function to z, which has finitely many changes. So this maximum is defined. We claim finally that q alpha beta is done empty, but the alpha at a better case in the construction of the In the construction of the branch B alpha, we took care of it. So we want to show that this set is done empty. So omega beta is a subtree which doesn't contain a frozen cone. So we have this property. Whenever you give me a node in the I, I know that I can find an extension outside of I, of A. Okay, so because this is the frozen column, this I is now going to be this big N, and the node T is going. Big n and the node t is going to be this eta star b alpha beta minus concatenated by zero. So now we can fix some weakness s such that s is an n extension of this node here and not in omega beta. Okay, so this is because the assumption that the omega beta doesn't contain a frozen cone and yeah, that's it. Okay, so this implies that you can. So, this implies that you can now do the pullback. You can go look at eta minus star s, and this will be an element in t b alpha beta minus concatenated by zero, one. It will be in the frozen cone, extended one. And this is what we wanted, right? This just this, all this argument shows you that Q alpha beta is non-empty. Okay, so B alpha beta is just the minimal value there because Q alpha beta wasn't empty. Because Q alpha beta wasn't empty. And so we know that there exists such an S in T restriction beta minus omega beta, such that it extending this green set, green node. And when you pull back S, you get subset of B alpha beta. Let's just see how it finished the arguments. In particular, this eta star B alpha beta extends an element, right? It extends an element not in omega beta. And this is. And this is altogether because A is downward closed, and we know that S is not in A, right? A is just the here, right? Omega beta is just A intersection theory section to beta. So A S is not here. So S is, we know also that S is a subset of eta star B alpha beta, which is a subset of Y, and Y is not in A. So this finished the arguments. Maybe let's look at the picture. So we have, we defined this. So we define this branch here using the function b alpha in a recursion way. At the beta level, we extend this beta alpha beta minus concatenated by zero to this B alpha beta. How did we do it? We looked at this B beta. It was some raw modifier eta because beta was chosen in a very good way. And we found such that And we found such that this S is outside of this set A. So it cannot be that Y is in the set A. So A is bounded. We did it for every Y. And yeah. Okay. Thank you for listening.   Separate orders for the given expense, but yeah. But yeah, exactly. The first analog we have, so yeah, we don't have much over and back of minimal cardinal, a minimal linear order of a non-signal scattering. So I yeah, it's a nice question about single odds. Yeah, it's left open. I don't know, maybe you can even say that there is no such thing. no such i i'm i'm not sure i didn't think about it any other questions or comments um it i just it was pointed out to me by paul that we've been ignoring the people online i was at least so is there a way to see if anybody online has a question or um Yeah, so could we see the chat on the on the screen? Yeah, no chat. No chat? No people. No people, I see. So we've already chased everybody away. I guess since there are no people, there are no questions. So let's thank Roy again. And that's it for today, I think. Other than the problem session, which starts when?