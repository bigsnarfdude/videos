Karen and the other Karen who's not here yet for inviting me. And I have to tell you, when the invitation came, I thought, well, hey, great. You know, this sounds like a wonderful opportunity. Why me? What do I have to do with movement and symmetry and graphs? And so it's a question that got resolved in little parts. So this morning, Karen said, Well, most people here are connected to one of us in some way, even if you're researching something. What's my connection? My connection. So, Joy and I were classmates a long, long time ago, but I was much older and I was right at the end of my PhD program. Joy was very, very young, and only at the beginning of her master's program. So, okay, but okay, there's this one connection. And 32 years ago, I worked at the University of Regina, where Karen is, before leaving for Victoria, and as my colleague said, simultaneously improving the quality of both departments. Wait, sorry. Vagina. Okay, okay, good. So that's fine. So hopefully I have, it's got movement and symmetry in it. So I do like domination or eternal domination or broadcast domination. I think somewhere I said, planable domination. This will come back in a second. Okay. Okay, well, this is good. And then I got asked to do this with a partner, but it didn't work out to have a partner, which is really too bad. So a long time ago when I was a student in Vancouver, I used to go to Vancouver Theater Sports, not as a player, but as a viewer. So Theater Sports is live improv. And so one of the games the players would play is this game called Scunt Double. So they'd start some skit, and then when the skit would get kind of messy, someone Git would get kind of messy. Someone would call for their stunt double who would have to jump in. And I've always wanted to realize this in a mouth box. You know, I'll do something and I'll get myself into some kind of proof trouble and they'll call for a stunt double. And they can come and they can bail me out and carry on for a while and hopefully they'll finish the whole thing. But that opportunity is gone, so I'm going to have to fly solo. And all right, so then I learned a couple of things. So I didn't exactly say So I didn't exactly submit my abstract on time. And I got an even better abstract. I got an even better abstract than I could have hoped for. It was wonderful. And then I realized when I saw the schedule that what it is, is I'm the before dinner entertainment. So this is good. So there are no eigenvalues in this talk. There's not a lot of brain power required. Just relax, have fun. We'll have a little space. Have fun. We'll have a little smorgasbord of topics, and we'll see how we do. So, I'm going to try to talk about eternal domination, whatever that is, but I do claim that it involves both movement in a really, very real way and eventually symmetry. So, they're both going to be there. All right, so let's just talk about mobile sensors. Okay, so there's a little network of sites, and the deal is you've got these sensors, maybe they're on the backs of trucks, and they're going to monitor. Trucks, and they're going to monitor the sites that they're at, and they're going to monitor adjacent sites. You'd like every site to be monitored. And sometimes, you know, if you're monitoring a site, something happens, and you've got to go fix something at the site, you got to go fix the elevator. Something has to happen. So the guy who's got the truck with the sensor drives over to the site to do maintenance, but you still would like every site to be monitored, so you have to reconfigure some of the other trucks. Maybe not all of them, maybe just the one. Maybe not all of them, maybe just the one, but maybe a few, to maintain this property that every site is monitored. And maybe you're cheap, so you'd like to do the minimum number of sensors for a given reconfiguration rule. So maybe if you only move one sensor at a time, you need a different number of sensors, and if you can move them all or move five of them. Okay, so what I'm going to talk about first is the rule where all of the sensors can relocate at any particular time. So up here, Up here, you think, well, okay, so here's a particular configuration of sensors of five, and it's dominating. You think, well, okay, so can I always relocate the sensors to maintain the dominating property and be able to do that continuously. So for example, if something happened, say, here at this site, well, maybe this guy would drive down there, and maybe this guy would go here, this guy would go there, and you could do it again. If something happened, say, here, Happen, say here, well, maybe this one would go over here, and that one would go over there, and nobody else would move. And you can play around with it and try to see if you believe that five are enough, and you can always reconfigure these sensors when you need to. Sorry, can I understand the. So, what does it mean something happens here? It means I'm making a story. No, I know that, but I mean, so mechanically, I don't want to understand that. Okay, hang with me. It gets better on the next slide, I promise. Okay, so the Okay, so the deal is what we're trying to do is maintain a dominating set. Okay, so a set of vertices so that every vertex not in the set is adjacent to a vertex in the set. We want to maintain that forever. So they deal with it, so at each time, the requirement is that we're going to reconfigure the dominating set to one that includes a particular vertex. This is the site that you have to relocate to. And we're going to use that token sliding model. Model, so a vertex that's in the current dominating set can only be replaced by a neighbor. So you imagine your dominating set is a bunch of tokens on your graph, and you have to reconfigure to have a token on this vertex over here, and maybe you're supposed to slide the other tokens around to maintain a dominating set. And you want to do that for as long as you can. Okay, so this one here, here's an example. I mean, maybe this guy's over here, it doesn't really matter. If you have to relocate, if it reconfigured or dominates it, it includes that vertex. Well, either that one's going to go there. Vertex, well, either that one's going to go there and that one's not dominated, or that one's going to go there and that one's not dominated, and it doesn't work. If you have three items in your dominating set, then, okay, well, you can do this. So this guy here never moves. This guy here goes back and forth between those two. This guy here goes back and forth between those two. And you can do that for as long as you want. All right, so if you're trying to reconfigure and you want to know how big Figure, and you want to know how big your dominating set has to be, you might as well just assume the worst. So, assume you've got an evil adversary or evil adversary who is telling you to reconfigure your dominating set in the worst and most inconvenient possible way for you. So, that's going to turn it into a two-player game. Okay, so I got player one and player two. What player one is going to do is choose a dominating set of size k. My graph is given in advance. My number of guards, I'm going to end up calling them k. Things in my dominating set are chosen. Dominating set are chosen, are known in advance. So, player one is going to choose a dominating set. Maybe this is even a dominating set. And then what player two is going to do is, I'm going to say attack a vertex x, but basically require you to reconfigure to a dominating set that contains that vertex. So if it's this guy here, then the only option is that this one slides over there, and then there's got to be something else that happens to maintain a dominating set because that vertex is no longer. Dominating set because that vertex is no longer dominated. So, this one is probably going to have to move down there. And you just carry on. Okay, so reconfiguration rule, all guards can slide to a neighbor, and we'll turn it into a game. So, player one is going to win if they can continue to do this forever, eternally. Player two is going to win if they can force you out of the property of having a dominating set. So, if the subvertext is not dominated, then they can say, include that in my dominating set. And they can say, include that in my dominating set, and you can't do it, so you lose. Okay, so first of all, is it really forever? I mean, do we really have to play the game forever to determine the player one wins? I mean, not really. Because there's a finite number of configurations. These are finite graphs. And eventually, if you've run through them all and you've repeated one, well, if player two was going to win, they would have won by now. So the pigeonhole principle is. Now. So the pigeonhole principles are friends. Is this not reviewing an infinite game? And secondly, is it a combinatorial game? So normally combinatorial games end, right? The last player to be able to make a legal move wins. Well, you could take into account that the pigeonholes principal is your friend and turn it into a combinatorial game by just marking off the positions as you've encountered them. And you can't repeat a position, so the first one who is Who is unable to move to create a new position? So, yeah, it's monitoring. All right, so the internal nomination number is going to be, you know, gamma, the all means all the guards can move. It's the smallest number of guards you need to be able to defend forever. And so, in terms of all the nation number of this. The internal elimination number of this graph is 2. Because you can see, if you start in that configuration and maybe you have to reconfigure something that contains that one, you shift to this one. You just go back and forth between these three networks. Now, gamma forever, instead of gamma infinity, this is not my idea. Well, John Goldblaster's idea. I think it's kind of cool. It's like you get this international society of people who work on domination, and this is how they end their meetings. Gamma Frank. This is how they end their meetings. Gamma forever. Okay, you're laughing, so I think you're still with me. All right, so in a complete graph, you only need one guard. In a complete bipartite graph, you only need two guards. In a cycle, you just need a third of, roughly a third of the number of vertices. Vertices. So this one here can take kind of look after those two. This one here can kind of look after those two. You need somebody else to pick up the slack. And then if you have to reconfigure, maybe, you know, you've got to reconfigure something containing that one. This one slides over, and then everybody just slides around one. And that maintains the dominating side. And for a path, half the number of vertices, improve it by induction. To see a half works, you just take this little click covering, just divide it into click. Clique covering. Just divide it into cliques. Every guard never leaves their clique. And so the clique covering number is always an upper bound for the eternal elimination number. Alright, so now I'll talk about some fundamental bounds here. So the originators of the All Guards Move version are Goddard and Hedenimi is squared there because there are two Hedonimis. So it's Steve Ansendi. Another son, who's also in the university. Okay, so Turtle. Terminal domination, so obviously the domination number is a lower bound, that's fine. And the claim is the independence number is an upper bound. So I'll try to convince you of why the independence number is an upper bound. So let's look at two cases. So first of all, maybe you've got some vertex that's not in a maximum independent set. Not in any maximum independent set. And if that's the case, then that vertex is adjacent to two vertices, at least, in every maximum independent set. So if you delete the neighborhood of that vertex, So if you delete the neighborhood of that vertex, then that decreases the independence number by 2. So you can use 2 guards to defend the neighborhood, just on the star, and alpha minus 2 to defend the rest of the graph by induction. The other option is that every vertex is in a maximum independent set. So that's fine. So imagine your guards are located on a maximum independent set. Some vertex is attacked. Now, a maximum independent set is dominating, so that vertex. Independent set is dominating, so that vertex is adjacent to somebody in your set, if it's not in the set already. And so, look, so cool. So, but that vertex is a maximum independent set. So, here's your maximum independent set that you're on. Here's the maximum independent set containing that vertex. You've got to go there. And it turns out that by Hall's theorem, the symmetric difference of those two maximum independent sets has perfect matching. So, you just lied to Garth's one. And now you're on a maximum independent set again. You can hang on. So that's it. Okay, so the independence number is not permitted. Okay, so the independence number is never bound. Now, in domination theory, the domination number is always at most half the number of vertices. Maybe there should be a ceiling there. And we know which graphs achieve quality. That doesn't really matter. And so it turns out that the same upper bound holds for the eternal domination number. And so the claim is enough to prove for trees, because what you do is you take a spanning tree, and if you can defend the spanning tree, then you can. And if you can defend the spanning tree, then you can defend the graph. So take a spanning tree. And again, there's two cases. If there are no vertices of degree 2, as I should say, degree 2, didn't catch that error. Didn't catch that error, but then it turns out that the number of leaves is at least the number of internal vertices plus 2. And what you can do is put a guard on every internal vertex and a guard on a leaf. And you can defend the graph by just sliding those around. So, for example, if you have to move to labor texts attached. To if you have two levertexes attacked, then you'll just slide those all that way. And that will maintain the property of a guard and every internal vertex in the leaf, then that's going to be given. Now, if there is a vertex of degree two, then what you can do is look at the two edges beside it. Either if you delete this edge or you delete that edge, then one of those two components has an even number of vertices. And so by induction, you have a half without the ceiling, the other half, doesn't matter if you have the ceiling, you combine them. Doesn't matter if you have a ceiling, you combine them, and you're done. All right. I did not invent this word. Eocolonization. I don't know why anyone would have invented this word, and I'm not sure who I want to blame. But it's either Wayne Goddard or Steve Hedanimi. It's one of those two. And I'm being recorded saying this. Sorry, Wayne. Okay, so what it is, it's a partition into connected subroutes. Or if you like here, into subtrees. And what we're going to do is we're going to assign a weight to each part. The weight will be 1 if it's complete. So for instance, this part here has weight 1. And otherwise, the weight is going to be the connected domination number plus 1. So if it's a tree, the connected domination number is just the number of internal vertices. So we're back to 1 plus the number of internal vertices, which you saw. 1 plus the number of internal vertices, which you saw a second ago on the previous slide. Now, they conjectured that the internal, well, certainly true that the internal domination number is less than or equal to the minimum number of weights, because you have a strategy by defending each part separately. And they conjectured that they're equal. Now, this turns out to be true. So, for trees, anyway, the parallel domination number is the minimum weight of a neocalbanization. How you Colonization. How you find the neocolonization is maybe a different story, but anyway, it's true, and we'll get to it on the next slide. Also, it turns out to be true for interval graphs. It may also be true for other tree-like graphs. But I'll tell you about trees for a sec. Okay, so for trees, I claim that the most useful thing you can do is look at the bottom of the tree. So if I see a bottom of the tree here, a vertex with one internal neighbor and one leaf neighbor, I'm going to chop it off. Leaf neighbor, I'm going to chop it off. That's a quick it's going to have to be way more. I have to have a vertex in my set down there, anyways, because I got to hang on to that leaf. Okay, if I see at the bottom of the tree, so again, one internal neighbor, the rest of them are leaf neighbors, but more than one, then I'm going to chop them off, and it turns out that that just increases, well, decreases the internal domination number of the resulting tree by one. So we're going to just apply these two reductions here and here. Reductions here and here, starting from the bottom of the tree. So I'll start to here, I'll get that one off, and then I'll chop those off, and then I'll chop those off. And I told you what happens here. Okay, and then after I've chopped these guys off here, I see I've got that structure. It's right there. And so I'll cut that off, and what that'll do is close off that part. And the same thing will happen here. I've chopped those off, and now I've got these, and I'll chop that off. Off, and now I've got these, and I'll chop that off, and then I've got a K2, and I'll close off that part. So you kind of build these columnities, these words of plate, and that creates a neocolonization. Turns out to be a minimum weight, and that's the internal domination. So that's how you construct the partition. Also gives you a linear algorithm, because you can just look at login of free and decide which production you're going to apply. Alright, so here's a tiny little bit of complexity. I'm not sure. The first one's kind of maybe disappointing. Maybe disappointing. If you've got a split graph, then it turns out the internal domination number is equal to the domination number of the domination number plus one. And that leads to the idea that for split graphs, it's NP-complete to decide if the internal domination number is at most some given constant. Okay, so the reason I'm disappointed by this is because it tells me, or it suggests, that what's hard about eternal domination is domination. Eternal domination is domination. So, domination in split graphs is an complete problem, or the decision version of it is anyway. But if I told you in advance what vertices were going to be attacked, if I told you the sequence of vertices you had to put into your dominance, if I fixed that and showed it to you, there's a polynomial time algorithm to decide if you can defend that sequence of attacks if you drop the condition for domination. So just. I'll give you K guards, you put them down anywhere you want, forget about dominating property. Here's the sequence of attacks. Can you defend it? So it turns out you can solve that with network flows. So now it's the domination part. That's the hard part. Maybe a little bit disappointing. But okay. It turns out that you can decide if k guards suffice in big O of n to the 2k plus 3 time, which is not good. n to the 2k plus 3 time, which is not good because k can be a function of n. And if you combine that with binary search, you get log k. So you can actually determine the internal domination number. That's fine. But more recently, there's a better algorithm. So log k is for binary search, but k to the end of k plus 2 is a way faster algorithm. It's still exponential, but it's not nearly as bad. NP completeness at the top, but it's probably exp-complete. For this model, I don't know. For the model, we're Model, I don't know. For the model where Wengard is allowed to move in a time, there are some EXP completeness results, so it's probably a very, very hard problem, at least for some graphs. Symmetry. By the way, we get there. So I did claim that I read some symmetry. So in the original paper by Goddard and Hedanimi and Hedanimi in 2005, they showed, or at least they claimed to show, that the internal domination number was equal to the domination number for Caleb graphs. The domination number for Cayley graphs. And they asked if it was true for all vertex transits and graphs, and it's not. So, in particular, it's not true for the Peterson graph. So, if you cut yourself into this configuration and then you attack that vertex, you can't maintain a dominating set. So, you would have to convince yourself that you can get yourself into that configuration or something that looks like it, but there aren't that many dominating sets of size 3D confusion graphs, so it's not so bad. So, it's not true for all vertex. So it's not true for all vertex transit graphs. And it transpires it's also not true for all Cayley graphs. The proof works for abelian Cayley graphs, but what happened is that they confused which of right multiplication and left multiplication was an automorphism. And when you read it fast, like I did, it's all very believable. When you read it carefully, like other people did, it's less believable. So that paper was in 2005. And in 2016, somebody finally read it carefully. In 2016, somebody found me read it carefully. So these guys did. And so they showed that there are non-abelian Kayleigh graphs with internal domination number equal to the domination number plus one. And they did a search. So they looked at 7,871 examples. That's what the paper says. I guess they just generated them. And of those, they found 61 that had internal domination number gamma plus 1. And of course, they wanted. 1. And of course, they wanted to know: well, is it always going to be gamma plus 1, or it could be gamma plus 46? And it can be gamma plus 46, because if you take many copies of the Calend graph, they're just disjoint. That's still the Calendar graph, right? So anyway, 1 of the 61 is on D6 times Z3. That's the smallest one they found. I don't remember what degree it is, but it's quite large. And so you might wonder, and I don't know the answer. For which groups, maybe it's just abelian groups, is it true that any Cayley graph on that group True that any Kali graph on that group has eternal domination number equal to domination number? Don't know. Okay, now I don't know exactly why this came to be called stacking, but I'm going to call it co-location. So you might ask yourself, is there an advantage to allowing two guards to be on the same vertex? Now it turns out if one guard can move per turn, only one, then no. One, then no. But if all guards can remove perturns, then yes. So here's an example. We're going to convince you that the eternal domination number is 9. And so what you can see is down here that these two copies of K4 minus an edge, they're joined to the vertex. And you need two guards to defend them. Because each side has two independent vertices. And so you need one kind of over here and one kind of over here, although they could be there and there. Alright, and after you've done that, and you have Alright, and after you've done that, and it has to happen at all times, because otherwise, one of those two vertexes is not going to be defended, and then you have to have one up here. Okay, so the eternal domination number is nine. But the claim is that eight work if you're allowed to have two guards per vertex. And the way that scheme works is I'm going to put one on the middle of each of these things down here. I'm going to put two there, and then just two somewhere else in its neighborhood. It doesn't really matter where they are. And then what happens? What happens, if a vertex, say, here gets attacked, well, this guy here will move to there. And I'll take these two guys and I'll move them to here and here. Now, this one has to be here to defend that vertex. This guy here will defend those two. And then I'll take these two and I'll put them back up there. And I've maintained the same configuration. One in each component, two somewhere in the neighborhood, and two in the middle, and you can just carry on. Now, if you take more copies of that, maybe get a bigger advantage. Maybe get a bigger advantage. But anyway, that's Steven Finbo and a whole bunch of other people's examples. And so I really like this next one. So you can keep going. So what if you allow three guards on a vertex? This was not in Tino's paper. Okay, so let's allow three guards on a vertex. So it transpires that your drill nomination number here is 29. So you need, you see, there's three copies up here. You can maybe infer that there. Up here, you maybe inferred that that's got something to do with three guards on a vertex. You might wonder what's going to happen if you have four guards on a vertex. Okay, so I'm going to take seven copies of this thing we had before. I'm going to take seven copies of that guy up the top with three little prongs and allow three guards on the vertex. So it's going to be the same story. One on the middle of each gadget, three somewhere in the neighborhood, and then three on the middle. And it's going to work exactly the same way. If something happens in that top left one, it'll get defended by the guard that's. One, it'll get defended by the guard that's there, and then my three will move into that neighborhood to make sure everything's defended in that copy. My three from the neighborhood will move to there. Okay, it's gonna give me 20. If I only allow two guards on a vertex, it's gonna be the same strategy as before, but it's gonna be 25. I won't bother to tell you why. And 29 otherwise. And so you might wonder: well, can you keep going? I had four guards, five guards, six guards, and a rotation. I had four guards, five guards, six guards on a vertex. Is it the answer is yeah. I'll tell you what's gratifying about this. Here's the theorem. So, if I give you, if anybody gives you a collection of integers that satisfy some necessary conditions, okay, to allow it to be a sequence, then there is a graph where the number of guards needed is di if i guards per vertex or a lot. Any sequence you want to be able to. Handy, any sequence you want to realize, as long as it satisfies the necessary conditions, you can find a graph. Now, what's really cool about this, so these two students were both working with me, but I had nothing to do with this. Ethan Williams, my master's student, Georgia Pan's undergraduate student. Ethan was reading this paper. Those two started talking, they did it all by themselves. Awesome. All right. So let's talk about fractional paternal domination for a second. So let's talk about fractional paternal domination for a second. So, I don't know why on earth anybody would want to do this, but somebody suggested this. So, okay, here we go. All right, so domination is an integer program. So, you know, you assign zeros and ones to the vertices, satisfy the constraint that the sum around every vertex is at least one. Certainly, you could talk about then the fractional domination number. You just take the LP relaxation of that. So, yeah, so you could probably talk about fractional eternal domination. We talked about fractional neutrino elimination. We assign some weights to the vertices. Vertex is attacked, which have at least a sum of one on it. You have to have at least one on it. And then there could be fractional ones anywhere else. There has to be a fractional dominating set. So around the neighborhood of each vertex, the sum has to be one. That's fine. All right, so that's what this is saying. Okay, I'm assigning fractions of guards to each vertex. The sum around each neighborhood is at least one. That's a dominating property. It's a fractional domination. And if V is attacked, I have. And if V is attacked, I have to be able to move a weight of 1 onto V and move the rest around to maintain this property. Okay, so gamma F infinity, minimum weight of a fractional dominating function. Now, this is an integer version, so it's at least as big as that. And it turns out, well, here's an example. I won't show you, but the internal domination of the Peterson graph is 4, but if I let it be fractional, it's 3. Now, very often these things just turn out to be integers. I don't know why. Turn out to be integers. I don't know why. You have fractions on the vertices, but the sum turns out to be an integer. One of the questions I wondered about is, well, what does a reconfiguration look like? Turns out it's a flow. Okay, so here's a four cycle. And let's suppose that these are the fractions I've got on the vertices here. And I want to reconfigure over here to these fractions on those vertices. And so I'll just make this network. And so I'll just make this network. Here's the source, there's the sink. I'll put those capacities on these arcs, everything's going that way. I'll put those capacities on these arcs, and I'll put infinite capacity in between. And if I can get a flow of value, the sum of those things, that's a reconfiguration. Okay? So what you need to realize fractional domination is a bunch of fractional dominating sets where no matter what vertex is attacked, you can reconfigure the flow. Reconfigure the flow. Okay, and then you can always do this. It's a network of these things, but if v is attacked, I've got some fractional dominating function where I've got a 1 on v and some fraction somewhere else. And if v is attacked later, I might not return to that same function. There are infinitely many options. If you have finitely many, you could probably do something. If you've got infinitely many, it might be a little bit dodgy. Okay, so it transpires that if I give you any. If I give you any rational number in the world, you can find a graph, essentially a split graph, for which the fractional eternal domination number is that rational. And for a split graph, you can, turns out if it's got n vertices, you can realize the value with n fractional dominating functions. But there's no reason that this isn't a limit. So I don't see for the life of me why you couldn't have. me why you couldn't have a fractional eternal dominating number, a graph whose fractional eternal domination number is pi. Keep realizing smaller and smaller rational, the collection of eternal dominating functions, of fractional dominating functions you need bigger and bigger at each step as you converge towards pi, and you can always do it. I don't know. So, is it always rational? I don't know. I don't know of an example where it's not, but it can be any rational number you want. We like to symmetry. So these are Cayley graphs again. So the paper I was looking at said the cubic appelian Cayley graphs fall into four categories. It's really just two. Alright, so the first one's K4. I know how to do that. It's got eternal domination over a fraction of eternal domination over one. There's the cube, it's two. And then there's these two families here. These are the prisms over cycles, and these are movies, cubes. And up in the corner, there is a And then up in the corner, there is a very non-symmetric drawing with a very symmetric graph. But anyway, that's the best I can do. Alright, so if you're talking about the prisms over cycles, then as long as the end, the length of the cycle, isn't congruent to 2 mod 4, then the fractional domination number is the same as the domination number and it's a half n. And similarly, if you're looking at these boobias cubes, these guys, these are just cycles with the angles. Just cycles with the angles. As long as n is not 0, mod 4, same thing. The fractional domination number is equal to domination number is equal to half n. And so in the unresolved cases, it turns out that we know that the fractional internal domination number is less than the domination number. And we got some lower bounds as well. But the only two values that are exactly known are these two. So C10 Cartesian product K2 has fractional return denomination of 28 over 5, actual fraction. And Z8 with the diagonals in has. Z8 with the diagonals in has fractional internal denomination number 8 over 3. I don't know. But that's what it is. Okay. Right. I'm not going to give you the story that goes with Roman domination. But there's a paper, I think, eventually in Scientific American called Defending the Roman Empire. The author is Ian Stewart. And it kind of relates domination to Defending the Roman Empire. To defending the Roman Empire, there's a whole bunch of military history that goes with it that I'm not going to try to remember. But basically, the idea is that the map of the Roman Empire, and the military strategy was, if you have an area where you don't have a big army located, it's going to have to be next to an area where there are two armies located. Okay, so you've got your armies, you're going to put one of them in some sites, you're going to put two of them in others, and so that if anything kind of happens over here, then one of these guys can go. Over here, then one of these guys can go over there and fight. Okay? Now, the problem is this isn't eternal. So, if something happens here and I send one of the armies from here over here, okay, fine. Then if something happens here, then one of the armies from there has to go there. Maybe this army will go back to there, but ain't nothing we can do about these ones. There's one army there, there's one in England, I don't know how it's going to get there. But in any case, these. But in any case, these two sites here, they're only adjacent to a site with one army, and they're in trouble. And apparently, I don't know if this is why the Roman Empire fell or somebody was making up a story, but anyway, that's my story, and I'm sticking to it. So, Roman domination, we're going to label with zeros, ones, and twos. Every zero is adjacent to a two, minimum sum of the values, Roman domination occur. The person who formulated it for graphs was Derny Kukaine in 2004. I stole. I stole the figure from Claus from Rein Meinhard's paper in 2015. Alright, so why not eternal Roman domination? Okay, that's, I mean, apparently that led to the cost of the Roman Empire, so we should carry on with it, right? We figure out how many cards we should, how many armies we needed to make the Roman Empire survive. Oh, but it didn't. Okay, so Roman dominating set. That's what you think. So labeling with zeros, ones, and twos. Every zero is adjacent to a two. Okay? X has to be dominating. I guess it has to be dominating as well. And what you'd like to do is maintain a Roman-dominating set internally. Okay, so. Eternal Roman domination. And so I claim that this will work. Now, there is a question about what the zeros, ones, and twos mean, but here, this two is just two independent armies, two independent legions that move around. So I get a bunch of independent guys that they can coalesce and separate. A different thing would be. And separate. A different thing would be to have armies, really, really strong armies, move them around, but that's not what you're going to do. Okay, so here is a Roman-dominated set of P5. And you could reconfigure it, say, if you need to, if that protector attacked, you could reconfigure it, this one down here, by putting a one over there, a one over there, and moving that one over there, somewhere over here. And you can go back and forth between those three, and it turns out that your internal Roman domination number of P5 is. The general Roman domination number of P5 is 4. Okay. So, Roman domination number trees, I didn't credit this to anybody, but it's Ethan Willigan, the same guy. And so, the theorem is that for every tree, for any tree, the eternal Roman domination number is at most 5 sixths of the number of braces. And it's tight. So, things will look like this. It transpires that. It transpires that on each of the P5s, you need that same structure I just showed you, and if you don't have it in death, okay, and so five reduces out of every six. There's a couple of things, though. So to get this bound, it comes from reductions. And in my world, to apply reductions from the bottom of the tree, so one internal neighbor, all leaves otherwise. And if that doesn't work, you move a little higher up, you move a little higher up, you move a little higher up. And so the bound here was going to happen. And so the bound here was going to happen, was going to work if some computation for trees on 16 vertices worked. Now, there are a lot of trees on 16 vertices. And the algorithm was processing about one tree every 15 minutes. Fortunately, the computation had been completed for all trees on 15 vertices, and an example of Kinetidon 16 could only have come from some of those, so the collection wasn't. Some of those. So the collection wasn't really that big, and it terminated and it led to this. All right, so I was talking about just other things. Here's paired domination. So paired domination, the subgraph induced by the dominating set has a perfect matching. I'll tell you how this bound goes, and then you'll kind of see. So this is just a pair domination number. Okay, so. Okay, so it turns out Bolivash and Kukain proved that you can always find a minimum dominating set where every vertex has an external private neighbor. Okay, so it's adjacent to somebody that nobody else is adjacent to. And if you just do that, so if you look here, this guy has, it could be that one or that one, then it's external private neighbor or this one, that one or that one, that one or that one. And if you, it's a two-packing, it turns out. And so if you just include the external private neighbor of a Private neighbor of a vertex in the dominating set, also in the dominating set, then you get matching. So that leads to the paired domination number being almost twice the domination number. And of course, you can talk about maintaining a paired dominating set forever. And so this is another student. So it turns out that for any tree, it just turns out it's twice the domination number. So you find the domination number. Number. So you find the domination number true easily, and then you can find your pairs. What works out is if you have a non-trivial star, maybe it's just this one here, maybe you can include that vertex here, it needs two guards, and the guards can never leave the star. If you're down at the bottom of the tree here, you need two guards to defend those three vertices, whether or not that one is included as a material. So what you're eventually looking for is the minimum weight or minimum number of stars. Or, you know, number of stars into which you can partition the tree, that's the domination number. It revertex and dominates that regarded star. And so maybe something similar happens for other tree-like graphs, like interval graphs. Don't know. Okay, so let's, so we've been talking about the situation where all guards can move. So now let's shift to the other extreme where one guard can move. And in the mobile sensors example, maybe that's okay. You're monitoring all your sites. Right, you're monitoring all your sites in your network. You have to go perform maintenance to the site, you drive your truck over there, but then nobody else has to drive the truck anymore. Yeah, maybe it costs you a few more sensors. So gamma I here is going to be the minimum number of guards I need if I'm allowed to move I guards per turn. So gamma 1, one guard moves per turn, gamma 2, maybe. Most studied ones are one guard and all guards. So somewhere in this area. So somewhere in this inequality chain, there's a smallest I, so that you use gamma all guards, but not all of them have to move to defend the graph. So in this example here, this is the one I was on the first slide, it turns out the eternal domination number is five. But you can convince yourself, I think it's four is really a three, you can convince yourself that maybe you can defend it by moving at most four guards per troll. Maybe you can think of it as only, most of the time it's only two. Think of it as a most of the time, it's only two. So, if it's this one here, maybe these guys come back. If it's this one here, maybe that one goes up there, that one comes back down there. There is a situation, I think, where you certainly have to move three. I wasn't successful in moving four, but I'm hedging my bets. Okay, so fine. So, let's call it a maneuver number. Minimum number of guards you have to move. Of guards, you have to move per turn to get the best coverage, use the smallest possible number of guards. And so, here's the idea. So, here's a pathline five, and you can see it's got eternal domination number three, and you can see here that certainly I can do moving at most two guards per turn. So, anything happens in here, I've got a guard, one guard in there, it can go back and forth. And here I would have a guard on the middle vertex and a guard on a leaf, and those two would have to move. Maybe a way one has to move, but anyway. Maybe only one house, but I mean, it's P3 small. But if you take this partition and you refine it a little bit, maybe this guard here is stationary, guard that's in here moves back and forth between those, guard that moves back and forth between those. So you can really, to get the coverage, you only have to move one guard at a time. Fine. So each time I refined this neocolonization, this partition, and maintained the same weight, the maneuver number got no bigger. So, Ethan, discovered this by computation. When you garage you have to move. So, remember the eternal domination number is the minimum weight of a partition into subtrees, right? Where the weight is either one if it's a click or internal, or the connected domination number plus one if it isn't. Okay, so it turns out that the minimum number of guards you need to move is the maximum. Move is the maximum diameter of a component, one of these neocolonizations, but it's a partition that you can't refine. Every time you refine the partition, the number goes down. And it turns out that once you can't refine it anymore, that's it. It's the biggest diameter of a component, because the way you defend the components is you put one on each internal vertex and you one on a leaf and they just move around. So the way the proof goes... The way the proof goes, just induction. Remember these two reductions? If you have this reduction here where you just chop off K2, well that's fine. You can just use induction. That's a part that's going to move one guard. If you remove a vertex with one internal neighbor and a bunch of leaf neighbors, and it's more than one part in the partition, you can use induction. And if you can't do that, so in other words, the partition has only one part, then T has a special structure. Part, then T has a special structure where it's got a bunch of internal vertices, each one of them is adjacent to a bunch of leaves, and you can just compute what the initiative number has to be. Transpires that for interval graphs, that same neocolonization idea works. And so it's possible you can compute the maneuver number for interval graphs in the same way, except that it does seem to depend on which. That it does seem to depend on which interval representation you choose. So you can have two different representations of the same interval graph, and they give you different numbers. So somehow it'll be involved in finding a canonical representation. Alright, so that's back. Let's go to Whitegardness for a second. So gamma 1 infinity. And so here's that dominating set of the 7th cycle. Of a seven cycle, and if I attack that vertex between those two, well, if this one moves, I don't have a dominating set and I'm dead, because nothing's grinding that vertex. If this one moves, I'm in a situation where I did that wrong. That wouldn't have moved. And so now I've got this guy here has two external private neighbors, and whichever one of them is attacked, the other one is unguarded in the next step. So I need at least four. At least four. And it turns out that four will do it because there's a clique comparing with size four, so everybody just corrects what's inside the click. It transpires that a lot of, in the one-grade moves model, a lot of graphs have the channel domination number equals the queue covering number. And so there's questions about, well, which graphs don't? So there was a search on. So there was a search on to find the smallest graphs that have gamma infinity less than theta. It turns out the smallest one overall has 10 vertices. There's two examples on 10 vertices and there's 54 examples on 11. And if you restrict on triangle-free graphs, there are 13 vertices and there are 13 examples. Circular graphs, it's also 13 vertices, two examples. Don't know about vertex transit graphs. Planar graphs, the conjecture is there aren't any, that the internal domain was always. That the internal domain was always equal to the quick covering number. What I can tell you is there aren't any with V less than or equal to 11 because virtual computed it all. All right, let's talk about in the Wenguard moves model a different kind of example. So the claim is that in the Wenguard moves model, the eternal domination number is The eternal domination number is somehow bounded above by this funny quadratic function, which is the independence number plus one choose two. Number comes from the proof. And the proof came from trying to prove a linear bound for a really, really long time and converging on this. And I had no reason in the world to believe that this is tight, but here we go. So, what we're going to do is I've got a graph, and I'm going to line up a bunch of independent sets. To line up a bunch of independent sets. So there is a maximum independent set if possible. There's one of size alpha minus one, or maybe it's the empty set if I can't find one, and so on down the line. So ideally alpha, alpha minus one, alpha minus two, all the way down to size one. I'm skipping one if I can't get one, but I want to choose those so that the overall size is maximized. And some of the cardinalities is maximized. Okay? So, there they are. And so, let's suppose that some vertex is attacked, say that red one up there. And what I want to do is defend from the independent set ij with the smallest possible j. Well, that red vertex could not be defended for any of the first sets, so it could be added to any one of them and get a bigger independent set. And get a bigger independent set. So that's going to mean that ij minus 1 couldn't have been empty. Because if there was a gap, I would have added the first one after the gap, because certainly I1's not empty. And I would have contradicted the maximality of that position. Okay, fine. And so if I add it to ij, then this becomes, I just thread, ij went back thread again. If I defend this from.set, then I can get Then I can get the same configuration back again. I get the same structure, which means that in the one guard moves model, the eternal domination number is at most the sum of the sizes of both sets, which is alpha plus one choose two. I would have bet a lot of money, I did bet a life, I bet a beer, bet it wasn't tight, and I lost. Because it is. Examples are Johnson graphs. They're really, really big graphs. They're really, really big graphs. But yeah, so sometimes that's how big it is. So I don't know how this came to be called the fundamental projection, but somehow I'm to blame. So I swear it wasn't anything. So the question is: can every guard that has an unoccupied neighbor always defend and attack? So, are some guards just static? Are they necessarily stuck and they'll never move? It turns out that if you have a guard with an unoccupied neighbor, it can eventually move after maybe some reconfiguration is done, but it may not be able to move right in the second. So, that conjecture is false. Here is an example. So there's a bunch of things that are going on in this example, but it transpires if that attack on U is defended by this guard on V, then you can't defend the rest of that G guard. So what's going on is, first of all, this is an eternal dominating set. So, okay, you can prove that from this set you could defend forever. Well, you better not move the guard on V right now. Okay, V. Okay, V is not a critical vertex. So if I took V out of there, then the eternal denomination number doesn't change. And you might notice the placement of the rest of these are on its neighbors. So it turns out if all of those conditions are satisfied, then if you add this little kind of tail structure there, that's a counterexample of conjecture. Tried to find somewhere you. I tried to find somewhere you didn't get a cover text, but good luck. Alright, so there's this gamma theta conjecture. And the conjecture says that if the one guard moves eternal domination number is equal to the domination number, then the domination number and the clique covering number coincide. So that's the only way it can happen is by placing guards on cliques and moving them around. Placing guards on clicks and moving them around. And so, what I can tell you is it's true for n less than or equal to 11. Computer search, it took about 85 CPU days. So it's a pretty big search. And you can just check. These are the ones you care about. These are the graphs where the eternal domination number is field one there. These equal domination number. And these are the numbers where the eternal domination, these are the ones where the eternal domination number. These ones where the eternal domination number equals the complete covering number, those numbers coincide, so there are no examples. Don't know if the conjecture is true. So in the one guard moves case, we have EXP completeness results. And you might wonder if there are games of exponential length. Again, don't know. Here's a little bit of data. Here's a little bit of data. So, graph A is that one. Circular graph, slightly different notation than before. It just this is 4 to 5, plus or minus 4, plus or minus 5, I guess. And if you do that, then the attacker will win. You haven't got quite enough guards. So you have five guards on there instead of six. It takes ten moves for the attacker to win. And if you have eight guards on this one instead of nine, it takes 30. Instead of 9, it takes 31. If you have 11 guards on this one, instead of 12, it takes 130. If you have 14 guards on this one, instead of 15, it takes 546. This is a family of circular graphs. We're back to symmetry again. And so it sure looks like if you have one less guard than you need to have, then probably going to be of exponential length. The problem is you've only got a small number of vertices, so if you're going to prove the strategy was exponential. So if you're going to prove the strategy was exponential, and at least in my way of thinking, I mean, every vertex is going to be revisited exponentially many times. And so you'd have to find a good way to describe it. I don't know. Maybe. Now, I swear, I made this slide before Joy said anything. If you don't ask any questions, you get to dinner sooner. If you ask questions, I'm going to punish you. Thank you. Thank you very much for the reason.