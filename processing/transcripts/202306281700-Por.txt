Okay, great. So I would like to thank all the organizers for this great workshop and inviting me. And at the same time, I also apologize that maybe my topic is not as tied to the title of the conference, but I hope you will still enjoy it. So I will talk about orientation preserving. About orientation-preserving map of the grid, and at the end, I would also like to introduce projective rigidity related to that. So, this is a joint work with Imre Baran and Pavel Walter. And I will start with some very basic definitions so everybody can enjoy it. So, what is the orientation of three points in the plane? And I will focus mainly on the plane. Focus mainly on the plane. It is possible to do it in higher dimensions, but today we will stick only to the plane. So, if I have three points in the plane and they can either be collinear or the orientation can be positive or negative, so here's if my points are labeled. So, one, two, and three, if I go from one, two, three clockwise, then it's positive. Then it's positive. If I go counterclockwise, then it's negative. And if my three points aren't aligned, then the orientation is zero. So what is an orientation preserving map of a finite set? So if I have a finite set in the plane, then and the function phi, which maps the points into some other points, so basically it moves the points, then it is an orientation preserving map. Then it is an orientation-preserving map if for every non-collinear triple UVW in A, the orientation of the triangle UVW is the same as that of the triangle, which is formed by the images of those points. And this is just a definition of what we mean about the grid. So we think about the integer grid, where we take all the points with two integer coordinates, where the coordinates are between either one or n or negative n and n. n or negative n and n. It's just a technical difference between the two grids, but just think about it as a grid. So let's start with some example. So here is a three by three grid. I label the points from one to nine. It really doesn't matter in which order you label them. And we can also see that this is not exactly the three by three grid, but we can think about the point seven being the origin and then all the points or the point one, one, and this is all in the first. Order point one, one, and this is all in the first quadrant, or the point five is in the origin, and then we have the other type of grid. Now, if I look at certain points, for example, one, four, and three, these three points are on a line, on a vertical line. But in my picture, they are not. It really doesn't matter what the orientation of these three points are because they are collinear in the original grid. But if I look at the points one, two, and six, for example. One, two, and six, for example, then the orientation has to be negative. So if I go from one to two, two to six, then so basically, if I draw this line from one to two, then six has to be on the other side. So I can't move six over the line. But I can move the six really far away. And so I didn't move any of the other points, but the six is, I just pulled this to the right. To the right, kind of a horizontal line. And again, if I check all the triangles, then all the orientations are still the same as they would be in an actual grid. So in fact, I can move this point really, really far away in this 3x3 grid. In the next picture, we see a 5x5 grid. And obviously, I can wiggle the points a little bit. Obviously, I can wiggle the points a little bit. That will not change much as long as I only perturb them slightly. But what happens if I move this point now far away? So if you pay attention, unfortunately, I can't see the top of my screen for some reason. I don't know why. But there's a question mark. Is this still the five by five grid? And if Grid, and if you pay attention, I hope you can find three points for which the orientation changed. In fact, these three points, like A, B, and C, and the original grid, the point C, was on the other side of the line AB. So the orientation, because A and B did not change. Now the orientation of the triangle ABC is obviously opposite. So this is not, you cannot move just this one. You cannot move just this one point this far. Yes. And I forgot to mention if you have any questions or remarks, just go ahead and let me know. Now, this is also a five by five grid. I might have messed this up maybe, but so maybe it's not, but it's meant to be. The idea is that I can apply a projective transformation. apply a projective transformation which is which keeps orientation not only does it keep orientation but it it keeps it's a collinarity so points on a line are still on a line unlike on my picture but so we see that we can we can change how how it looks like by still keeping the the orientation of every non-collinear triple So, what is the result? The result is the following: that if n is large enough, and I take an orientation-preserving map of that grid, n by n grid, then there exists a projective transformation such that for every point, the image of the composition of the projective transformation. Projective transformation and the map, the orientation preserving map is really close to the original point, so the identity map. So basically, the composition of the two maps is close to the identity map, and every point is as close as epsilon, where epsilon is big of one over n. And one can actually see that you can't really do better because if you take You can't really do better because if you take the grid, then you keep all the points at identity, so you don't move any of the points except one. Then you can move that point by one over sixn. The idea here is that if you have a triangle in the grid, then the area has to be at least one half. And so the longest side of the triangle can't be bigger than the square root of two times n. In this case, two times square root of two times. In this case, two times square root of two times n. So every point is at least this far away from any line that doesn't go through the point itself. But we're only allowed to move one point. You could move more points than you would have this distance. Sorry, I think this is true with. I mean, whatever. It's just. I mean, whatever. It's just one over n, some constant times one over n. So, what is the history of this? The question started as follows that we want to actually not find the projective transformation, but an affine transformation. So, we are given some big grid with an orientation-preserving map, and we want to find a small sub-grid, which actually will. find a small subgrid which actually looks very much like an affine uh sorry which looks very much like a like a small grid but an affine image of a small grid and neshatschler and walder used this to prove some ramsey type results and this is how they formulated the the crm and they also proved it but they didn't give It but they didn't give any specific bounds. So, in their problem, they were given some n and epsilon, and they wanted to find some large n such that for every orientation-preserving map of that big grid, there exists a smaller grid and then an affine transformation, which moves it really close. How close epsilon, the prescribed epsilon, to the identity. Silent to the identity. And they used the Ramsey-type arguments, so they did not obtain any bound on that. But Walter asked in 2016 whether is it possible to get some explicit bounds? And we obtained the following bound first, which is big of n to the four times epsilon to the negative two. times epsilon to the negative two and then later with Imre we improve the bound to n squared times epsilon to the negative one and this is also the best possible bound and the way we prove it is the is through our main result that I just said with the projective transformation and and here basically what you can think about is that why Can think about is that why is that you cannot find, you cannot make a better bound is because you can use a projective transformation which moves the actual grid in such a way that the line which goes to infinity is very, very close to one side or one vertex of the original grid. So basically you pull one side to basically infinity. They move really, really far away. They move really, really far away, and then your grid becomes skewed. And you don't have to do anything else. You can't, in this grid, you have to go really far from the line of infinity in order to find something which is affinely close to the actual grid. So I will try to talk about the proof a little bit. About the proof a little bit. Maybe I shouldn't, but whatever. So, the proof is actually a lot of calculations and it consists of some elementary steps that we either use once or multiple times. So, the very first step is that you separate some small subgrid. So, basically, you take, if you have an n by n grid and you look at the very middle of the grid. Grid, and you look at the very middle of the grid, which is a square, and you look at a square root of n by square root of n grid basically, then you can separate the horizontal and vertical lines and diagonal lines by parallel lines. The very simple idea is that if a point is really far away from a small subgrid in the larger grid, then all those like all those grid lines are separated by lines. Are separated by lines, yes. You can draw a line through a point and they are separated. This doesn't give you parallel, but if you do it from both sides, then you can get easily parallel lines. And once you have those parallel lines, you can assume that they are vertical, horizontal, and diagonal. Here, diagonal means plus one slope. So, and you can achieve that by just using an affine transformation. So, once we have that structure, then you show. That structure, then you show that if it looks like that, then you move those parallel lines into vertical, and horizontal and diagonal ones, then all the points actually have to be a constant close. So there is an affine transformation, basically a shift after that, that and some scaling, sorry, that moves all the points really close to the original position. So, so it's Position. So it's a constant close to the identity. So basically, at this point, we have a small subgrid, and we know about it that every point, the image of every point, is at most 100 distance, like a constant distance here. One is the unit distance between any two neighboring points. So it's some constant away from. So every point moves at most by a constant. And then the next step is to. And the next step is to go from here to showing that some sub-subgrid is close to the identity. And how close is one over K, where K is the size of the subgrid. So here I say sub-subgrid, which means that we can't show that the whole grid is closed. Well, I guess we could, but in this step, we drop away a few lines from the top and the bottom and the right and the left. So just remove on some like. Some like six lines from each side, so it's a slightly smaller grid, but it's almost the whole grid. And then in the last step, we just blow it up by a constant. So we showed that if they are closed, then we can extend this smaller grid into a larger one by adding constantly many lines. In this case, it's 40. So if we would add the 40 lines. It's 40. So we would add the 40 lines as, or the 40 to the size in the sense that we add 20 on the top, 20 on the bottom, and then also on the right and the left, we add 20 lines. So by repeating those steps, so the first two steps we only do once, it's like a starting step, and then we keep showing that it's closed, and then we blow it up, and then the bigger one is closed, and then eventually, if we keep doing these steps, we get that an arbitrarily large grid is closed. We get that an arbitrarily large grid is close. What you have to keep in mind is that the bound is actually getting better as we get larger, because this case, the size of the grid itself. So originally, we only have like one over square root of n, but as it gets bigger, it's the bound is getting better and better. And I also forgot to mention that in step three, there's a project. Three, there's a projective image. So we use a projective transformation. Obviously, without a projective transformation, this is simply not true. But that projective transformation changes very, very slightly, but it does change at every level. So you get a different map. And it could happen that at the very beginning, it's not even a valid projective transformation in the sense that some points could be outside of the line of infinity. Now, obviously. Now, obviously, the interesting part of the proof is this step three, where we go from a constant to very, very accurate errors. So I will try to explain how that works. The first step is that you move the corners where they belong. The idea is that if you have any four points in the plane and you want to move them into any other four points in the plane, To any other four points in the plane, in general position, sorry, then there's a projective transformation that does that. Obviously, this is also true independent of their type. So it could be a non-convex position into convex position. So there are only two two two different ones: the quadrilateral and the triangle with the point in it. But obviously, if they have the same orientation, the same type, then. Same type, then that projective transformation does preserve the orientation. So the very beginning, we take the four corners, like we have a grid, and I take the four corners of the grid. Not quite, but it doesn't matter. And I just transform them. Well, I know that they are a constant close, so I move them. Constant close, so I move them to where they should be, and then the rest of the points also move, but it won't be too bad, they are still a constant close to their actual images. And in the next step, we show that if you have a long line, then all the points on the line are very close to a line, to an actual line. To an actual line. So, what do I mean by long line? So, a long line is a line which contains a lot of points on the line that intersects the grid and a lot of points. Attila? Yes. So, first of all, we cannot see the second line because of the light. It's yellow on. That's great because I didn't really want you to see it. I didn't really want you to see it. Okay, okay, that's great. But then I also skipped it. I can read the line. The line says a lot of text. But then, but then that's kind of you say some statements which are not clear at that step at all. Somehow you say that if I map by vertices to for vertices to vertices, then all the previous one we map, it's constantly close. Yes. Cloves, yes, so the idea is that if you move, if think about it this way: if you take an affine transformation, right? No, you say that you need a polar transformation, not polar, projective, projective, projective, projective transformation, yeah. Projective transformation. So, so the idea is that if you move four points, right? So, okay, think about it this way. So, okay, think about it this way: take the unit square, and I claim that the projective transformation is well defined by the image of four points in general position. That's true. So, fix three of the vertices of the unit square. I can go back if you want me to. Maybe I can even go back to some picture here, let's say, like the three by three grid. So, if I fix the points one, seven, and nine, yes? Nine, yes, yeah, yeah, so I don't move them and I move the point three a little bit, let's say by epsilon. Yes, I could move it up, down, left, right, but I don't move it too much. Yes, the question is: how much do the other five points, so two, four, five, six, and eight, the non-corners, but any point in the Corners, but any point in the unit square, how much do they move? The question where is the ideal? Yeah, that the line in infinity. No, no, no. I define a projective transformation the following way. The image of one is one. The image of seven is seven. And the image of nine is nine. And the image of three is very close to three. Three is very close to three. So these are corners of a square, yes? And I claim that if I move 3 by epsilon, then all of these points move by a constant times epsilon at most. All the points in the unit square. Assuming epsilon is small. Obviously, epsilon. Obviously, epsilon, I should move three close to one because that's a big issue, but I only move it very, very by a very small value. In the way I throw it is that these points are really far away, right? So they are of distance k here. So this is a k by k grid. They are not exactly in the corner, but they are all 100 close to the corner. And 100 is much, much, much smaller than k. And 100 is much, much, much smaller than k. And then I just move them into the corners. So all the points inside will move, but they won't move too much. And again, this is part of the yellow line, which is technical stuff. How does the project? So, because if I fix one, seven, and nine, and I move three up, then eight moves right or left. I don't, I forgot. I'm sorry. If I think if I move three up by epsilon, then eight will move. epsilon then eight eight will move by one over uh one over four times epsilon to the left or to the right uh i'm sorry i don't know which direction now but these are the things that you can calculate is is is that better is is does that explain your question yeah i mean yeah just now the last thing sorry what i couldn't hear anything the last I couldn't hear anything. The last sentence explained everything for me, at least. Yeah, that's now I got because I mean, in general, it's not true, but you use that there almost greed, and then for the lines, we know what we are doing on the lines. That's the point. Thank you. Maybe that's why I was really worried about giving any proof. I'm sorry. So. So when I was talking about long lines, so when I think about a line, I mainly think about just a vertical or a horizontal line. That's the easiest lines to think about. These have a direction vector of one, zero or plus minus one, zero, or zero and plus minus one. And they contain as many points as you can, right? So n points or circuits. Right, so n points or k points, depending on the size of the grid. But we also consider some other lines. So the diagonal, like plus minus one, plus minus one, and then also plus minus two and plus minus one. So basically, these are the shortest vectors there are, non-zero vectors. And we only consider these lines. So we don't care about any of the other lines. And whenever I have points along. And whenever I have points along this line, so for example, any vertical line which is not on the side, then what we show is that the image of all the points are really close to the line. That doesn't mean that they are actually very close to the identity, because they can still move. So, for example, on a vertical line, they can move vertically, they could move up or down, they remain close to the line. I mean, they could be just collinear, and they still don't have to be very. They still don't have to be very close to the point. So then we use some idea to fix the midpoints so that midpoints of a segment are actually close to the midpoint of the actual segment. And then we show that some 17 by 17 subgrid is closed. And then we finish with some nice argument. And so I will detail these last two steps a little bit. So just try to. Two steps a little bit. So just try to give you a picture. So think about the four black points as the corners of the big square, which we did move into exact position. So this is an actual square, but in general, it could be just really close to a square. And then this point, the red point, is the midpoint. So we assume here this is even. So it's the. So, it's the intersection of these two diagonals. So, where's the image of this point? Well, because it's on this line, this diagonal, it has to be close to the diagonal through the images of these two points. And because it's on this diagonal, it has to be close to this diagonal as well. But those two diagonals are perpendicular, or close to perpendicular in general. So, this point has to be close to the intersection point of them. Close to the intersection point of them. So it's actually very close. So this is like a midpoint of a square. But okay, so once I know that this is close, what about the midpoint of the segments? Because the result said that the midpoint of the segment has to be closed. Okay, so I know that these five points are close, but, and I also know that this point is on this line, which is a horizontal line, so it's a long line. So I know that it has to be close. Know that it has to be close to the line, but it could be left or right. So then we show that it actually has to be in the middle. And again, this is a very long, a lot of calculation. I don't know, maybe two pages. And we basically use like this one by two domino here on the right. And we fill it in with points. We do some use some lemma like the previous result several times, and then you end up with a bunch of. And then you end up with a bunch of equations or close equations, and somehow you show that it's actually in the center. But all these approximations depend on the fact that these are large distances. So once we have those lines, so once we show that this is closed, now we have basically a three by three grid. And this is not a small three by three grid. This is like a big three by three grid where this distance is n over two. Is n over 2. So this distance, the total size of this is n, and then the distance between the black and the red points is n over 2. So we know that those have to be very accurate, almost in the position of the identity. But now we see, hey, that we can just repeat this idea for a smaller grid and fill it out. So now we have even more points which are very accurate. Obviously, we lose a little bit of accuracy because. A little bit of accuracy because every time we approximate, we know that hey, it's just close. So the next in the next step, it's close to the close one, so we lose accuracy. And this would be a five by five grid. And well, the next two steps you can imagine, so you go from five to nine. If you take the midpoints again and then to 17, so you have basically a 16, like a 16 long grade, like a 17 by. 16 long grid, like a 17 by 17 grid. And then at the very end, the nice argument to finish it off is to basically find the largest error. The largest error meaning that which point move the furthest away from the identity. We know it's at most 100, so it's because from the original assumption. And then once you find that point, we find the point on the boundary. Point, we find the point on the boundary which has almost as big error as the largest error. Boundary meaning on one of the four sides, so we can assume it's on the top side. And then the very simple idea is to find this big three by three square with a known accurate corner A. So it's one of those grid points of the 17 by 17 grid. And then the point P is the midpoint of this 3x3 grid. Of this three by three grid. So these are all, so A, B is the top side of your grid, and the midpoint of that is P. If you know that A is accurate and P has an error of E almost, then, well, P is basically the midpoint of A and B. So the error at B has to be larger than E. From this, it seems like it's. From this, it seems like it's twice as large, right? And if you just think about affine stuff, then it has to be twice as large. But there are some tricky things here. But you can prove that it's more. So you have to consider some projective transformations, and the error there, therefore, will change slightly. So you have to be careful. And again, this is just a technical thing. So. At this point, I would like to move on to the projective rigidity. I see I only have seven minutes left, so I will repeat the original, our main result, which says that the grid is really close. So if you have a large grid and you take an orientation-preserving map, then that map is basically very close to a projective image of the actual grid. So Grid. So, how can you formulate that differently? And if you ask me what is our main result, I could say that. Uh, I think my internet uh went out a little bit. Okay, yes, okay, we are listening to you say that my internet connection is unstable. Sorry, okay, keep going. So so so if you if you ask me what sorry hello okay. Okay, hello. Okay, we hear you. Let's wait until ten minutes or something. That's okay, right? We would need reverse and take it back. I was worried. Hurry up so. So, so I don't know where I dropped. So, this is the motivation for something that I call projective rigidity. And the idea is that if you ask me to formulate the result in a short way, I would say that the order type of the grid is rigid up to a projective transformation, specifically its rigidity. Its rigidity flexibility is big of one over n. Oh, it's not again. Can you still hear me? Yes. Yes, perfectly. Okay, so I'll just assume you can hear me. So now the question is: what does it mean, this rigidity, this flexibility that? Rigidity, this flexibility. The idea is that we want to assign a value to any order type which measures how rigid it is with respect to the projective transformations. And we want to do that in a meaningful way so that that number means something. And also that it correlates with this big O1 over n, that constant over n in the case of the n by n grid. So what we do is we let me start with what I think about an abstract order type. Abstract order type. I'm given some set of vertices V and some subset of all the three element subsets of V, so triples, and then a function on those triples, which say that the orientation of the triple is either plus one or minus one. You can allow zero, but we won't. We will assume that they are in general position. So, no orientation is zero. And then we say that the And then we say that an actual set of points in the plane represents this abstract order type if there is a function from v to s, such that for every triple in m, the orientation of the actual points, so the images of those points in s is correlates with the orientation of those three vertices. So once we have that, we want to assign to each abstract order type a number that measures how different two representations. That measures how different two representations of the same order type can be. And we also want that to be such that we don't distinguish representations which can be moved to each other with a projective transformation. So if I have a set and another representation, which is the projective image of that, then we want to say that, well, that's basically the Want to say that well, that's basically the same. So, the distance of two representations is just simply the maximum distance over all the images of one point. So, this way, two representations could be still very far away, even if they look exactly the same. If you just shift it, then it will be really far away. And I guess I should stop here. I should stop here, but uh, yeah, I'm sorry for that. You still have five minutes, okay? So, so we defined a relation between two sets in the following way that if A is a projective image of B, then we say that they are equivalent. And because the projective transformations form a group, this is actually an equivalence relation. Equivalence relation, which has equivalence classes. And the idea would be to measure the distances of the equivalence classes. Now, if you want to measure the distance of two classes, you could just take the shortest distance between two elements. But there's a problem because you could scale down every class, sorry, every set into just close to a point. And then the distances are really small. So, what you want to do is you want to use sets where the minimum distance between two points is at least one. points is at least one. So we define a norm for a set. We say that the norm of a set is simply the minimum distance of any two points. So you can't compress the set arbitrarily small. And now we define the distance between any two equivalence classes A and B as simply the shortest distance between any two elements of those two classes. So you can take any two elements of the class and And are there two which are really close? That's that's in fact the minimum here. And once we have that, we can simply define the projective rigidity, that quantity as the maximum distance of any two equivalence classes. Well, we can't say maximum. I write here supremum because there's a small issue, and the small issue is that it can happen that it's infinity. So that this. So, that this is actually could be arbitrarily large. And at the end, I just want to show you some examples, some trivial examples or small examples. So, for three and four, this is trivial because it's zero, because any three points can be moved into each other, and any four points can be moved into each other. So, there's only one equivalence class, so the distance is zero. And then the I'll skip these pictures, they are not nice anyway. They are not nice anyway. So, the next, the smallest non-trivial examples is with five points. And there are three order types with five points in general position, the pentagon, quadrilateral with a point inside, and the triangle with two points inside. And we do consider all possible triples, so all 10 triples for orientation. And it turns out that the first, in the first. It turns out that in the first two cases, we can show that the rigidity is bounded, so it cannot be arbitrarily large, the distance between two classes. But for the third one, it is actually infinity. And for, I hope you remember the three by three grid from the very beginning where we moved the point really far away. That actually shows that the three by for the three by three grid, this is infinitely large. And the same idea shows that for the four by four. Idea shows that for the four by four grid valve, you have to move them more than one point. So I didn't make a picture for that, but that's also infinitely large. And here we only considered the non-collinear triples. And then the last example is our main result. And it actually is not too difficult to show that these two are equivalent. So the rigidity of the n by n grid in this kind of definition is one over n. Is one over n. And that's actually the end of my talk. So thank you very much. And I'm sorry for dropping. Thank you, Adelaide. Any questions or comments? Or comments, yes. That that's also fine. Online? Well, yeah. Yes, here. Sorry? Wait, Tatila. Can you hear me? Yes. Yes, I can. Do you have examples of order types on an arbitrarily large number of points whose projective rigidity is unbounded? So if points are in convex position, so take the convex n-gon. So, take the convex n-gon. So, I said here that the convex pentagon is bounded. I do not know about the hexagon, but if it's a large number, if it's a large convex set, then it is unbounded. It's infinitely large. Okay. Thank you. And so, the problem is that with the convex set that you can take an arbitrary convex curve and take an arbitrary convex curve and so basically just take a circle right and then point put points really really close to each other along the circle on a small arc and then some points you put really really far and then you change it you put the points which are far really really close and the points which are close really really far and then you ask hey is there projective transformation which moves every point really close to where they should be and then They should be, and then you're like, no way, because how. And the problem is because you make the distances really small, therefore this constant one condition, right, will blow up these circles really, really large. So you can make them arbitrarily large. Yes? So this is not a proof, but to me it is. But I didn't write down any proof. Proof? I have probably a stupid question, but do we understand what our set of orientations are realizable? So I do not consider anything about that. I only consider actual point sets. I don't ask whether it's realizable or not. So I don't cons if you give me an abstract. Abstract, uh, I think that the problem is hard enough for the ones that are realizable. So basically, instead of giving an abstract order type, I start with an actual set of points and then make an order type out of those points and ask, hey, what is it? Yeah, so with the grid, for example, you started with the grid, that defines an order type. So I don't really, I do use this order type, but. I do use this order type, but I don't consider like an arbitrary order type. I actually consider a set of points. So I'm sorry to disappoint you. I'm not really good with those realizable questions. I don't have a good grasp on them. And I'm not going to. Sorry, just a quick one. So, do I understand correctly that, of course, when you take the grid, there are lots of collinear triples? Grid, there are lots of collinear triples, so you have lots of zeros in your I do not use them, it says only the non-collinear triples. Okay, okay, so the zero can become a zero, a one or a minus one. It's fine, right? Yes, it's because we don't use a zero. Okay, I left the zero in because there uh there is a result of uh I forgot the others, it's Sereni and someone who who shows some limit in like Some limit in like limit graphs, so you'd have some measure on a on the plane, and then you take random point sets according to that measure. And if they have some limit order types, you can define it. And they have some results, but they had a conjecture or it was about what so. What so I think that their measure has to be continuous and the support set has to be like some compact open set. So it can't be degenerate. So you cannot have the measure degenerate, but with adding zero, with allowing zero, you can do the following, that you take the three by three grid lines. So three vertical lines and three horizontal lines, which intersect at the nine points of the three by three grid. The nine points of the three by three grid, and you put some measure on that grid. And if it's non-degenerate in the one-dimensional sense, then this is still true. So, if I put if you put, so basically, I don't even need the whole grid, I just need the three by three grid with a lot of points on each line, dense, then for that picture, it is already rigid. So, so sorry for the long answer. But that's there, you do use zero. But that's there, you do use zero. Another question, maybe online. And if not, we think again. Thank you very much. Thank you.