This is math I really love to talk about, so I hope you will enjoy listening to it. And I'm often guilty of forgiving my friends belated birthdays, so a very belated birthday. Happy birthday to Bernard Claire. And thank you for all your contributions to the cluster algebra world. Okay, so I'm talking about sort of two projects, one's ongoing with these snake graphs from Orbifolds. I guess here. Here. So, what, of course, everyone here is familiar with cluster algebras, but I won't assume people are familiar with them from surfaces. So, I'll review that. It'll be, I know, review for some people, but I want to make sure we're all on the same page and also give background and snake graphs. And then I feel very lucky that the last talk also mentioned generalized cluster structures. So we'll review those again. And then we're going to think about them from orbit folds. So they'll be quite different from how the last talk. Be quite different from how the last talk or where they were used in the last talk, but the idea is the same. And then, so we'll talk about results for unpunctured orbifolds and then the progress we've made when we've introduced punctures. And I love getting questions, so please just interrupt me if you have any. So let's recall. So we can cook up a like initial seed for a cluster from a triangulation. We can just use this with quivers. We don't need to go all the way to do symmetrizable matrix. To go all the way to spew symmetrizable matrices. The idea is simple. If you have a triangulation, you get one vertex in your quiver for every arc in the triangulation. And then you incorporate arrows when the arcs border the same triangle. And you pick some convention about how you're going to orient the arrows. So I have a few examples of just the triangulation of a hexagon and then the corresponding quivers. You can see that the quivers are related by some mutations and the triangulation. And the triangulations are related by what we'll call flipping arcs. You take one arc out, and there's always a unique choice for a different arc you could put in so that it's still a triangulation. So by really nice work by Foamin Shapiro-Thurston, and again by later by Fomin Thurston, we have bijections. So every surface with marked points, so marked points are where the arcs will stop, start and stop, will give us a cluster algebra. Triangulations will correspond to the clusters. Correspond to the clusters. Arcs, and later we'll have punctures, so I'm including the possibility of tagged arcs. We'll give the cluster variables, and then, like we showed before, at the quivers, the flipping arcs is how we see mutation. In terms of the actual exchange relation, we can see that as like a Ptolemy relation. So here, the red and slightly too light of green are two arcs that would be related by a flip. And then if you like drew the quiver, this was the mutation you would. However, this was the mutation you would use. You'd have x times x prime is AC plus B D, and then some Y variables. So the way you get the Y variables on the surface is by placing a multi-lamination on the surface. So unlike the arcs, the laminations are curves, like a each lamination is a collection of curves, and they actually have to start and stop, or their endpoints aren't at marked points, they're anywhere else. Points, they're anywhere else. And you forbid a couple things that you have nice properties. And then the way you can make the y variables precise in the Ptolemy relation is by keeping track of shear coordinates. So if you have some flip, you want to look at laminations that go through opposite ends of the quadrilateral where the flip occurred. Yeah, so anyway, this is how you can import all the usual data about a cluster algebra onto the surface and vice versa. You could also set the boundary edge. You could also set the boundary edges to be frozen variables. Frozen variables have been very important today, but I'm not really going to include any of them. But you could do that. That's really quick. I'm just assuming most people are familiar, but any questions on any terms? Okay. So now we'll talk about snake graphs. Snake graphs are a nice thing to talk about because looking at them helps user Grishel Floyd-Williams develop two bases for cluster algorithms from a surface. For cluster algorithms from a surface. The idea basically is that given a triangulated surface, and then you have some other arc on the surface, this will give you like a direct way to compute what the cluster variable is coming from that arc. So like in theory, if you first learned about cluster algorithms from surfaces and you saw this, you have this red arc Z and you wanted to know what cluster variable that corresponds to, you'd have to like follow a flip sequence and do the mutations. But this is very nice. Do the mutations. But this is very nice. It's direct, it's comitorial, and it gives you a sense a lot faster like what this cluster variable will look like. And it also gives a proof of positivity for cluster algorithm surfaces. So when we see the formula, it's like there's no way a negative number could show up. Okay, so here's the idea of this snake graph. So the arc Z crosses two arcs of the triangulation, tau one, tau two. So I get one like square tile for each. So this is just. So, this is just, yeah, a graph with four vertices. I've labeled the edges so that it resembles the local quadrilateral around each arc. The dashed lines are labels. Those don't count as an edge in the graph. And I've drawn little pluses because right now these both, like the orientation matches the orientation on the surface. But what I'd like to do is put these together because the arc crosses both of them in a row. So then what we have to do. So, then what we have to do is flip the orientation on one tile. So, I'll just pick the flip it here on X3. You could choose the other way also. And if you had a lot of tiles, you would flip every other orientation. And then this is perfect. I can just glue them together on D. So this is the snake graph for the arc Z. So now we can see how we would get the expansion for the cluster variable from Z. So the denominator is simple. I just So the denominator is simple. I just have a term for every arc I cross slash every label in the graph. And then I'm going to look at all of the perfect matchings of this graph. So recall a perfect matching is a subset of the edge set so that every vertex in the graph is adjacent to exactly one. So this here is a perfect matching. And we're going to call this one a special minimal matching. Notice it uses only edges on the boundary of the graph. So I'm writing down the weights and I'm including. So, I'm writing down the weights and I'm including the boundary edges just so everything's super clear. And then, from here, since I used two edges on the tile X3, I could just replace them with the other two edges. So now I get a new perfect matching. And since I did that twist, I'm going to include the y variable y3. And after this twist, we also have opened up the possibility of twisting the tile x2. So I get another term, and now that one has y. And now that one has y2y3. So, in general, all the perfect matchings of a snake graph sit in a lattice. So, you can interpret the f polynomial as like a generating function of the lattice. Okay, and then if you had also gone through and directly computed what z should be, this is what you will get up to convention for where the y's should go. So, the theorem is just that this works in general. So, again, the setting, you have a cluster algebra from a surface, you pick. Have a cluster algebra from a surface, you pick some initial triangulation to write things with respect to, and then the expansion of your arc, the expansion of the cluster variable from an arc is given by these statistics on the graph divided by the things you cross. So I think it's very nice, and I love playing with generalizations of this. Any questions here? Okay, so we'll move to our setting, which we've already seen generalized cluster structures and algebras. So these were introduced by Chekhov and Shapiro in 2011. And again, the setup is the same. The generalization is that your exchange relations can be longer than binomial. So we can write these as, yeah, you have like a polynomial at every vertex that's giving you how you'll mutate. You'll mutate. And if the polynomial is just one plus u, that's like ordinary mutation. Yeah, so we've already seen these. Here's all, just so you don't feel cheated, here are all the formulas, but the point isn't really to digest them. But you can see like the X variables have this updated mutation. And also the B matrix and the Y variables have something. And we saw in the last talk how you could also do this on a quiver. Also, do this on a quiver. I didn't write anything for the Z's, so I'm implicitly implying the exchange polynomials are palindromic, but our exchange polynomials will be very short, and they will be palindromic. And I guess here's an example. So here we'd have mutation in spot one and two are like ordinary, and mutation in spot three has three terms now. And that middle code. Now. And that middle coefficient, the only one we're allowed to pick, is square root 2. So we see the first mutation would act like normal. And then the second mutation, you could see you'd have x1 squared, this x1 times x2 prime, and x2 prime squared. And we won't dwell on how the y variables mutate, but also at the level of the matrix. So right in the middle, you'd have like a three cycle. right in the middle you'd have like a three cycle which we usually expect when you mutate out a three cycle you get just a path but since it's generalized mutation you get a three cycle in the other direction which i suppose also was in bernhard's bernhard keller's talk this morning but i think it's for different reasons that we went from one three cycle to the other but at least we saw it twice okay so the sort of generalized cluster algorithms we'll be focusing on come from orbifolds as was in the title um the and And in the original paper defining these, they discussed these generalized cluster algebra structures from orbifolds. So we're just going to think about these as updating our surface model. We now have a surface with marked points, and then we have another set of special points, which we're going to call orbifold points. Each will come with an order, which is an integer at least two, but really today it's an integer at least three for us. The order tells you kind of how many times you can. The order tells you kind of how many times you can wind around the arc uniquely. So at the bottom, you would have something, this would be something of order four. So you could wind like once, twice. But if you wind three times, that'd be the same as winding once in the opposite direction. And if you wound four times, it'd be like not winding at all, like not interacting with it at all. And yeah, we'll use these X's to denote the orbifold points, whereas the solid circles are the ordinary mark points. Are the ordinary mark points? Okay, so when we have triangulations of orbifolds, we have these special arcs that will like go to the orbifold point. So these are the two ways you can see these pending arcs drawn in the literature. So what we're going to do is forbid this kind of arc and only use this kind of arc. And I like using this for when we have order at least three, because in a cover, At least three because in a cover the penning arc lifts to like some sort of polygon, so I like to draw it with an interior, but yeah, it's also just the convention I like. And in a triangulation, since it has to be a maximal set of arcs, you know that you'll have exactly one pending arc to every to every orbital point. Because of course, you couldn't draw a second pending arc to this because you'd see it across. And then as we've seen the formulas, every pending arc is enclosed in a bio. Every pending arc is enclosed in a bygon in a triangulation. And the other sides of the bigon could be standard or pending. Of course, it'd be very interesting if you had a triangle with all three arcs being a pending arc. Then you would just have a sphere with one marked point and three orbifold points. So usually you just can have like this sort of picture, this sort of picture. Okay, and then all of the motivation for how to think about these like arcs interacting on orbit folds. Like arcs interacting on orbifold. I like thinking about what happens in the cover, although the cover can be very complicated. But here's us, it's nice and simple when you just have something like this. So our orbifold is a disk. We have four marked points just on the boundary and one orbifold point in the interior. And I've drawn a triangulation on it. And then on the left, I have the cover. So it's right, a 16 gone. And it's like, in this triangulation has been variant. In this triangulation has been variant under an order for twist rotation. So, for examples of what other arcs would look like on here, for example, the flip of the pending arc. So, these have a sense of flip would be this. So, then in the cover, it would be like this set of arcs. And you might wonder about some sort of weirder arcs on the cover. Weirder arcs on the cover, such as trying to think what's a good color, maybe orange. So you might wonder, for example, you could draw this arc that doesn't cross anything, which is kind of funny since it's not triangulated. Now, we should think about all rotations with it. This one only has two rotations. So what that would correspond to in the orbifold would be an arc that does this. So you can see in the cover, it's not that the arc crosses itself, but different rotations cross. But different rotations cross each other. And then in the orbifold, we have a self-intersection. So that's often how it will go. Self-intersections on one side might be just different rotations crossing each other on the other. Yeah. And yeah, you can see like the order of your point, you just kind of have to tell someone on the side. We don't like write it on there. That's, I guess, just how it goes. Okay, so the reason why. Okay, so the reason why these orbifolds were discussed in this paper that was introducing these generalized exchange relations is that these pending arcs have a sort of have a generalized exchange relation when you flip them. So on the left is just to remind you how what I'll call standard arcs mutate or flip. And then, right, so here, so we drew sort of what the flip of a pending arc would be on the last page. And so in the cover, we had lots of crossings because we're We had lots of crossings because we're taking collections of arcs. So, if you did a, and it was also mentioned in the last talk how you could think about some of these generalized cluster mutations being like a sequence of ordinary ones. So, if you did that on the last page and then took what they all project to in the orbifold, you'd get this sort of exchange relation. So, right, this is like a three-term, yeah, a three-term generalized cluster mutation. Mutation. Let's see. And so we only get to pick one. So three terms, there's only one interesting coefficient. And that is determined by the order. It's given by this lambda p. So that's two cosine of pi over p. The first couple values of lambda p are nice. So I'll write them out for some reference. So like lambda three is one. I know we all know cosine, but maybe it's like I know we all know cosine, but maybe it is slow. I don't know. Lambda 4 is square root 2. Lambda 5 is the golden ratio. 6 is the last nice one. W square root 3. So really, it's just, these are like lengths of the shortest diagonals in a regular polygon, if the sides are length one. Oh, and lambda two would be zero. So things that are order two, the middle term disappears. So it's more like ordinary cluster algebra, but like, excuse me. Ordinary cluster algebra, but like skew symmetrizable. Yeah, so that's why I keep saying order at least three. But I think some of our pictures would be fine if the order was two, you would just have some stuff has weight zero. So it's like, why did you draw that if it has weight zero? Okay, so we discussed the exchange relations, and I'll just say you can also put laminations on an orbifold. The point is the way you calculate shear coordinates will change depending on whether you're looking at a standard or pending. Looking at a standard or pending arc. But it sort of changes, it's the thing you would think to cook up for these. So yeah, we showed that with these shear coordinate rules, the mutation of the y variables agrees with, yeah, like, yeah, flipping arcs and recomputing the shear coordinates would agree with the generalized cluster mutation of the y variables. The thing you would want to be true. Would want to be true. Okay. So now I'll start discussing the snake graphs and marbifolds. So for the first case, if you just have an arc that like crosses through a pending arc, but doesn't do any extra winding, so it has no self-intersections locally here. So in the cover, what that would mean is, of course, the order could be big, so this could be very. Big, so this could be very much not triangulated, but it just would go through two adjacent edges of that polygon. That's the lift of the pending arc. So we make something that just looks like an ordinary snake graph for something that crosses two tiles. And then this edge that I've labeled lambda p times rho, this doesn't actually exist unless p is three. But we sort of think like the arc just Of think like the arc just sees it here. So, yeah, this could be a very large polygon, but it just would see the arc that would go here would have this length if we assume it's like a regular pegon. So, we include that here. And then if you look at all the, so let's look at all the perfect matchings for this just piece of a snake graph. So, we'd have the denominator would be here. It's the same shape as the last one, so we expect through. The same shape as the last one, so we expect three terms. So, for example, picking a convention where, again, this would be the minimal one, we get this term. This term. And then this would be y rho, sorry. X beta squared x rho. Okay, so we have two tiles. Okay, so we have two tiles. We got x row squared on the bottom, but actually you can always cancel them. There. So then this is exactly like the exchange rule, which is good because, for example, if your arc was just this, this would be the whole snake graph. But also, this could just be a piece in a much larger snake graph if your arc did more interesting things. Okay. So this sort of whole, this is sort of all you need. Well, this is sort of all you need to think about if you're just thinking about arcs that don't have any self-intersections so that they don't do the winding. But I think the winding is really interesting. Oh, yeah. Sorry. First, we have just here like what we call the puzzle pieces. So if you have an arc that in general navigates with the pending arc, it could either go in and out of the same sides of our different sides of the bygone or the same sides. So those have two different pieces. So yeah, you could take these puzzle pieces and combine. Take these puzzle pieces and combine it with knowledge just for the surface, um, surface cluster snake graphs, and then you with these you can write down the snake graph for any ordinary arc, so no self-intersections on an orbifold. So, yeah, that covers it. But as I was saying, what I think is really interesting is when they do wind around the orbifold point, because then it's like in the cover, it goes through something not triangulated, which is more challenging because we lose our. Challenging because we lose our intuition about triangulations and such. And to think about these, we really thought about sort of a similar notion to snake graphs called T-paths. It gives us, it's this very similar comitorial way to cook up expansions, but you're thinking about kind of walking around in the triangulated surface. And we realized we really need to acknowledge that if something's walking along in here, it could take like this arc or this arc. But of course, arc or this arc. But of course, these aren't in the triangulation and they also, these aren't in, yeah, because it's not triangulated. And also they're like not compatible. But yeah, the right thing to do is consider that they both could be there at some point. But again, what really saves the formulas, so it'd be very hard if this was a general dissection. But again, it's like a regular, it's a regular polygon because it's all lifts of the same arc. So that's what's going to allow. So, that's what's going to allow us to deal with this. So, I'll use some notation on the next slide, so I just want to define it first. So, we'll be using these a normalized family of Chebyshev polynomials of the second kind. So, they're normalized in that the ordinary, you take normal Chebyshev polynomials of the second kind and evaluate at x over 2. And these sort of polynomials show up a lot in these claustrophysiom surfaces because. These claustrophys from surfaces, because they resemble what happens when you have a skein relation, you have something like doing a lot of laps, a lot of loops, and you're resolving like a self-intersection. So then let a k diagonal be something that skips k vertices in a polygon. Maybe this lemma is like much more classical, but I saw it written down in a paper by Lang. So if you have a regular polygon and your sides have length S, a cadence. length s a k diagonal will have length u k times lambda p times s so that's why they show up in the picture i'm about to show so here's the tile we'll use for this kind of crossing i guess it's just for this part of the crossing we haven't included the crossing beta um so it's yeah so basically like this arc and this arc have the same This arc and this arc have the same length, so those are being represented here. Like they'd both be like L diagonals for some L. Yep. In a more general picture, here it's L is one. Then this arc would be represented by this one, like L minus, this is an L minus one diagonal in general. And then here would be represented here. So we're just incorporating all the possibilities in one tile. And this maybe looks really good. Maybe it looks really different, but right, if you squish it, you can squish it either way, and then it just looks like a two-tile snake graph with one extra edge. It's sort of like you have two tiles that both go up and to the right at the same time. And I wanted to write out all the matchings of this just since it looks a little different. So, we would again have this has four matchings. So, we'd again have x rho squared at first on the bottom because we have two of the diagonals. And basically, once you're And basically, once you pick one of the edges with some Chebyshev polynomial, the rest would be forced. So, for example, we could have u x alpha squared x rho. And then we'll have two with an alpha and beta. We'd have, so you could pick ul plus one, and you get an alpha and beta, or you could pick a ul minus one, pick get alpha and beta. Alpha and beta. Oh, and there should be a. You can also define how the y variables should work on here. It looks a little funnier, but the perfect matchings for these will still sit in a lattice. So y row ul plus one. Okay, and then there's the um y rho squared u l x beta squared x squared. So again we start out with x row squared on the bottom but it can cancel out of everything. Oh I meant to write it here but then we cancel it anyway. Okay. I'm going to copy it onto the next page just for a quick observation. Quick observation. Okay. So if L was zero or p minus two, one of these middle terms would be zero. So the Chebyshev polynomials evaluated at lambda p are like periodic, which makes sense because if you have like a p gone and you're trying to skip p plus one vertices, you did something like weird, like you made a contractible kink or something. Yeah, so at special values, one of these terms is zero and you get back to the ordinary tile. So it'd be like one of these edges being weight zero, and then you could squish it to normal to tile. Okay. And then I'll just say there's one more case to think about if you want to be really systematic, which is where something winds around an orbifold point before it crosses anything in the triangulation. Then you just get one tile. Then you just get one tile still with some uls. And what's funny is: so, again, you get a cancel in X row, so you actually don't have any contribution in the denominator from crossing the arc row, which is kind of funny. That's kind of like the example we drew in the cover of the simple 16 gone with the square in the middle. Those arcs that went through the middle in the cover wouldn't have any denominator. But I guess since they're generalized. But I guess since they're generalized, weird things can happen. Okay, so the point is with those puzzle pieces, so we haven't mentioned punctures yet. This is the unpunctured wrap-up. The point is, in an unpunctured orbifold, we have the same kind of snake wrap expansion theorem, which, yeah, it all goes through. And the corollary is positivity. Now, I should admit that the positivity was already known for these generalized cluster algebras, but I don't know, I still like that. But I don't know, I still like that we could do it in a commentarial way. So, before I transition to punctures, any questions or anything? Quite similar from the closed curve. Oh, yeah, yeah. Thanks for reminding me. Yeah. So, oh, yeah. So, so we talked about ordinary arcs and generalized arcs, but you can do the same thing for closed curves. What happens with a closed curve is you don't quite, you make a snake. You don't quite make a snake graph, you sort of assume it's not closed, and then you glue the extreme edges. And it's the exact same thing for a surface. So these are called band graphs. We won't, I didn't include any slides about band graphs, but we'll see something else where we're gluing edges at the end of the talk since we'll need it for tag darks. But yeah, and that goes through the same too. Thank you. Yeah. Yeah, good question. We, yeah, we haven't. I mean, that's something we want to work on, and I'm going to kind of mention it at the end. Though I realized that if, yeah, I realized we could have started working on it here in the unpunctured case. Yeah. But it should be right, because again, the snake graphs of the surface help prove things about bases for cluster algorithms and surfaces. So it's a good question. Question. Oh, right. Ah, yeah. So, this, oh, Emily's asking what the question was. The question was: if anything's known about bases. I mean, yeah, I'd say we haven't like used this to prove things about bases. I think there are results about bases from generalized cluster algebras, but we have not. But right, so this is a good point. So, we also showed that in this unpunctured case, the snake graph map respects skein relations. Respect skein relations. And we were able to really follow the this really slick proof for how this works for the surface case, where you can take you take an arc on a surface and you can you write down these sequence of two by two matrices based on like little pieces of the arc. And you can do the same thing for snake graphs. And then you were able to show skein relations by just matrix identities. So it's really slick and it was able to work here too. It was able to work here too. What I mean by that is if you have two arcs that cross and you write down the resolution, you show that applying the snake graph, like you can think about it as a map from an arc to like a Laurent polynomial. You show that map respects that. And that's important to show that for the generalized arcs, you've made the right expansion. Because for a generalized arc, it's not like you can follow a flip sequence to get to it. You need to use skein relations to show it's like the right thing. Okay. Great. Great. Cool. Okay. So, yeah. What we've been looking at then, so that was all for unpunctured, just because punctures have their own difficulties. So we didn't want to introduce two difficulties at once with the orbifold points, but we've been looking at it now. So, just a review for what the how the surface model will change when you have punctures. The idea is if you had just a triangular The idea is if you had just a triangulation of a surface with a puncture, so by puncture we mean marked point on the interior, you could reach like a configuration like this. This is called a self-folded triangle, but the point is there's no clear way to take out that arc labeled R and replace it with something else. But of course, for a cluster algebra, you should always be able to mutate anywhere at any time. So the fix for these is to forbid an arc that looks like L. So forbid loops that enclose one puncture. That enclose one puncture, but allow yourself to include decorations of arcs at punctures, so mark points in the interior. So you'd instead want to draw something like this. So we draw a little notch here. So these are, we consider these two distinct arcs and they're compatible. And the point is, now you could mutate. So if this is R, you would write this as like R P for its tags at P. Well, I'm sorry, now P means. That p. I'm sorry, now p means a puncture. Maybe I should do q because we were using p a lot for order. Okay, so now you could flip r by doing this. So you could take a different rate, the radius from the other end of the bygone, and include the notch. And if you're curious, you could also flip R that's tagged. Tagged like that. And then if you flip both of them, you'll get the triangulation with that. Okay, so those are that's at least the commentorial way to talk about tag darks, and you can make things precise with the lambda lengths and such if you want to dig into it. So, of course, when you introduce these notchings, So, of course, when you introduce these notchings, you update your rules a little bit about what sort of things are compatible. So, in the untagged case, like triangulation is just okay, the arcs can't cross. But here, if you want to have like unique flips and you don't want too much, you include a few more rules. So, two tagged arcs are compatible. Yeah, first, they still shouldn't cross. It could be so, this the second bullets about the situation we just drew. So, you're allowed to have two. Allowed to have two that would look the same if you ignore the notching and you change the notch at one at one endpoint, but you couldn't, for example, have this or this. And then if the underlying arcs aren't the same, all the notchings have to agree at the puncture. So the pictures we saw a few slides ago were kind of basically everything that can happen. So, oh, yeah, and then finally, the well, it's more than slogan makes it sound imprecise. Again, you can make this a precise statement about lambda lengths, but for intuition also, you could just think loop is equal to the product of the plane times the tagged. And this is useful because if you want to talk about snake graphs, you want to keep these loops, and you draw like a snake graph with this, and then you have an expansion. And then you have an expansion with that, and then you use a specialization to get the correct expansion with the type darks. So you use this kind of specialization for the x variables, and there's something else for the y variables. Okay. So musico Schuffler-Williams in the surface case to give expansions for arcs that are either singly tagged or tagged at one endpoint or tagged at both endpoints. That's what those symbols mean. They introduced these ideas of. mean. They introduced these ideas of gamma symmetric and gamma compatible matchings. So the idea for gamma symmetric would be if you had an arc that was going to a puncture and tagged at that puncture, think about the snake graph for the arc that goes to the puncture around it and back. So the ends of the snake graph would be symmetric because you've gone to the puncture and back, then you have something in the middle. And you want to only think about matchings that are symmetric on the ends. Gamma compatible means kind of do that two times. And then recently And then recently, John Wilson gave a different formulation for these through loop graphs. That's the vantage point we'll look at today. And we'll define what a loop graph is with this example. So here I have a triangulated surface with a puncture. And if my when my orange arc is untagged, this is the snake graph. It's much like the example before. Now, if it is tagged at this puncture, that means it's incompatible with tau 3, tau 4, tau 5. With tau3, tau4, tau5, because they're at the same, they have the same puncture, the same endpoint, but different taggings. So, what I will, what you will do is think about take follow the arc and then make a hook around the puncture. So you cross all arcs in the triangulation at the puncture, which I like to call those spokes. So if I say spoke, that's what I mean. Tau 3, tau 4, tau 5 are spokes. Okay, so if I do it in that direction, here's the graph I would draw. Draw but then this isn't quite right. We're going to glue two edges. So we would glue this edge and this edge from x3 where right x3 was the first spoke we crossed. That's how we know to glue to pick that label. We don't glue all edges with the label three, like this one's still the same. But you can maybe picture what this looks like. Now, it's of course it shouldn't matter which way you hook and it doesn't. So the other if you hook the other way, The other, if you hook the other way, so you first cross five, you get this graph, and then you glue these edges with five. So, if you think about stretching the edges, you could see that these would be the same graph, but I like drawing them like this and then just writing down the gluing. But yeah, maybe a better artist could just draw it. So, it's matchings of this graph that will give the expansion of this tag dark. This tag dark. If you were doubly tagged, you would do this at both ends. And when our snake graph has some sort of gluing, we'll call them good matchings. So that's also the language you use for the closed curves where you glue like the extreme ends. So let me draw. So here's just some examples of what are, well, maybe it's more illustrative, maybe, to do what's a bad example. So this one's bad. This one's bad. There's only one matching that is a perfect matching of the underlying graph that isn't okay when you glue, and that's given here. So notice this is fine if you don't glue, but then when you glue those blue edges, you have a conflict, but you can't remove anything to make an okay matching. I hope that's, is it dark enough? Okay, cool. I got enough knots. Okay, but so here's some other examples. Some other examples that would be okay. So, here, right when I glue, it's all good. And you can use the glued edge, so you suppose you could just draw it in both like that. So, I think this has, well, yeah, I don't remember the number of matchings, this has. But then the usual statistics about y variables and stuff goes through just fine, too. Okay, any questions on what the loop graphs are? Okay, so I'll end with just some examples. So, on the top here, I'll say for ordinary tag darks, we have all the pieces to extend the expansion formula. I don't want to write it as a theorem because we haven't sat down and written them all together, but just checking a lot of it's a lot of checking technical things, but there's no difficulties because basically the interaction with a puncture and the interaction with a orbifold point are always a bit separate. The orbifold point are always a bit separated. So you can just do use the use both ideas and put them together. So I'll have some examples here. Maybe I should, they're a little small, so maybe I'll zoom in on each. So you could have a pending arc that's based at a self-folded triangle, and then it's all the same. So you'll notice here I labeled, as I mentioned, I labeled things with like the L and the R, but then you would use a specialization to give the correct expansion in terms of the tag triangulation. A tag triangulation. And maybe this one's a little more interesting. Here you have a pending arc that has both ends tagged. So, as I mentioned, here we see something with a doubly tagged. We glue two different ends. But again, it all works the same. So these are kind of as close as they could be, the puncture and the overflow point, but it's fine. Okay. Now, again, what I think is more fun, but also much more challenging is when they do the winding. Challenging is when they do the winding. And that is where we get something sort of funny. So here, yeah, I guess we'll save the talk in a second, but here I'm coming in, I'm winding a bit, and I'm ending inside a pending arc, and I'm tagged. So in the cover, I'm going through something not triangulated, and then I'm tagged. So we have to combine the idea of these hooks with the idea of how we go through. With the idea of how we go through these untriangulated parts. So, this drawing is assuming this sort of hook. So, if you think about this, okay, first I go through here, I'm like an ordinary arc, so I get this hexagon piece. And then I'm going to cross two, sorry, yeah, dark is two, light is one, and then this again. And then the funny piece is that in order to get the right expansion here, we had to. Mentioned here, we had to also assume we were crossing this like extra arc we've added in, which would have length u2 times x, u2 evaluated at lambda p times x3, which is pretty funny. And then we can glue here and here. So you might worry because now we have something that's labeled with something that's not like exactly a cluster variable. It's like the multiple of one, which also maybe means it's like in the denominator. means it's like in the denominator, but you can show with various Chevyshev identities that you'll cancel out the U2 that you get in the denominator. This tile is also special in that when we flip it, we're not going to include a Y variable for that. But we realized that we could have gone back to the unpunctured case and used more of these tiles with the funny labels. And we actually could replace the hexagons with like three ordinary looking tiles, but one of them looks like Looking tiles, but one of them looks like this. So I guess we're still deciding on the aesthetics of which we prefer, but I think it's interesting. But they're necessary here. You can't avoid them with this. This is kind of the worst it can get. But on top, of course, to prove that this sort of thing will work in general, we'd like to show some sort of skein relations. But even for the surface case, skein relations involving punctures are very hard. I think Ralph is smiling. And at the end of this paper on And at the end of this paper on bases for cluster algebras, they mention how, like, this is the very slick thing that works for scan relations in the unpunctured, it's really not clear how to make it nice. But they do mention that one could look at a lot of cases to make it work. So we have been looking at a lot of cases. We are hoping for something slick, but we also couldn't find something. But we've been able to streamline them a bit. So here's like one example. This is both an example and this has been a useful tool for further skein relations. So for my new, for my notation, if I have So, for my notation, if I have an arc, x, I guess we've already been using this, x gamma is the element of the cluster algebra from the surface associated to that arc. I'm saying element because if it's generalized, it's not a variable. And I'll let chi denote like applying the snake graph map to that arc. So the game is showing with these, when you decompose things, you get the same y variable. The y variable is the tricky thing to show here. So here's again, one example of something like a scan relation we'd want to show. Like a scan relation we'd want to show. So, in the picture down here, this arc and this arc have incompatible taggings at the puncture. So, even though they don't, they again don't look like they cross, but since they're incompatible, there should be some relation between them. And the relation would be given by following one, picking a direction to go around the puncture, and then following the other back. So, we're able, so in this example, for example, we can show that in each in each kind of a In each kind of relation, we get the same y variable. So, for the x's, you're doing something geometric. We're looking at Foam and Thurston and really calculating the tropical lambda lengths. And here, we're doing some comatorial about perfect matchings and like dividing them into sets and stuff. But this is also a useful proposition to prove other things because you can replace, this means you could take this arc and replace it with two arcs with. And replace it with two arcs with one less tagging and then like use results that are known for untagged arcs. Yeah, anyway, so that's something we're looking at. It'd be very nice to if we were able to get through all the cases. You can see on the top that I've been working on cases. Anyway, so that's those are all the things I wanted to talk about and a few of the references. And yeah, thank you very much for listening. Thank you very much for the very interesting talk. Are there any questions from the virtual participants, maybe first? It doesn't seem to be the case, so maybe questions from the audience. Question from Bill Dennis. So, I guess I'm sort of curious, either from your work or more generally, about foundations, even in the unpunctured orifold case. Do these snake draft calculus give you sort of an idea of how to put fuses in these? So, I know in the manifold case, you can just sort of count your height of your lattice. Oh, um, it should be fine. I mean, the lattices look pretty similar, I think. So, yeah, I haven't looked at it. I think so. Yeah, I haven't looked at it, but I think that if it was something that was relying on a lattice of perfect matchings, it should go through just fine because the lattices are very, I guess I haven't looked for the punctured case, but the unpunctured, the snake graphs you get, the lattices are very pretty, I think, still. So it should be just fine. But yeah, I haven't thought about it. Are there any more questions? It doesn't seem to be okay, so let's thank again.