So our speaker next up is Craig Kaplan. He's an associate professor at the University of Waterloo in the School of Computer Science. And he will be presenting today's a talk titled Squirrel Series and Online Collaborative Geometric Animation. All right. Thank you. Thanks very much for having me here, although it's a little bit bittersweet. It's a little bit bittersweet, as I said yesterday, because Banff is such a wonderful place. So here's my, under the assumption you can see my slides, here's a photo from me at the top of, I think, Sulphur Mountain in Bridges. We hiked up there, Bridges 2005. And, you know, you can see I look sad. The specific reason I'm sad in this photograph is because I had left to go to Bridges that year. I think that was my first time in Banff, and I had gone to Bridges, leaving behind my wife with our. Leaving behind my wife with our two-year-old daughter and two-month-old son, and so I was under very strict orders not to have fun. So, I, in all the photos from that trip, I'm always frowning. All right, the other thing I need to say before I get into the meet here is I'll show a lot of animations in this talk, and animation is very much unreliable in this medium, giving a talk via Zoom. So, if things start to look bad. Start to look bad on your screen. I'm giving you a side door where you can come in and see the animations directly in your web browser, probably more reliably. And I'm going to put the URL in the chat window as well. Don't use that to look ahead, especially if you're going to look ahead and then decide you don't need to stick around for the rest of the talk. But yeah, it at least gives you a way you can check what slide number I'm on and then go look at the animations directly if you want to. Directly, if you want to. All right, so let's get into the subject of the talk here. I'm fascinated by mathematical animated GIFs, which are short animation loops that explore mathematical themes, which lies at the intersection of the kind of popularity of animated GIFs more generally on the internet for communicating memes and other ideas. Other ideas. And of course, the beauty of mathematics, which I assume in this audience doesn't require much justification. And I've always been inspired by artists who work in this medium. Maybe one of the most well-known, one of my favorite is Dave White, who goes by bees and bombs online and who has a physics background, but does this a lot very actively. I've done some work in this area myself, trying to create interesting animations. Trying to create interesting animations. For example, in Bridges 2019, I presented this paper, Animated Isahedral Tilings, which is basically a keyframe animation system such as you might find at Pixar to make animated characters, but applied in a very limited way to the domain of isahedral tilings. And nevertheless, it gives you some really interesting opportunities to create animated loops. Animated loops. So that's sort of, I'm building up to the present day. That's as of 2019. And then last fall, I decided to continue my exploration of mathematical animated loops, partly as a way to give myself a creative project during what was going to be a stressful teaching term. And, you know, just to blow off steam. And to some extent, you know, I was teaching intro programming. Was teaching intro programming, so I wanted to have something tangible I could show students to say, Here are some interesting things you can do in just a few lines of code to try to inspire them to develop their coding skills. And I started posting these on Twitter using the hashtag SwirlySquare Sunday, because I would post them on Sundays. And they were always squares. They would always start and end with the checkerboard. That's why squares. And most of them were swirly, although not exclusively. Swirly, although not exclusively. And by the way, you're going to start to see plenty of times in this talk. The next slide over, everything will rotate the other way because you've been staring at this animation for a while already. I'll tell you in advance, that is known as the waterfall illusion, or it's often known as the waterfall illusion. So I would make these short animated loops. I would find ways to close the loop back onto itself in an interesting way and always try to keep things relative. And always try to keep things relatively abstract. I did all my coding using processing, which is a pretty standard lightweight coding tool. I'll say a little bit more about it later. Here are just a couple of additional examples. So I'm very much into trying to explore paradoxical ideas like this kind of rotation on the left here that then gives you kind of three by three groups of light-colored squares so you can scale out and get back to your starting point. Back to your starting point. And I cheated a little by showing the folding in perspective on the right, but that's okay. Anyway, after posting enough of these, an online friend, Daniel Piker, who some of you may know from his incredible physics simulations that he posts on Twitter, he basically sent me a message saying, this is a lot of fun. It would be interesting to have a collaborative version of this. Maybe there could be a fun, open collaboration. Everyone who wants to submit some PA. Everyone who wants to submit some PNG frames at some resolution, starting and ending on a checkerboard, and will compile them into one big animated loop. Awesome. Great idea. Very natural thing to run with. And I immediately, you know, I thanked him, picked up the idea and announced it. I think later the same day, I had everything ready to go. So this is an idea that resonates very strongly with me. Resonates very strongly with me, something I enjoy thinking about. And so I have to give you some background for how you might come to the idea of this kind of collaborative artwork. Maybe the most famous example of this sort of thing is Exquisite Corpse or Cadavre Exquis, which was this exercise that was initiated by the surrealists in the early 20th century. And you might have played this before, right? You draw a little drawing that ends with some lines and you fold over the picture. With some lines, and you fold over the paper, revealing just the little tips of the lines, and ask the next person to continue those lines and make another strip of the drawing. And when you're done, you unfold it, and you usually get something pretty surreal. The example on the right, which I encourage you to go watch at some point, is sort of the same idea, but along the z-axis in depth instead of along the spatial dimension of a piece of paper. So, this is an animation loop that zooms. This is an animation loop that zooms in infinitely towards the center of the canvas. And as it does, the artists have provided like regions of depth, intervals of depth that become revealed as you walk further and further into the image until eventually you come back to the starting point. And a collaboration of artists has produced a few of these. Here are some other fun collaborations on the internet that have arisen spontaneously. Internet that have arisen spontaneously over the years. I really like this one. Somebody posted on Reddit this photo of their mother holding a painting that she had done, saying, my mother doesn't think anybody's going to like this painting. What do you think? And a bunch of people praised it. And one person went so far as to paint the photograph of the person holding the painting. And well, you can guess what happens next, right? I mean, thus began. Thus began a brief flare-up of this fun collaborative project of people painting chains of other people holding up their paintings. And in fact, others have cataloged the family tree of paintings that results. This is not a blockchain. This is a tree. You know, you can sort of branch off anywhere by painting somebody else's painting. So it was a little bit harder to control. But we should have a blockchain version of this any day now, inevitably. Now, inevitably. All right. I've even incorporated these sorts of ideas into my teaching when I can. It's always fun to have students write little pieces of code that can then be stitched together in interesting ways. So I've tried this in one of my intro programming courses, specifically intro programming for art students, for digital art students. So the example on the left, I gave them a set of sprites from a platformer game, and every student had to make a screen. Had to make a screen, a level, and then I just ran them all together one after the other. Whoops. And sorry, I'm going to go back. And in the example on the right, everybody had to make a horizontal strip of geometry that, when laid end-to-end vertically, acted as a kind of marble run. That was fun too, using a physics simulation library. All right. So, thus began Swirl's series, which I announced in no World Series, which I announced in November. And the idea was everybody, anybody who wanted to could submit at most 180 animation frames as images at a resolution of 512 by 512. Your animation sequence had to start and end with an 8x8 checkerboard with a white square at the lower right corner of your checkerboard. Because, of course, there are two checkerboards with white and black squares that are 8x8. So you have to be a little bit careful. Eight, so you have to be a little bit careful, and uh, there were about 20 days to complete the assignment. And you know, I put this out into the world, not knowing what would happen. And I had hoped, well, maybe I'll get lucky and I'll get 10 or 20 submissions. And if I'm got 180 frames at 50 frames a second, that's a few seconds of animation. Put everybody's animations together, maybe we'll get about a minute of animation. That'd be something fun to. Animation. That'd be something fun to share. And it's a nice thing to do when you're locked in your house and you need a creative outlet. Well, so then, you know, it exploded. And instead of getting about 20 submissions, I received 115 submissions from 81 people. So I didn't do anything to restrict people from submitting multiple times. Although one or two people just, you know, tried, you know, once they got up to five or six submissions, like, maybe that's enough and, you know, make room for other people. Enough and make room for other people. So, thank you to all the artists who contributed to this, some of whom are here at the conference. So, I'm happy to include them in this list. Once you have this much raw data, it starts to become possible to say some interesting statistical things about what people did. So, the most obvious thing you might want to know, for example, is how long was everybody's animation loop? Well, I can say that on average, That on average, the average number of frames in a submission was 158. The median was 180, which just tells you most people maxed out the requirements. And who can blame you, right? You want to get your full 3.5 seconds of fame. I mean, why wouldn't you? And of course, there were issues in people's submissions. Not everybody submitted a perfect blob of files on the first try. Lob of files on the first try. The file names didn't always conform to my expectations, which made it a little harder for me to stitch everybody's images together. And of course, a small but non-zero fraction of the submissions had a black square in the bottom right corner of the animation. And, you know, there are, of course, several remedies to that. You could rotate the whole animation 90 degrees. You could flip all the colors, black and white. You just reverse value. Colors black and white, you just reverse values, but that may violate the artistic intent of the submission. And so, I always found it better to go back to the artist and ask them to resubmit, which usually was not that big a problem. And yeah, so you know, there was a problem here, though, for me, which is, you know, let's say it was a non-trivial amount of work to just keep track of all this information, right? Every submission I received. Submission: I received a zip file. I had to put it in a folder somewhere. I had to put some information in a spreadsheet just to keep track of who was submitting. And so, if it took five to 10 minutes per submission, we're already talking about at least 10 hours of work, right? Five minutes times 115 submissions. So, that's a little bit dangerous. I was asking for trouble in retrospect, and I'll say just a little bit more about that at the end. More about that at the end. It's not a research problem, but it is a kind of software engineering question of how to run something like this without drowning in data. So, okay, a couple of other statistical measurements that were kind of interesting. I just looked at everybody's first frame. And if you just looked at the file sizes of the first frame, you would think, well, this is an easy to understand file format. To understand file format, a PNG file. Everybody is submitting the same identical image, ideally, a 500 and 500 by 512 pixel black and white 8x8 checkerboard. So you'd expect that the sizes of the files would be fairly uniform, but they vary by about a factor of 4,000, as it turns out. Lucas Garon had a first frame that was a scant 214 bytes. Thank you for. 214 bytes. Thank you for saving my hard drive. And then Chris Anousa's first frame, the identical image, consumed almost 800K. And, you know, it's an interesting fact, right? It tells you something about the wide variability of the way that the PNG file format can encode these things. And it also, I mean, I don't know the PNG file format as well as I would like. It leaves me with a kind of code golf question, which is, what is the small What is the smallest possible PNG file that represents this image? I'd like to figure out how to compute that at some point, just as an interesting exercise. Here's one more fun image. Each colored line represents the file size of each person's submission over time. So, the individual sizes of that person's frames as you walk along their loop. Walk along their loop, normalized to the average size for that person to take into account this kind of variation. And it's almost, I would claim, a kind of information theoretic measure of the complexity of people's animations. And perhaps not surprisingly, because the start and end frames are always simple checkerboards, we see that there's a general tendency here for the starts and the ends of people's graphs to be relatively low information. Low information, and then to get more complicated in the middle. There's also a very obvious dip right in the middle of all of these graphs, or the middle of a lot of these graphs, because a lot of people's animations will go out, do something complicated, get to a simple halfway point, and then either like do another step of the same thing to get back to the start of their animation, or maybe just undo what they did. So we can sort of see that in aggregate. Sort of see that in aggregate in these graphs, which is kind of a cool way to look at all of this animation data at once. All right. Oh, yeah. So, but I can't see what this next slide is, so I have to, you know, I have to do this little thing. All right. So, let me just say a little bit about how you might go about drawing these things. That's not the purpose of this talk, but I just wanted to say what I saw by looking at people's submissions. And I'm very happy to expand on any of these later if you're interested. Of these later, if you're interested. What I used in all of my animations for Swirly Square Sunday was processing, the original Java version of processing. It's just something I'm used to. It's right there in my fingers, so it's easy to work with. It's easy to export animated GIFs when you're done. So it was my tool of choice. And here's some simple code that will draw that 8x8 checkerboard in processing. And, you know, you don't have to be a lead hacks or a hardcore code. Lee tax or a hardcore coder to see the general outline here. I have a two-dimensional loop that loops over all the rows in the checkerboard and all the columns in each row. And the key piece of the puzzle is this parity test that just checks if x plus y is odd, we're going to draw a square, otherwise we leave it out. So we're going to draw the black squares and let the background of the frame be white. So when we're done, we get a checkerboard. So, when we're done, we get a checkerboard. It's a relatively simple way to draw a checkerboard. But it's certainly not the only way. This is the way that a programmer likes to think about drawing a checkerboard. I have 32 black squares I need to draw on a white background. Let me just iterate and draw each of them in turn. But if you're more of a mathematical bent instead of a computational bent, well, maybe you'd like to think about the checkerboard as being a graph, as being a set, a subset of the plane. Set, a subset of the plane with a particular property. So a few people submitted loops that they made using tools like Desmos or Geogebra. And you can see that it's actually not too hard to get a checkerboard in a tool like Desmos. And I have a little animation here. Even something like just saying, is sine x less than sine y is already a checkerboard. Now it's 45 degrees rotated. So we'll just put the whole thing through. We lost your audio and video.  Okay, one moment while we try and recover our speaker.    So it looks like Craig is having general tech issues. We can't reach him via Slack. Hopefully he'll be back with us soon before the cats get him. So I'm on the phone with Kraken, he's trying to reconnect. Reconnect. Excellent. While Craig's reconnecting, would anyone who contributed animations like to say a little bit about what they did? You know, we're hearing about processing, we're hearing about GeoGebra, what other tools that people deploy. Oh, Frank, it looks like you're muted. Frank, you're muted. Hey, what'd I miss? Of course, right? Like, how could it not happen? Yes, welcome back. We were worried that the cats would get you. Right, they will eventually, although it's not close to dinner. They will eventually, although it's not close to dinner time. So, the inevitable Zoom question: the opposite of you are muted. What was the last thing you heard? You just constructed this checkerboard using sign. Oh, I did the Desmos. Okay, so 517. And how much time should I take? I asked the chair. You don't have to. Oh, there's a break after this. I'll try to be quick. Yeah, yeah, yeah. So you've got to the top. Yeah, yeah, yeah. So you've got to the top of the hour, I guess, but there is a break after. So feel free to take a bit more time if you'd like. Okay, I will try not to drone on too long, nevertheless. Thank you. Let me see if this is still doing its thing. And if I cut out again, I will tether to my phone, which is ridiculous, but okay. You should be able to see that. Okay, so I talked about Desmos. This is a fun way that you can. Way that you can have access to these swirly checkerboards without necessarily treating it as a computer science problem. At the other end, at the other extreme, we have a tool like ShaderToy. This is, I should say, shader toy.com. This is a website that anybody can create an account on. ShaderToy lets you write programs that run on your computer's graphics card. And these programs can be viewed. They're called fragment shaders. Can be viewed, they're called fragment shaders. These programs are essentially samplers that take x and y as input and produce colors. And so, it's actually, in terms of the model you're working with, it's a lot like Desmos. You're writing a function of x and y. But because the program is running directly on your computer's graphics card, you can do some pretty spectacular things very efficiently. And, you know, a lot of what you'll see, for example, from Henry, both in stuff he's done before and Henry, both in stuff he's done before and in the talk he'll give tomorrow, relies on this kind of programming. In this, I'm not going to show the demo, but in this program, fragCoard is basically the xy coordinates of the position in the plane for which you'd like to produce a color. And your job is to write to the variable frag color. And in this case, what we do is essentially scale so that we have a relatively large checks in our checkerboard by dividing by 100. And then again, we do the parity test. And again, we do the parity test, and we just let one be white and zero be black. It's basically that simple. And of course, people did any number of additional things that I don't know about. In retrospect, or if I were doing this as a formal research project, I would probably have some sort of survey where I asked people what software they used, or even asked them to submit the source code to me, because that itself could be somewhat interesting. Certainly, some people wrote custom software from scratch. I'm sure some people used. From scratch. I'm sure some people used 3D modeling and animation software, as you'll see in a second. So, what I'd like to do is just show you some examples now based on my own reflection on the body of work that I received, attempting to roughly sort it into categories. Because, you know, with 115 submissions, you can start to say, How did people approach this problem? What visual devices or mathematical techniques did they use? That's kind of Techniques did they use? That's kind of interesting. Before you start, could you move your mouse pointer? Move my mouse pointer. Yeah, I didn't. I wasn't sure if you'd be able to see it, but okay. So there were, and hopefully these animations are coming through nice and clear. There were lots of very nice, just abstract 2D designs. This is a little, I definitely wanted to include Frank's, although I would say Frank's is a little bit more specific. It was one of the only ones to specifically use Fourier analysis, as far as I know. Analysis, as far as I know. But it is, I'll classify it as 2D and abstract for my purposes. A lot of people experimented with XOR coloring, which is to say, you know, you can basically lay down any family of curves in the plane in general position, and then, you know, from any point in the plane, draw a line out to infinity and count how many curves you intersect and use that and use the parity of that. And use that, and use the parity of that number to decide whether you want to color a pixel black or white. And so, this gives you a lot of ideas for swirling some curves around and letting the regions they define come out implicitly from that. This works very well in a system like ShaderToy if you can give algebraic functions for all of those curves. There were lots of uses of conformal geometry. That's a very natural idea. That's a very natural idea, passing the checkerboard through some conformal transformation and then back again, I guess. This is one of the only submissions by a non-human. There was a submission from Tilingbot. That was fun. They were very similar, of course, was a number of experiments that used hyperbolic geometry. So this is pretty tricky, right? So, this is pretty tricky, right? To like move from a Euclidean checkerboard to a non-Euclidean hyperbolic plane. There's also, I should say, the opposite. Dave Swart had a submission that moved from the Euclidean checkerboard to a sphere, then turned the sphere around and came back to a plane. There was more than a few fractals as well. So, it's natural to want to try to do something with the Sierpinski gasket. It's a little hard. With the Sierpinski gasket. It's a little hard to figure out how to get that to be colored cleanly, but this person came up with one. And here are some Conway-Thurston fractals, some nice recent work by Henry Sahl et al., where you just find a point in your fractal rendering that looks like a checkerboard and work from there. A few people experimented with physics simulation of different forms. Both lots of fun. So, I mean, I Lots of fun. So, I mean, I played with both of these myself. Like, once you have 32 black squares on the screen, it's natural to say, okay, now fall down. It's a little less clear what to do after that, other than just pull them back up, I guess. And there's fluid simulation on the left. There were some that I would classify as being a little bit more like motion graphics, like the mathematical structure of the checkerboard isn't so much important as creating a compelling visual effect. And you know, the one on the left has. And you know, the one on the left has kind of this glitchy sliding effect coupled with what's sometimes called the bloom filter, some extra glow on the white edges of objects. The one on the right is by a person, Daniel just got his PhD in computer graphics, but he's also a graffiti artist. So you can see the ghost of graffiti writing in his result there. More than a couple of people experimented with chess. That's a natural idea, too. That's a natural idea, too. So we have a nice infinite zoom on the right from bees and bombs where the rook is colored with the checkerboard. And on the left, well, we have a complete little story, I guess. I'd like to know what tools were used to make that, because, of course, that's great. I love that the table flip turns into the next generation of chessboard. It's good. There are a few uses of 3D geometry, of course. The one on the right is all done via a kind of radio. Is all done via a kind of ray tracing algorithm in ShaderToy. So there's an implicit surface, and rays are intersected with the surface, and then we color it in black or white. And the one on the left, Nan Ma, that's a very special lattice of tetrahedra, which from very particular angles resolves itself into a square grid, into a checkerboard. And a couple of people did very realistic 3D models. Well, at least. 3D models, well, at least plausible 3D models, even if they are flying squid monsters, and realistic 2D imagery. An homage to John Conway, of course. I did, of course, want to sew everything together. And if you follow the link, ichedral.ca/slash gear, those links are on that page. So you don't need to copy these down right now. To copy these down right now. Of course, I made one long video that has all of the individual loops together in random order. That's up on YouTube. But also, you know, with 115 animations, it became a really desirable to try to remix them live. So with a little bit of help, because I'm not really a JavaScript expert, I created a web page that remixes them as you watch. So it continuously randomizes the order. Randomizes the order of the videos and plays them back seamlessly one after the other, fetching them all from the web server as needed. It's kind of a neat project. That at least is in place if I should ever do this again. A couple of quick lessons or things I learned from doing this. First of all, I think this would be a fun thing to play with in a classroom, whether it's a high school or university computer science course or a math course. This and other ideas like it, where This and other ideas like it, where everybody gets to contribute a small piece to a larger sequence, I think is a lot of fun. But as I say at the bottom, regardless of whether we do this on the internet or in a classroom, it's probably best to give everybody the same starting and ending point rather than having some larger grand design and giving each person one chunk out of it. Because, of course, there's always the risk that somebody doesn't finish their chunk and then you're left with a gap. And then you're left with a gap with no way to close, right? Whereas, if everybody has the same start and end point, of course, you can remix them in any order and it's safe. If I were to do this again with the fear of receiving another 115 submissions, I definitely need more automation in processing submissions. It can't, or you know, a co-op student. It can't be the manual labor for each submission of filing it away and verifying it myself. Verifying it myself. And even having done so, I can see that some of the animations don't conform to my requirements, strictly speaking. And yeah, if I do this again online, maybe just help people self-select by making it harder. Instead of a checkerboard, I'm just define something that's a little bit harder to draw. Maybe that'll scare some people away. As much as I hate to say it, but yeah. I mean, I would love to do this again, but I have to be a little bit careful about it. Little bit careful about it. All right, so that's about it. Here's one more that is very not mathematical, but that I'll include just for fun process video. And thanks for your time. I'm happy to answer any questions. Wow. Thank you. Thank you very much for sharing that. Yeah, feel free. Questions. The animations are super beautiful. Yeah, there's a lot. People had all kinds of great ideas. I should get the chat up. I didn't say, but the collaborative work, of course, was you would have seen this in the slide. It was called Swirled Series, just to finish that off. So, Craig, was this a requirement, or it just happened this way? No one's No one sort of inserted color in the be in the story? I did require grayscale. That's true. You didn't have to be strictly black and white, but I didn't want any full color. I think I just wanted to keep it a little bit simpler in this go-round. Which is interesting. Which is interesting because if you look at a lot of the stuff that Bees and Bombs has been posting recently, a lot of it involves kind of color fringing, having the different color channels be slightly out of sync with each other. You get these interesting kind of analog video-looking effects. Well, there's a question from Joseph. Greg, this is very subjective, but which could you select out? Could you select out the most humorous or most surprising one? Well, I tried to include a couple of the ones that I thought stuck out. So the, I don't remember all the names. The chess example. Yeah, that was nice. Which turned into like a, so that's William Knowles Kellett, the one that turned into a table flip, I thought was fun and surprising. The one that. The one that pulled back from the checkerboard to reveal like a Cthulhu-like tentacled monster, I thought was pretty unusual. That was by Tom Lechner, who I intersected with at a math art conference like 20 years ago and haven't seen in person since, but I do know him to have that kind of sense of humor. So it was a good fit. There are others that stick out. I mean, I'd have to, I'd commend you to watch the whole sequence and take note of the crazy ones yourself. The one that just morphed into Conway was quite surprising. There was another one that the checkerboard spun out of the way to show a Space Invaders game hiding behind it. I'm not sure what the takeaway was from that, but it was visually fun. Oh, so I typed this in the chat, but the graph you showed with the relative sizes, one of them spiked at the end at the right-hand end point. What was going on with that one? Do you know which one that was? Well, I don't even know which one, but you're right. There was, I mean, I can. there there was i mean i can yeah let's let's let's have a look right there's there's a faint blue curve that just goes way up at the end and doesn't look to be out of proportion anywhere else i honestly don't know i should look into that um it could just be once again the encoding and you know if i want if i were to do this in a scientifically rigorous way i would absolutely Rigorous way, I would absolutely convert all these images into a standardized uncompressed format, just like raw pixel data, like a PPM file, and then re-encode them all using the same encoder to get a more consistent cross-measurement of information content. There is some nice research in computer science on using encoded size, using compression as an estimate. Using compression as an estimate of Komogrov complexity, basically, as an estimate of information content. And I think I have enough data that it would be amenable to that kind of analysis. But I would first need to normalize all the data and not trust the encoding I was given. But I will. I should look at what's causing that giant spike. Yeah. Yeah, this very much feels kind of like a kind of demo scene stuff or low complexity art, right? If you maybe were doing this class, you might have everyone do it in processing. Have everyone do it in processing so you actually have the source code. But this kind of normalized size measure is also nice. Well, that's much closer to complexity because you are literally measuring the length of the program that generates the picture, the animation. Yeah. Sorry about it. Great, so where about