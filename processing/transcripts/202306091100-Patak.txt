So good morning, everyone. It's a great pleasure to be here and thanks to the organizers for inviting me. And today I will speak about shellability and about the fact that deciding whether a simply shell ball is shellable is NP hard. So first, First, you know, let me say how my talk will be structured, Phil. First, I will say some introduction: what shellability is, why is it important, and then I will present some of the proofs. So everyone probably knows what a simplic complex is. For me, a simplish complex is simply a bunch of simplices which are glued together without overlaps in some Euclidean space. Yeah? The simplices of this simplish complex are called is faces, the maximal dimensional faces are called facets, and a simplicity complex is pure if all of its facets have the same dimension. So, a pure simplicity complex is, for example, a bunch of together glued tetrahedra. And now, if we have a simplicity complex, it models some geometric or some topological space. Some topological space. And you know, if we build this model by gluing together this tetrahedra, we want to know whether we can do it in some sense in a nice way. And if we glue together one tetrahedra to another, then it's good if we glue it along a triangle. Because if we glue along a single vertex, right, then it's not very stable and such stuff like that. So, for that, we have the notion of shellability. Have the notion of shellability, which says that a complex is shallable if we can glue it together by adding the simplices in increasing way, such that each new face is glued only along, for example, triangles, if we are doing it with tetrahedra. Or if we are gluing together triangles, we can glue it only along edges. So, here, for example, we have So, here, for example, we have a simplish complex composed of triangles which is shallow. For example, I can go the first, second, third, fourth, five, six, seven, eight triangle, right? But then I cannot glue this red triangle to this because it's only glued along two vertices. And I want to glue triangles along edges. And similarly, I cannot add. And similarly, I cannot add this triangle because although it's glued here along an edge, it's also connected via a single vertex at that spot. So that's not allowed. And why do we care about shellability? Well, if we have a shellable complex, we may record how many of these triangles or tetrahedra were glued along I d minus one dimension faces. And this is some non-negative number, and it can Non-negative number, and it can be shown that this number does not depend on the order in which I glue the things. It's completely determined by the simplest complex. Moreover, it's completely determined by the number of its faces. And so, why do we care about shallow? Well, shallability, you know, by gluing these things together, we control the topology at each of The topology at each of the steps. And so, shallability is an inductive procedure which allows us to keep the topology and has found applications throughout mathematics. For example, in polytop theory, the shallability is used to prove Denzumer relations, which basically say that this Hi equals H D minus one for simply show polytops d-dimensional. It is used in the proof of the upper bound theorem, which basically boils down to the fact that these HI's are upper bounded by the H numbers of cyclic polytopes. It also is used in the proof of lower bound theorem, which again boils down to the fact that this H number for these simplicial polytops are non-negative. So, and there are other So, and there are other applications. We have shellings of PL manifolds. You know why we can control the topology via shellings. But shellability has also found applications in the theory of partially ordered sets, where it can be used to somehow enumerate some properties of these partially ordered sets. And it has also fun applications in algebra. For example, we have some work of shellings of monoids and monoid. Kellings of monoids and monoid orders. So that's this, right? But as you may guess, not every simplish or complex. I can see the presentation in the Zoom session. I have local problems. Okay, I'm neutral. Okay, what could work in the article? No, I'm so from the but Yeah, we go. Well, I can't see. For the uh for the desktop desktop desktop, your your your Your share without paper. I can share either in the screen from the screen to Okay. No. I don't know how to. I'm sharing the screen, but it's not going through. So in the projector, okay. It is not correctly formed this here. Here, okay. I mean, but that also doesn't work. Okay. Well, I mean, promise you'll make a 25-minute video later. Yeah. I can do the video later, but Zoom is not okay. I mean that will probably turn the that's it's non yeah I can you are preparing the video in any way rather. The video in any way, right? Yeah, so maybe I can just send you a video later of the talk. If you, I mean, okay, I will do the video. Continue. Yeah, like on Saturday. So it's strange that it doesn't work for the Zoom. Okay, now I need to go or drive. Now I need to go all the way. Okay, so okay, so somehow the zoom doesn't work, but okay, so now we know that not every simplicity complex is shallow. Here we have an example. Obviously, you cannot build this model of two triangles by gluing the triangles along edges, right? So, but But moreover, there are also some simple complexes which are homeomorphic to balls and which cannot be shelled. So not every ball is shellable. And moreover, there are even non-shellable spheres. So really, the shellable complexes form only a small fraction of all of them. And this raises the question how hard it is to decide. Hard it is to decide whether a given simplicity complex is shallable. Well, this question is obviously in NP, because we can just try all the possible orders of the facets. And so maybe it is NP, right? And that's essentially the question which was asked in the 70s by Danaraj and Klee. And what do we know? Well, first of all, these guys were mostly interested in shell building. Guys were mostly interested in the shallability of balls and spheres. And that was because they related this problem somehow to the recognition of balls and spheres. To the question whether a given simplicity complex is a ball or a sphere. Well, and what they showed is that if I have a two-dimensional pseudo-manifold, then I can test in linear time whether that simplification complex is shallow or not. Simplicity complex is shallow or not. And here by pseudo-manifold, I mean a bunch of triangles where every edge is in exactly two. Well. And several years ago, we together with Xavier, Zuska, Martin, and Ule proved that for general simplicity complexes, starting from dimension two, deciding whether they are shallable is an MP-complete problem. And each dimension starts. In each dimension, starting from two onwards. And the proof was later set in slightly different language by Andreas Santamaria Galvis and Ras Wudrov, and they simplified some of our gadgets. But the general question for balls still remained open. And moreover, the gadgets that were used Gadgets that were used, both of these proofs work by reduction from the three sub, more or less. And the gadgets that are used to model, for example, variables are highly non-embeddable in the Euclidean space of dimension three. Sometimes we even need dimension five to embed these gadgets. So the natural question is whether shellability is anything complete even for complexes that live in a Euclidean space of dimensions. Euclidean space of dimension C. And our main result is that this is indeed so. Deciding whether a given triangulation of a D-dimensional ball starting from dimension three onwards is NP-complete. And well, moreover, you know, this also implies that deciding whether a given pseudo-manifold of dimension D. Of dimension D, is shallable, is NP complete, and stuff like that. Moreover, we can show that even deciding whether a given two-dimensional simplicity complex, which is embedded in three-dimensional Euclidean space, is shallow, that's an incomplete question. And lastly, our proof technique showed that deciding whether a given three-dimensional complex embedded in R3 is collapsible, that is also an NP-complete question. And this result. These results have the great advantage that, you know, because everything happens in R3, they can be visualized, unlike the previous proofs which lived in R5, right? So let an ask. But first, let me say what a collapsible complex is. So if I have a simplicity complex, then I say that a phase is free for a collapse if it is content. Collapse if it is contained in a unique facet which is not equal to that phase. And if I have such a phase, I can push it inside that phase, and that won't change the topology. So I can effective remove that phase and all phases that are between this tau and this sigma. So for example, if I have this complex consisting of four triangles, I locate this edge. I locate this edge. This is free, it's contained in a single triangle. So I can remove this that preserves the homotopy type, right? Then I find another free edge, remove it. It again preserves the homotopy type. Now I have another free edge here. I have this vertex is also contained in a unique facet, right, in the triangle. So I can remove that vertex together with the whole. Vertex together with the whole triangle and all the edges. And then you see, I obtain a single point. And in this case, I say that my complex is collapsible. Okay, and collapsibility is a combinatorial equivalent of contractibility. A topological space is contractible, it can be continuously deformed to a point. But deciding whether a topological space or even a simplicity complex is contractible, that's Complex is contractible, that's unfortunately an undecidable question. So, but you know, collapsibility you can test, at least by checking all possible orders of the facet, of the phases. So, and again, it was a question whether a collapsibility can be decided efficiently. And Martin showed several years ago that this is not the case. Collapsibility. The case. Collapsibility of general three-dimensional complexes is again NP-complete. And so let us now tell me how our proof proceeds. So what we wanted was to simplify the original construction of NP completeness for collapsibility and replace the Replace the non-planar gadgets with planar ones or with something which can be at least embedded in R3. And moreover, you know, in this construction, the gadgets were glued in some way, which were also, which also was non-planar. So we also needed to find something how to make these gluings of these gadgets together somehow embedded into the tree space. And for that, we found. And for that, we found a nice variant of 3SAT, which is called planar rectilinear monotone 3SAT. It's a bunch of adjectives. And this variant of 3SAT was shown to be also NP-complete by Deb Hosrave in 2010. So what is this planar rectilinear monotone 3-sat about? Well, in this planar rectilinear monotone 3-sat, we have our variable. We have our variables ordered along the x-axis in some plane. And each clause has either all literals positive or all literals negative. Moreover, the clauses are drawn as rectangular boxes where the positive clauses are above the x-axis and the negative clauses are below. Negative clauses are below the x-axis. And we connect each variable to the corresponding clause. And if we can do that, that's an instance of planar rectilinear monotone resat, and deciding whether such formula, whether for such formula, we can satisfy all of the clauses simultaneously by assigning true or false to each of the variables. That is an P-complete problem. So it's So, it's really a strong planar variant of sub. And we will use it for our time. So, let me now show how did we simplify the variable gadget. So, before the variable gadget was something which was not embedded into the three space, now we simplified it to basically join of the boundary of a triangle with Triangle with an edge. And for better imagination, we just take three tetrahedra and glue them together like that. So that is our variable gadget. I guess it cannot get much simpler than that, right? Instead of something which wasn't even embedded in R4, we have just. In R4, we have just that, and we also need to say how this gadget is glued to other gadgets. And here, I just highlighted the edges, the black ones, where I glue the gadget along these edges. And also, I glue some other gadgets to that blue edges. There is another one on the opposite side. And how this, yeah, so you can look. So, you can look again. This is basically how my gidget looks like. So, that's our variable. And how do we, what can we say? Well, as long as there is something glued along these black edges, we can collapse this thing so that we make one of the blue edges free, but not the other one. So, if I start. So, if I start collapsing, I can decide whether I make this blue edge or the other one. And how this can be blue. So, here I start by collapsing the green triangle, the green tetrahedra, then or the gray, then the green, the green triangle, the pink tetrahedra, and the pink triangle. And then I'm left with stuff like this. Yeah? So. Yeah, so that's our variable gadget. And then I need something how to connect these gadgets together. And for that, we use the gadget which was used previously. And that's a modified Binghaus with one free edge. So how this binghaus is constructed? Yeah, you start with this. So just so you have the idea how it looks inside. So I have a So, I have a gadget which looks like that. And of course, I need to triangulate it somehow. And what's important is that if I triangulate it, I do not triangulate that edge, but otherwise, I do not care much. And how is this gadget glued to other ones? Well, as follows. Here I highlighted the edges which are interactions with the other gadgets. And what can I say? There are maybe some gadgets glued along these green lines, or there may even be more parallel or these green circles here. But as soon as I manage, okay, here, these are edges which are glued to something, and as soon as I manage to make this violet edge free, which means, you know, I delete the triangles which are connected. I delete the triangles which are connected to it from other gadgets. Then, and if I manage to get rid of all these things which are glued to the green circles, then I may collapse this thing so that what is left is just the black thing. And moreover, these red edges are made free. And how does this look? Okay, so I will end up with something. So I will end up with something like that, and we can just look at the animation how this collapse looks as soon as the violet edge is missing. So again, these are triangles, but you can see that's one of the possible collapses down to this one. And now, what was more important is to make some close gadget. Closed gadget, which would allow us, you know, if one of the three edges is made free, we want to collapse it again and make the output free. So for the variable gadget, we start with something, we call the variable gadget a turbine. And it consists of several blades. Variable blade is a house which looks like that. Yeah, so it is some kind of house where you can go here and up, but there's a roof, or you can go. There's a roof, or you can go to the back here, but there's a wall behind. And what we do next, we glue three of these blades together to form a turbine and add some triangle in between, some courtyard, so that you can go out to the green and play soccer there or something. And well, so again, you can see me just. Again, you can see we just simply take these three blades and glue them together in such a way. And how do we connect it to other gadgets? Well, here you can see, here I have one edge, second edge, three edge. These are the only three edges. So in order to collapse this gadget, I need to make one of the violet things three. And then I can collapse this to the black edges and make. The black edges and make this red edge here free. So, and the collapse, in the end, I will left with something like this. And again, we can look how the collapses look like. Nothing too much. But just to convince you that that's legit and one can really do that. So here we see. Here we see. Now, as soon as one Now, as soon as one of the edges is phi, I get the red edge phi. Well, and now I have everything to make the whole clause. Yeah, so here I have my variable gadgets. Here, these are the copies of the Bing House. Yeah, here you see the free edge, here, the red edge, which can be there. And this is topologically the closed gadget. Here we see, I see the three edges which I want to make free, and here is the. Which I want to make free, and here is the output edge. Yeah, so how does this whole thing work out? Well, you see here I have the planar equilinear monotone C sat. I add some other connection so that to every clause. Okay, let me pause it. Let me go a bit here. I need because my clause gadget has three incoming edges, I need that to each. I need that to each clause, I have three incoming, you know, I have three variables. So, what I do if there are just two, well, I double sum of these. Yeah, here I have two connections from single variable. So, I have here three. Well, that's strictly speaking not necessary. I could do the turbine with just two houses or four and stuff like that, but that would just complicate the reasoning. Yeah, so I just make this thing. Then, what I do. Then, what I do next is I just put the variable gadgets where the variable gadgets are. And then, in order for the variable gadgets to really work, I need to glue something along the black edges. And for that, I simply take two copies of the Binghaus and glue it together as such. So, I glue these things, and now I can collapse this thing. Now, I can collapse this thing as soon as this edge is free. I make some several copies for each variable one and glue it like that. So now the variables are sticking fast. And in order to somehow make these black edges disappear, I need to make this edge free. So far, it's free, but I will glue something other. Then I take the copies of the bing houses here, and we saw the red edges. And we saw the red edges. So, here I make one red edge. You know, if this clause or this literal goes to three clauses, I take three red edges and I make the triangulation so that there is the room for these red edges. And then I use another copy of the Bing House just to connect these to my clauses. And then I simply glue the clauses. Clauses there. And so that is the construction. But now I need to connect these clauses to this output edge so that after I satisfy all of them, which means I collapse them, I can collapse this and collapse the rest of the simplicity complex. So I make here the connections, but now you may now wonder, okay, but Okay, but you know, how do you connect these things which are inside? Well, I do another big house, but here I glue it along the green edges, which we have seen earlier. So that's it. And now, so that's it. And in the end, What happened? Yeah. So, and in the end, we are left with this formula or with a collapse which looks like that. And now, if we have a satisfiable assignment, for example, in my situation, I will take these variables to be true, this to be false, and this to be true again. How do we collapse the formula? Well, that should be easy. However, that should be easy, given what everything I said. So we start by collapsing, you know, this thing, making this edge free. Then I can collapse this one. Then this makes this free. I can collapse this. Then I may collapse these things. And look, here, originally, I couldn't collapse this way because there was an edge which was crossing. But if I start from the innermost clause, If I start from the innermost clauses, then I can collapse the outgoing connections to this edge and making this crossing phi, and then I can collapse this and propagate to the clauses which are further away from the variables. So you see, now I can collapse this cause, these connections, and finally the none. And finally, the strip along the variables, which make, which was there to really force us to just choose one of them. And now I collapse the rest of things. And what I am left with is a single plane which can be collapsed to a point. So that's the construction for collapsibility. And for shellability, we basically use the same construction, we just replace the variables. Construction, we just replace the variable gadget with something which is two-dimensional. And for that, we use the theorem of Hachimori, which says that a pure two-dimensional simplicity complex has the property that its second barycentric subdivision is shallable if and only if this complex is collapsible after removal of some number of triangles, where this number is the reduced. Where this number is the reduced Euler characteristic, and well, what does it mean? For our variable gadget, it will look like that, but now it's not filled with tetrahigra, it's just a sphere. So instead of gluing tetrahigra together, we glue stuff like this. And otherwise, the constructions were exactly the same. Now, how can we collaborate? Same. Now, how can we collapse this after the removal of some triangles where we remove one of the green triangles here, and then the rest is exactly the same? So, here we can look at the collapse of the variable gadget for the 2D scalability. We removed one of the green things, and then it looks like that. So, and now we are left. So, and now we are left with the most demanding part, and that is the case of 3D shellability, of shellability of three-dimensional balls. And here, we just use the fact that a facet is free for shelling. Now, the facet is a tetrahedra if its intersection with the boundary of the complex built so far is. Built so far is a non-empty union of triangles. So now, in the shelling of a ball, here it's really important that I have a ball, otherwise I may have some facets which are not free in the shelling. But here. And now, by a suitable thickening of our gadgets, of our two-dimensional gadgets, we may ensure that instead of these violet free edges which we had previously, Had which we had previously, now we have a free tetrahydra there. And for example, let us look at our variable gadget for 3D shelling. So it's this triangular prism. And just to know how it's triangulated, so it consists of these, I guess, 11, 6 plus 6, 12. Plus 612 of this 12th tetrahedra. So this is the triangulation, this is our variable gadget. And how do we shell this? Well, now we can see that, for example, this tetrahigra is free. I mean, how is this gadget glued to the other gadgets? Something which goes around, and the only face triangles which are not glued to anything are these red ones. Anything are these red ones, these red ones outside. So that means that originally only these three red tetrahedra are free for shelling. And then you can remove them one by one. Okay, so we can remove in the shelling in the opposite direction. We can remove this one, this one, and that makes this blue triangle free. This blue triangle three, or we can start on the other side, but then we cannot, you know, we just need to choose a side here. Well, and for the other gadgets, let me just show you some pictures. So, for example, this is the front side of the Binghouse here. It's now done from cubes. Done from cubes, and we need to triangulate the cubes. And how do we triangulate them? Where we put some order on the vertices. And for example, here is the vertex one. And that means that we first do the triangulation starting from this vertex. And so that we put as many edges and as many triangles to that vertex as we can. Then we do the same from two, three, four, five. And this way. Four, five, and this way we ensure that in this cube we have only one free tetrahedron, which we then glue to the variable gadgets or whenever we want. And yeah, there are some other rules about how to place this vertex number, but that's too technical to go into that now. So just another, you know, here we have again the blades of the turbine to split into cubes. To split into cubes, uh, well, mostly cubes, there are also some other things which are needed there in order for it to work. Because if we are not careful, then you know we may introduce some unwanted challenges or some unwanted free phases and somehow tunnel our way through this free edge. So, so we need to be really careful, and it requires a lot of careful checking. And what's even more demanding is to check that in the end we really obtain something. That in the end, we really obtain something which is homeomorphic to a ball, and that we do not do things in a wrong way. Yeah, and another, this is the part of the courtyard, the green things among, between the Roman house. And yeah, that's all I wanted to say about the proof. And thanks for your attention and really very nice workshop. Thanks, the organizers, for organizing such a nice event. For organizing such a nice event and I'll ask what everybody wants to know. How did you make those videos? Well, I took I just draw it in Blender and you know it has very nice animation capabilities. Animation capabilities. I could say, okay, I want to go from this picture to that, and it computes everything along. So it's just a 3D drawing software where you can say, okay, I want this picture to be transformed to that one. And it works. It's not an NPR. It well, this is NP. I mean, what we constructed is a three-dimensional ball which is embedded in R3. Because we thickened the gadgets. I mean, it's not flat in the sense that it's not, I mean, it's not a simple shiply tope, right? It's some topological ball. Yeah, but simple ship polytops are easy, right? Simple ship polytops are easy, right? So there are shallows. What do you mean? I mean, for three-dimensional balls, and because you know, if you cone, then shellability is preserved and ballness also. So, from dimension three onwards, deciding whether a simply shot ball is shellable is NP-complete, which is what we should. Is NP complete, which is what we showed, but via this proof, but it's just a topological ball. I mean, simplistic topological ball, it's triangulation of a ball. But for simplicial polytopes, it's known that they are all shallow. Yeah, convex, yeah. So you you mentioned the open book, or uh embedded. Or embedded since we support open RC is not known. Well, we proven it. So, I mean, I mentioned it was open before we proved it. So, for the polytopes, there are always shellable exactly. Can you find a shelling efficiently? General dimension? Yes, I would say so. I mean, something quote-like shelling can you just take a direction. You just take the directions and yeah, I guess so. Yeah, many, many. I mean, solability flag is a maniki for uh for geometric yeah I don't know. I mean I don't know. I mean, topological ball is NP complex. Deciding whether a shelling exists is NP-complete, right? So, unless you pose some other conditions on the top on the simpler complex, then you are even not guaranteed to get a shelling. Any other questions? And this was