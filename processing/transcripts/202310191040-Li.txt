Today, my talk is about the work in the field of differential algebra. This is going to work with, yeah, this work is about the consistency technique for algebraic delay ODEs and algebraic delay PDUs. Joint work with LSD of CINICOF, Galabu Pogude, and Tom Scanning. Let me first state the problem roughly. Suppose X is two power variables X1 to Xm. And for a given finite set of difference polynomials, F1 to Fr in the variables X, we want to determine. We want to determine whether the system of differential difference polynomial equations has a common solution. Here, by solution, we mean solutions in the sequence range. So we call it sequence solutions. We will give the rigorous definition later. And by determining, we mean we want to think an algorithm to determine. algorithm to determine the consistency of the system or different sequence in the sequence range. And our goal is to produce a method which is implementable at least in principle. Ah, sorry. The coefficients in a difference or difference fields. Computable. Yeah, computable. Maybe. Yeah. Yeah, this outline the talk in the first part of our institute. Yeah, in the first part, I will introduce the background. I will introduce the background of effective nose dilances in algae geometry, and then we move on to the consistency taking for algebra delay ODEs, mainly aware state the effective differential difference noise dilances. And next is the effective loss dilances for algebra PDEs. At last we will conclude the talk. The consistency taken problem for polynomial equations asks for a method to decide whether an arbitrarily given finite set of polynomial equations over the complex number fields had a common solution. And the Hilbert noun static is the most fundamental theorem in algorithm. Power theorem in algebra geometry, it gives the following answer. There is no common solution for F1 to Fs equal to zero if and only if there is two polynomials Z1 to ZS equals one. However, snow-stalinist is a criterion rather than an algorithm to produce an algorithm. To produce an algorithm, we need the effective worker of the Harbour Noun Stalinist. So the effective non-stalances asks for a uniform upper bound D, depending only on the number of variables A and the degree bound of D, the original given final set of polynomial equations. Polynomial equations, such that there is no common solution for F1 to Fs. If and only if there exists two polynomials G1 to DS with degree bounded by this capital D, such that the sum of GIFI equals one. So if there exists such a uniform bound, A uniform bound, we can reduce the consistency checking problem for polynomial equations to the problem of solving a system of linear equations for the coefficients of the GI. So the existence of a uniform bound D will produce an algorithm for consistency taken for polynomial equations based on linear. Places based on linear algebra techniques. Here are some representative work on effectiveness sciences. The first double exponential uniform upper bound was given by Hermann in 1926. And the first breakthrough upper bound was given by Brown Wheel, which is optimal and single exponential. And the single exponential. And then cooler and dynamic that these algae geometries improved the bound. Yeah, and the pairboard not the effective nose dialysis also have some applications, for example, in the POSMP problem. And also, it has several Several different versions, like in the arithmetic version, the coefficient lies in the integers, they are integers, and also sparse effective noun standards. The real versions are effective now standards. And in differential algebra, we also have the effective noun stalences for algebraic differential. For algebraic differential equations, and yeah, we have this author scale different upper bounds for the uniform upper bounds for the effect to noun stales. And such bound can transform the consistency taken for algebraic differential equations to the consistency problem for consistency taken for. Consistency taken for polynomial equations. Yeah. So these are decidable. Okay. Let us start with the effective node statuses for algebraic differential difference equations. Differential difference equations are also called delayed differential equations. They are used in biology. Are used in biology to build the models and analyze models. And to analyzing the delete differential models, humanity and consistency technique are basically problems. For example, we sometimes need to eliminate some non-observable variables from the models, and sometimes we need to detect whether. Sometimes we need to detect whether the difference polynomial system admits a sequence solution. I try to avoid too many notions from differential and difference algebra, but we still need some basic notions to make the statement rigorous. So missing some different difference field is a Difference field is field indoor with the recent operator delta and injective indoor multi-domain sigma, such that the actions of delta and sigma commutes. The revision operator just operator from key to key which satisfies the detailed property and the lab means rule. And lab means rule, and the difference operator sigma is as injective in the morphism. Yeah. And for example, in the first example, PY is the resin of function field in T with the Euro derivation. Delta is the D over D T and the difference operator sigma is same. Sigma is sigma Ft to Ft plus one using automorphism. And in the second example, the complex number field with a zero derivation and the identity map constitutes a differential difference field too. A differential difference polynomial in the variables y with coefficients mean k is a polynomial in Is a polynomial in y in yi and is transformed by absence of director and sigma up to certain order. Yeah, in the this there are infinite many accountable many number of variables, but for each different polynomial, does it just effective appear finitely many? Yeah. And give me a differential difference polynomial f. F y equals one, equals zero defines algebraic differential difference equation. We also call it algebraic delay differential equation. Yeah, now just one differential operator thing. So it is algebraic delay OD. And for example, in the OP one. The over Q1. This is a linear differential difference polynomial in Y. And the second equation is also a linear one of order two. It is also a differential difference equation so that the differential operator doesn't appear in the equation. Okay. Okay, now we define the sequence solutions. We fix the coefficient of field key and suppose the error is a differential closure of key. Then we consider this product range and we define a sigma operator and delta operator for this product range to Product to make it to be a differential difference, right? The sigma operator is just the shift operator. Yeah, by sending x i, this sequence to x plus one, i plus one. And the delta operator is the axiom of coordinate-wise direction. Yeah, you can verify the commutes, so they constitute. They constitute a difference or difference, right? We call it a sequence, right? Okay. And for the difference of difference beyond the error, you can inject it into this sequence by sending its element AEL to be a sequence with all its components. With all its components, A. Yeah. So give me a system of algebraic differential difference equations, UY, this F, yeah, there are finite number of differential difference equations. A sequence solution of this system is an element with each coordinate from the sequence point, such that. Sequence such that when we substitute Ai into Yi, we will get zero. So this is the determination of a sequence solution for algebraic differential difference equations. For example, I start from a simple example. This differential difference equation is a linear. It's a linear one our order two. So it equivalently is the recursive recurrence relation for the Fibonacci sequence. So the Fibonacci sequence is a sequence solution of this equation. And in this example, for this also leaves Uh, but this also leave a linear one, our outer one, this is our outer one. And uh, for this, this sequence is a sequence solution for this equation with T appearing in the components of this sequence. So now we can state the problem rigorously. The case can The case-taking problem for algebraic differential equations is that we ask for a method, an algorithm for each input a system of algebraic differential difference equations. Okay, system algebraic differential difference equations in the unknown slide. unknown is why um the algorithm will output yes if the system had a sequence solution and but if it doesn't have a sequence solution it can output no okay um uh in two thousand seven the self-skin points approved the decidability uh results about the sequence right About the sequence line. The theories of the difference lines of sequence of this form with the difference operator just the shift endomorphism, then when k is infinite, this theory is undecidable. That means we cannot derive a condist method for. This PC taking method from a recursive epsidimacy of this theory because it doesn't have the quantifier in the process. This is the related results of consistency type in sequence runs for algebraic difference equations of Tinikov and the Of Chinnikov and the co-authors proved that the consistency checking problem for different is decidable while the effective version of different nouns balances from the algebraic method. And if there are several more than one different operators, the consistency typing the Taking the algebraic pastoral difference equations is undecidable. This is proved by the Good and the quarters. Now, in our work, we care about the differential difference equations and the parcel differential difference equations. Yeah, in these two cases, there are just one difference operator, but we can have more. But we can have more than one division operator. Yeah, our work is about these two cases. Despite the undecidability of our sequence runs, we established the abstract version of difference of different mouse dimensions. For simplicity adjustments due to the weakness density, it says that F equal to zero. Yeah, F is a finite system of differential difference polynomials. F equal to zero has a sequence solution if and only if one puts intermittent as a linear combination of F and See our f and transforms by the xi's of delta and sigma. Yeah. Yeah. So yeah, in the algebra case, in the algebraic case, no, it's f equal to zero has a solution. If doesn't have a solution, if and only if one can write it as a linear combination our f and And in our differential difference case, we have the similar result. F equal to zero has a sequence solution. If it doesn't have a sequence solution, if and only if one can be written as a linear combination of F after the transforms up to a certain order. Yeah, we define the order of system of differential difference polynomials. Give me a system of differential difference polynomials F. The order of F is just the maximal number JK such that delta J sigma QY effectively appearing in F. And give me a Give me a natural number B, we use this if there is no B here, it is the differential difference ideal generated by F. But if there is sub B here, sub B means the algebraic ideal generated by F and is transformed up to the order B. So they are just a final number of algebra. Final number of algebraic polynomials. And by the abstract differential difference in stated before, F equal to zero. For this particular F, F equal to zero is inconsistent if and only if there exists a natural number B such that one can be released as a linear combination of F and it transforms up to the order B. To the other B no, not the coefficient is in the difference field. Yeah, yeah, yeah. Just bound the variables and the variables. We don't care about the coefficients. Don't care about the coefficients and the uniform bound. We want to find a uniform bound doesn't depend on the coefficients of the B system. Yeah. If there exists a uniform bound B only depending on the order and the degree of this system and the number of variables, and then the differential difference can distanced. Difference consistency typing problem would reduce to the ideal membership problem in polynomial range. And so we could use the effective non-stalances in algebraic geometry to produce an algorithm for the consistency tracking problem for algebraic delay differential equations. Even if you have that, right? You know that it's one like if and only if there is a B and you know what this B is bounded by, right? It's not a finite set if you if you don't bound the coefficients. Okay, maybe stupid, I don't know. Maybe you can somehow avoid that. I mean, uh, coefficients, how drawing is. The coefficients, how to encode the coefficients? Even though the degrees of boundary. Yeah, but the bound only depending on the numerical data of the system. Ah, the coefficients are bound as well. Coexistence needs the order and degree of the polynomial system. A polynomial system and the number variables, and yeah, and like in the algebraic case, the algebraic case just there is no order for order could be always zero. That allows you to just do some reductions and see what happens again. Okay, yeah, yeah. Okay. So the main the main So, the main problem is to find a uniform boundary. And yeah, we finally proved there is a uniform bound B for the effective difference of different standard states. It states as follows: there is a computable function B depending on A, R, and S such then for each. That for each finite system or differential different sequences in any variables, any number of variables with order bounded by R and degree bounded by S. We have the system F equal to zero has a sequence solution. If and only if one put in the B written as a linear combination of F and it transforms up to Transforms up to the order B. Yeah, this is yeah, here we don't. So actually, in the rigorous statement, that is also for each different field key, our characteristic zero. Yeah, yeah. And yeah, now we'll give the rough idea of many ingredients. idea how many ingredients to prove this theorem the basic idea is to eliminate the operators one by one so first by um well given and originally we have a system of algebraic differential difference equations f equal to zero and we first do sigma prolongations to get sigma prolongations to get F sigma F sigma up to the order B zero F now we consider this system as a system of differential equations in Y and a sigma Y up to certain order and for this system we then eliminate the delta of operate the delta operator by performing By performing differential prolonged distance to get delta i sing z f with the order, the order of delta operator up to the order B1. We consider this system as a system of polynomial equations. These are independent variables, the ergic variable. And basically, we want Basically, we want to bound B0 and B1 such that the condist taken for algebraic differential difference equations can be reduced to the condists taken for this set of polynomial equations. So we need this B0 such that the original algebraic difference or difference equations Difference equations f equal to zero doesn't have a sequence solution if and only if this system of differential polynomial equations doesn't have a solution. And the existence of new ones such that the system of differential equations doesn't have a solution implies that this system of polynomial equations doesn't have a solution. Polynomial equations doesn't have a solution. So, this is the this has been solved in the consistence by the effect to non-stances in algebraic geometry. And for this part, it also was solved the existence of uniform bound BY. It is the effective differential mouse stalensis. Yeah, this the. Yeah, this the existence is the effective difference on no static. The best F bound now is double explanation. So the main difficulty is to compute a uniform bound B0 such that F equal to 0 has no sequence solution implies this system, our differential equations, has no solution. So we need to bound B zero. And to bound B0, we first geometric the problem and define the notions about train or certain lengths. And we proved F equal to zero has a sequence solution if and only if the differential variety F or the differential variety X assumed. Variety x associated to the original differential difference polynomial system had a train of infinite length. So now the main technical problem becomes we want to compute a bound B such that if the associated differential variety has a train of length longer than B, then it implies there will be an infinite. There will be an infinite trend, a trend of infinite length. So, yeah, the trend, if there is a trend of certain length, then it implies there is a trend of infinite length. To get the face bound B, we need some technique called bounds. First, we need to bound the number of irreducible components for differential variety. Differential variety. Differential variety is the differential analog for algebra variety. It does the solution sets of differential polynomial equations. But unlike the algebraic case, we know in algebra geometry, if a polynomial is irreducible, then it defines an irreducible variety. So the algebra variety defined by this irreducible. Variety defined by this irreducible polynomial just has one component. But in the differential case, things are complicated. For this example, this differential polynomial is order one and is irreducible, but it has six components. So it's difficult. Is different from the algebra case. And we first proved that there is a computable bound error depending on N, R and D size for each differential polynomial set S, the N variables with order bounded by R and degree bounded by D, the number of irreducible components of the solution set our S is bounded by this number. Is bounded by this number. So the number of irreducible components of differential varieties has a uniform bound, not depending on the coefficient, but just on the numerical data of the system, the order degree and the number of variables. And based on this boundary, we proved that The existence of a computable bound B, such that a differential variety X has a train or leaf B, then it implies it has an infinite train. Equivalently, the original differential difference polynomial equations had a sequence solution. This bound at the boundary B, we can write out Yeah, we can write out this form. Yeah. This is the effect to nod statuses for algebra delay ODEs. Now we consider the case our effect to nod static for algebra delay PDs. Suppose the key is a password differential difference. key is a pastoral differential difference field here um so the the so it is a field indoor with a finite number of diluting operators delta one to delta m uh here ultimately m is greater than or equal to two and an injective window morphism sigma is the difference operator such that delta i and sigma i and sigma commutes. And the sigma commutes. And a partial differential difference polynomial in y is a polynomial in y and it transforms at a certain order by the absence of delta i and sigma. And the giveaway of Parcel differential difference polynomial F, F equal to zero defines an algebraic delay PDE. Could delay PDE. Yeah, we'll consider the consistency technique for algebra for algebraic delay PDEs in sequence runs. It's natural to consider whether the techniques in the case of algebraic delay ODEs to be adapted here could be adapted here. But unfortunately, there are two missing key Unfortunately, there are two missing key ingredients that we cannot solve via the classical method. It is: does uniform bound exist for the number of components of algebraic parcel differential equations? And can we bound the coefficients of quantum polynomial or PDEs on the per d epsilon? Unlike the ordinary case, the coefficients of Quantine polynomial. Coefficients of Kunting polynomials could be negative, and we don't have a numeric geometric mean for this invariance. Of course, we don't know whether all the coefficients of this dimension polynomial are invariants of the system. Yeah, we don't know whether these bonds exist. Exist. Yeah, and we filled these gaps via a different approach. It's called algorithm DLS bounds. We proved that the bound exists via the existence of algorithms. The theorem, this is a Is a theorem can be roughly stated as follows. There are some rigorous notions that I didn't explain in the talk. It says that it is a computable function with the input accomplished decidable theory T and a total algorithm A performing computations. Performing computations in your model of T, that all these computations are definable functions in the models of T. And any positive integer L that computes a number of answers for every model M of T and a two power L to power A from M, the size of the output of A with the input little A doesn't exist. Little A doesn't exceed this n. Yeah, and then we apply this algorithm to this theorem to the classical algorithm in differential algebra. So, this is the Lutheran-Field Grammar algorithm is a basic algorithm here. World differential algebra. It takes as input a finite set F, our differential polynomials, and a differential ranking. The algorithm will output out reduce set V1 to Vn sets, then the solution set of F could be decomposed into the solution set of some simple systems. Yeah, this is decomposition algorithm. And we consider the theory of differentially closed field our characteristic zero and with m derives. And we encoded the differential ranking in the theory or real closed field because when the number of operators, if there is Our operators, if there is operators greater than one, there will be uncountable number of differential rankings. And the efficiency of the algorithm depends on the differential ranking. So we encoded the differential ranking in ICF. Then I will prove that the disjoint unit of DCF. F 0 M and R C F is completely distable and formalizing this right field algorithm, Rattenfield governor algorithm as a total algorithm or this theory. So now we meet all the conditions in the previous algorithm, in the previous theorem. So we can get a bound. A bound for the outer outputs from the sides of the input. So we proved there exists a computable function C depending on M and N such that for all M and there are natural numbers, a partial differential field key with M derivations, and the final set F our n variables with order and degree bounded by. With order and degree bounded by this H, the number of irreducible components of the solution set of F doesn't exceed this number. So this is the order and degree bound H appears here. And we also put with respect to any ranking, this component, sorry, this component This component has a characteristic set with order and degree bounded by this number. And with this bound, we can give the uniform bound for the coefficients of the Coutine polynomial on the projection. So we can, the two mission gaps are still the virus theorem. Yeah. Wrong, yeah. So we can prove the effective noun standards for delayed partial differential equations. This theorem says there exists a compute for B depending on R, M, and S, such that for all differential, a partial differential difference fields P with characteristic zero and the number of To zero and the number of derivations are m with m derivations. A final set of differential difference polynomials in R variables with order and degree bounded by S. Then F equals zero has a sequence solution if and only if one could be written as a linear combination of F and its trans. Combination of F and its transforms by the axis of delta and sigma up to the order B. So from this theorem, the existence of this computable uniform bound B could reduce the The consistency technical delay PDEs to the membership, membership for polynomial ideals. So we can use the effective non-stalances for algebraic polynomials to solve this condist integrating problem for algebra delay PDEs in sequence is decidable. Is decidable. Okay, so let me conclude the talk. So we established the effectiveness analysis for algebraic delay, ODEs, and PDEs, and approved the decidability of the related consistency type in problems. That is the consistency taken for OD is decidable, and also the consistency taken for parcel differential difference sequences in sequence lens is decidable too. So this is the reference. Okay, this is what I want to say. Thank you.