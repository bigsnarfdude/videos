So, I will talk about not really an application of recursion theory, but an application of something to recursion theory. In this case, it's application of topology to recursion theory. Okay, so I will explain what is the computable type and the main result. Okay, there. Okay, so it's about computability of compact sets. So imagine you have a compact subset of some Euclidean space, Rn and for these kind of objects, there are natural computability notions. So, like for subsets of natural numbers, you have the notion of computable set, of CE set, and so on. And for compact subsets of Rn, you also have to set up a set of sets. Compact subsets of Rn, you also have natural notions. So the most natural is the notion of a computable set. You say that a compact set is computable if essentially you can decide which rational balls intersect the set. So informally, it means that you can have a program that could draw a picture of the set at any precision on a screen, for instance. Yeah, so this is the notion of comfortable set, and you have the notion. The notion of computable set, and you have the notion of semi-computable set, which is just half of it. It means that you can enumerate the balls that are outside the set. Okay, so being semi-computable is actually equivalent to being pi one, a pi one set. So you can enumerate the complement. Okay, so yeah, these are kind of the notion of comfortable and co-CE version for. Version for compact sets. Okay, so yeah, and so these two notions are not equivalent. The second one is strictly weaker than the first one. For instance, you can build a disk which is semi-computable but not computable. So you just take a radius which encodes in some way the halting set. And with this, you get a semi-computable disk. And if it was computable, And if it was computable, you could compute the radius, and so you could solve the halting problem. So, yeah, these two notions are not equivalent. Here, the example is a disk, but it starts to become interesting when you ask, okay, for which kind of shapes can you have a separation between them? So, if instead of a disk you want a circle, a circle which is summit computable but not computable, is it possible? Is it possible? So, for instance, if you take the same center at the origin and the radius is the halting set, it doesn't work, it will not be semi-computable. And actually, you cannot. And that was a very nice result proved 20 years ago by Joe Miller, that if you have a set which is homomorphic to a circle or more generally to a sphere, an n-dimensional sphere, then semicomputability is equivalent. Semi-computability is equivalent to computability. Okay, so these two notions are equivalent for some spaces, for some sets, depending on their topological properties. And this result was generalized 10 years later by Ilazovich, who proved that more generally, every closed manifold has this property. So a closed manifold is a space which is locally homeomorphic to a Homeomorphic to a Euclidean space. So, for instance, the torus is one of the simplest examples outside the sphere. So, for all these sets, we have this equivalence. So, this notion was so interesting that it was coined in some way. So, Ilyazovich defined this notion. Ilyazovich defined this notion of computable type. So, a compact space has, so it's always computable, a compact matrizable space. It has computable type if every set which is homeomorphic to X satisfies this equivalence. So, semi-computable is equivalent to computable. And so, with my student, Jamelidin Amir, we have started to investigate this notion. This notion and try to understand more generally for which sets we have this property. What are the topological properties of the space X which entail this? Okay, so first I will give a result that, because when you see the definition, you don't see really what kind of properties make this equivalence hold. So this result is a characterization which Characterization, which helps seeing at least on a picture whether a set has computable type or not. So we will only focus on simple spaces, and simple means a finite simplicity complex. So for such spaces, we have a characterization, which is as follows. So X has computable type. If there is some epsilon such that Such that if you slightly deform x by epsilon, you cannot converge to a proper subset of x. Okay, so an epsilon deformation is you have x and you apply a continuous function that moves every point by just epsilon. Okay, so it's a small deformation. And yeah, so the property is that if you Is that if you allow a sufficiently small epsilon, you cannot have small deformations that will decrease the set. So here is a counterexample. You have this space X. So you start from a torus. You pinch somewhere. So you take a small circle and you identify all the points. You get this pinched point. And you attach a disk. And you attach a disk in the middle. So you get this space x on the left. And in the middle, you see some deformation of x. So you just apply a continuous function. So epsilon would be the size of this hole in the bottom. And if you if you you can define ah okay you can define more and more definitely You can define more and more deformations of x, and you see that these deformations converge to a proper subset of x. Okay, so yeah. So in the middle, you see that if you continue this way, you will converge to a set which is strictly contained in X. And so epsilon here is essentially the size of the whole, but you could do it for any small. But you could do it for any smaller epsilon because you can do it at any scale. And so it does not satisfy the property in the statement. And so this space does not have computable type. And you can see how a semi-computable copy would like. So on the right, you have a copy which is semi-computable but not computable. And you can be very concrete by saying, You can be very concrete by saying, okay, let's encode the halting problem in the sizes of the holes that you see in the middle. So if you manage to do it correctly, this set will be semi-computable because you can enumerate the complement by enumerating the halting set. And it will not be computable because the halting set is not computable. So, yeah. So, yeah, so one direction is this: if for every epsilon you can decrease the set by epsilon, then you can use this to make a diagonal argument and build a copy which is like that, semi-computable and not computable. And the other direction is a bit more tricky, but okay. I think this characterization gives an intuitive understanding of when. Understanding of when comfortable time holds. So, for instance, with a sphere or a circle, if you take the circle, if epsilon is small, you cannot slightly deform the circle into a proper subset. If you want to converge to a proper subset, you need to move points very far from their original positions. Okay, yeah, so an interesting question which was raised a few years ago is whether computable type is preserved under products. So if two species have computable type, what about their products? Does it have computable type? And so we recently came up with an answer, which is no. So we build a space X which has computable Build a space X which has computable type, but its product with the circle does not. And what's interesting about this, the proof of this result, is that it seems to be impossible to build such space by hand directly. We first need to understand the deep relations between computable type and topology. So we are really relying on topological results to make Result to make this construction. So I will explain some of the ideas under the construction. By intersection, you say. So the point is that if you have two spaces, you need to say in which way you want them to intersect. There is no natural way because you consider spaces up to homeomorphism. So, yeah, it might depend very much on the way the copies that you take intersect. Okay, so for instance, in the other direction, it is true if the product has computable type, then both have computable type. Well, okay, disjoint union, but this is too easy. No, it seems that. No, it seems that we have often this the other direction. If the new space has computable type, then the first space. So if you take, for instance, the cone of the space or the we will see another suspension of the space. We always have one direction, but not the other. Okay. No. Uh, doesn't work. Maybe you need to close the small window. Oh, no, sorry. Uh, the not that, yeah, it's can you come back to the slide? Okay. Okay. Okay, so now I will briefly explain how the proof goes. Okay, so I need to introduce a few classical notions in topology that we'll be using. So the suspension. Yeah, so I guess I missed a slide. Yeah, right. Okay, so what is the roadmap? Okay, so we saw a characterization here. So it helps, but not that much, because if you have an arbitrary space, it's not clear how to prove that there is no deformations that converge to a proper subset. So we need more tools and techniques to prove such properties. So the first thing we do is to reduce this properties. To reduce this property of computable type to homotopy properties of certain functions. Okay, so we make a precise relation with homotopy theory. The second step is that we consider a particular family of spaces for which it's not homotopy of arbitrary functions, but homotopy of functions between spheres. Okay, and with this. Okay, and with this, we can use results about homotopy group of spheres and apply them to get our results. Okay, so I will go step by step. Okay, so let's first talk about the suspension. So this is a classical topological operation. If you start from a space, X, you can build a new space, the suspension of X, sigma. Of x sigma x, which is obtained as follows. So you start from x, you add two points outside a and b, and you add a segment between a and every point of x, and between b and every point of x. So you imagine that the space x is like suspended between wires between the two points a and b. Okay, so this is a suspension of x. Uh, so you see that, for instance, you go up in one dimension. If the space has dimension n, the next suspension has dimension at n plus one. And a very nice thing is that if you take the suspension of a sphere, you get a sphere of the next dimension. For instance, the suspension of the circle is the two sphere. And if you have a map F between two spaces X and Y, you have a natural map sigma F between their suspensions. You just apply, so S F should be sigma F actually. So you just apply F layer by layer. Okay. So this is the suspension. And so when the When the space is itself a suspension, we get a characterization of computable type. So if X is a nice space, a simple shell complex, we understand when its suspension has computable type. So let me explain how it works. So we start from a space. So here, for instance, this small graph. We consider a point. Somewhere, x, and this point has a neighborhood which is some Rm. So here the neighborhood is homeomorphic to R. Okay. And now what we do is we take the quotient by all the rest. So if you take the quotient by the all the blue part, all the all the part which is outside U, what you get at the end is a a circle here. Is a circle here. Okay, so if the neighborhood was homeomorphic to R, when you take the quotient, you get a circle. All the blue part is mapped to one point. And you consider the quotient map from the original space to the circle. We can do it in higher dimensions. So if you start from a two-dimensional space, like the torus, you start from a point. Like the torus, you start from a point, a neighborhood is like R2, and when you take the quotient by all the rest, what you get is a two-sphere. Okay, so all the rest is sent to a point. So more in general, that's a common situation. You take a point, a small neighborhood homeomorphic to Rn, and when you take the quotient by the rest, you get a quotient map to a sphere. Okay, so we will be. To a sphere. Okay, so we will be interested in these maps to spheres. So, depending on the starting point, you get many maps from the space to a sphere. And the result here is that the suspension of X has comfortable type if and only if the quotient maps that you get this way are not homotopy to constant maps. So, in the sense of homotopy, all these maps are non-trivial. Okay, so here we reduced computable type to a homotopy property of maps to spheres. So, for instance, if we take the two examples from the previous slide, the first space does not have computable type because the quotients Because the quotient map is homotopic to a constant, but for the torus, it's not the case, and so the suspension of the torus has computable type. Okay, so now we have a characterization of computable type in terms of maps to spheres. And now what we want is to have maps between spheres, so a map from a sphere to a sphere. So for this, we need to restrict to a family of spaces. Restrict to a family of spaces. Okay, so we define a family of spaces as follows. So, in general, if you take an n plus one dimensional ball, its boundary is a sphere, n-dimensional sphere. So, for instance, if you take the disk, its boundary is the circle. And if you are given a map from the boundary From the boundary Sn to another sphere sp, you can attach the ball Bn plus one to BP plus one using F. So you take Bn plus one, BP plus one, and you attach them together by sending each point of the boundary Sn to a point of the boundary SP. And the way you glue, you make this association is given by the This association is given by the map F. Okay, so now we will see an example where you have two disks and you attach them along their boundary, and the function that sends the circle to the circle is the doubling map. So it takes a point of the circle and doubles the angle. So can you run the video? Yeah. Okay, so here you have a blue disk that you attach to the red disk along the boundary, and you send the blue circle to the red circle by doubling it. So in the end, the space you get is we kind of see it in the blue part. You have a kind of disk which turns around twice. Yeah, so yeah, you can go back to the straight. Okay, so yeah, so for each for each function f like that, you get a space which is this bn plus one attached to bp plus one using f. And now we will relate the properties of this space to the properties of f so what we show is So, what we show is that the suspension of this space has computable type if and only if the suspension of F is not homotopic to a constant. And when you take the product of the space with the circle, this has computable type if and only if the double suspension is not homotopy to a constant. Okay, so we have reduced Computable type to homotopy property of functions between spheres. And now we can apply some classical results from topology, which tell us that there exist functions such that the suspension is not homotopy to a constant, but the double suspension is. Okay, so there are specific examples where you take a function from Where you take a function from S7 to S3, and it has all these properties. And so, with this, we get the result. By taking this function f, we have a space which has computable tie, but its product with the circle does not. Yeah, and so we get the results. So, so as you see, we really need to rely on old topological results. An old topological results. So these results date back from the 50s. Okay, so the summary is that the suspension of a space has computable type if and only if the quotient maps to the spheres are not homotopy to constant. There should be a negation. When we have a function between spheres, we build a space such that we can characterize computable type in terms of the properties of the function. And then we can use some results, some topological results to get a counterexample for free. I mean, I will now. I will now just give another type of results that we get. So if you have a space, so it's another characterization of computable type, which helps to detect computable type for particular spaces. So you start from a space of dimension two. Okay, if you have a space of dimension two, when you take a point. Of dimension two, when you take a point and the neighborhood of the point, the boundary of this neighborhood has dimension one. And for simplicial complexes, a space of dimension one is just a graph. We will see an example in the next slide. So, what we proved is that the space X has computable type if all the graphs that you can obtain this way are That you can obtain this way are a union of cycles. Okay, so we get a characterization which is very easy to check in practice. So let's take an example. So we consider again the space X, which does not have computable type. If you take the spatial point, its neighborhood is the red, the yellow set drawn below. It's two cones and a triangle in the middle. cones and a triangle in the middle. So the boundary of this is the graph that we also already saw before, a graph which is two circles joined by a line segment. And this graph is not a union of cycles because the middle edge is not in a cycle. And so that's another way of proving that the space does not have computable type. Another example. Another example is this space, Bin's house. So it's a famous counter-example in topology. So it's a space which is contractible, but when you see the space, it's not obvious that it is contractible. There is no easy way to visualize it. And all the previous examples of spaces having computable type were not contractible. But it turns out this space has computable. This space has computable type. So it's a contractible example having computable type. And how to see that it has computable type? Well, we use the previous result and we just have to look at every possible vertex and what is the shape of the graph that is around each vertex. So if you analyze the space, you see that there are three types of neighborhoods. Of neighborhoods, which are drawn here in yellow. So if you take the point A, its neighborhood is just like a disk, a topologically disk. So the boundary is a circle. And for B and C, the boundary is always a union of circles. So you see that all the graphs that you obtain in the space are unions of cycles, and so this space has computable type. Space has computable type. Okay, so all this was for dimension two. And what happens in higher dimension? So we can do something similar if the complex is pure. Pure means it has the same dimension everywhere. So if you have a simple shell complex of dimension which is pure, okay. Okay, around every point it's n-dimensional. Then you can do the same. You say, okay, around each vertex, I take a small neighborhood. Its boundary is a complex of dimension n minus one. And we have a similar result that x has computable type if all these complexes, all these subcomplexes that you obtain this way, are unions of cycles, and cycles are given by homology. So, here the assumption that the complex is pure is quite important. We can generalize a bit, so we can drop the pureness assumption in dimensions up to four, but we know an example in dimension five where it fails. So, for higher-dimensional spaces, we need the assumption that it is pure. It is pure. And so, a consequence of this is that if you have a complex which is pure or has dimension atmosphere, then we can decide whether it has computable type. Because in this case, computable type reduces to homology questions, and homology groups are computable, so we can decide most properties. Properties. Another consequence is that, in the same case, pure or low dimension, the product preserves computable type. The reason is that in this case, we have a characterization using homology, and homology behaves very well with respect to products. So, in this case, we have the equivalence. And so it raises the questions of what happens in higher dimensions. So, is it decidable in general whether a space has computable type? We have no idea about that. So, it's related to decidability questions about homotopy of maps. So, that's, I think, there are say it again. Oh, so it's a finite simplicial complex given combinator. Yeah, right. And yeah. And for the product, so the example that we gave has dimension 9. So yeah, what happens between 4 and 9 are the examples of lower dimension which do not respect the Not respect the product, that's also another open question. And this is the end of my talk. Thank you for your attention.