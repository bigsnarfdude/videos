Project is making robot behaviors more modular. So, currently, you know, Dan's lab has a wide variety of robots, and they want them to be able to do, apply multiple behaviors in parallel and in sequence. But the current method by which they do this is that they have very talented grad students like Bacillus or Turner Topping, who's in the picture over here. Who's in the picture over here? Um, to kind of fine-tune the behaviors so that they can be composed and write down kind of guard conditions, which would allow you to do one behavior and then transition to the next one. And the goal of the project is to implement type theories, which would give like a formal algebra of robotic behaviors. So they could be composed in parallel and in sequence and hierarchically. So, yeah, so what exactly when we're talking about robotic behaviors, how do we actually implement that in code and in math? And so the dominant paradigm for doing that is are what are called hybrid systems. So this is a pretty dense definition here, but the basic idea is that they're hybrid in the sense that they have both continuous and discrete dynamics. Continuous dynamics are associated to modes, which are Associated to modes, which are vertices of some graph. So here you see like a rocking block hybrid system. It has two modes corresponding to two different sets of manifolds with vector fields. In this case, if it's on its right pivot, as pictured right here, you have a certain vector field. And if it's on the left pivot, it has a different vector field. And there are guard conditions which correspond to when the block, in this case, hits. when the when the block in this case hits the ground it switches from you know the right to the left or vice versa and so um uh associated to each each uh so we call those resets um so those are the discrete transitions so when you hit hit a guard set corresponding to the reset uh there's associated reset map which that sends the state that you were in to the state in the next um continuous system or the next mode um and so so we in our paper we defined a cat So, we in our paper defined a category of hybrid systems whose morphisms are hybrid semiconductes, which you can loosely think of as execution-preserving maps. And this is basically the same definition, except with slightly different setting as what Eugene Lehrman defined in a small note on a category of hybrid systems. I think Eugene's in the audience, so if anyone has questions about that, you can direct that to him as well. About that, you can direct that to him as well. So, yeah, so we have this like base category for talking about kind of execution-preserving morphisms. So, like, you know, the typical structure-preserving maps. But we'd like to do a lot more stuff. And so, in particular, we'd like to talk about templates and anchors. So, a template is supposed to be kind of a low-dimensional idealized behavior. And an anchor is, well, you can think of it. Well, you can think of it as the higher dimensional, you have a higher dimensional, more realistic system. And what you want to do is you want to simulate the template behavior inside the, the, in some anchoring system. And so, as the picture on the left depicts, you have, you typically, you know, you could have multiple different templates that could be anchored in the same anchoring body. And it's kind of a many-to-one map. There's kind of, you could have the same templates in multiple different anchors, and the same anchoring body can implement. Anchoring body can implement different templates, and so we'd like to have a language to talk about this. So, and on the right, you see like this Draboa, which is this little robot. And so, you know, what you'd like to do is, for example, anchor this jumping, you know, simple jumping behavior in the Draboa. And to do that, basically, what you do is you embed, you embed the You embed the lower dimensional template behavior inside the higher dimensional anchoring body in an attracting way. So, in terms of the category three and the mathematics, we were able to write up a definition that captures a lot of these behaviors. And so, kind of one key component of it is what's called a hybrid subdivision, because a lot of times your template could be a continuous system. In this case, it's like you know, some theta dot equals one. you know some theta dot equals one on the circle for example and you would like to embed it in some hybrid system which has non-discrete which has um non-trivial discrete dynamics and so um what you need to do is you have to be able to add discrete dynamics in a way that's captured by the the morphisms of the category and so we were able to do that we could we can talk about what are called subdivisions and we also talk about about about embeddings and and there's a definition of attracting set for hybrid systems as well Attracting set for hybrid systems as well. So we have this nice definition of a template anchor pair. And this example here is an example of embedding a limit cycle, which would correspond to like this vertical hopper in, I think this is a Jerboa. This is a Jerboa. Yeah, that's the Jerboa. That's the 2015 Jerboa. Yeah, the 2015 Jerboa. So that's the one that's in this stick paper over here by Avic. And hopefully everyone can see that's in. Avic and hopefully everyone can see this in Dan. And so this is like this is a two-dimensional, this is a two-dimensional version of the Jerboa. And so, you know, you would actually like to embed it, if you want to actually embed it in the, you know, something that's closer to the real Jerboa, then kind of you want to have multiple levels of templates and anger. So what that corresponds to is some form of hierarchical composition. And so you'd like to be able to, for example, calculate some, you know, this mutual. This mutual subdivision. Imagine you had multiple different, your discrete resets in these two different systems might not, you know, might not agree, might not agree. And so you might have to kind of find a mutual refinement of the discrete transitions. And so it turns out that just by taking a pullback of this. Uh oh.