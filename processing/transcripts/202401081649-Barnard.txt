But I do know how they look fine. But Dante is just like I use and it's just like so now we have tabletop stack sorting method on TV brand methods. Hi, and thank you to the organizers first inviting us all here. Very excited and very excited to give this talk. I know that it's almost five o'clock and we're all kind of brain dead. So I think my talk will be short and hopefully kind of fun. Yeah, okay, maybe a little bit of six. It'll be short, it'll be short. So actually I'm gonna... Alright, yeah, let's play a game. Can you all see the permutation that I wrote on the board? 7312645. I think it's a permutation. 106. I mean, do you have that problem? So we're going to find the maximal descending runs. Okay. So the numbers that are next to each other and they're decreasing. To each other, and they're decreasing as you read from left to right. So I've got one 731, two goes up, and then 645, right? Oh wait, just 6-4. What we're going to do is we're going to sort this, and sorting means changing something that's sort of out of order and making it more in order, but maybe we have to do it a bunch of times. So the way I'm going to do this is by reverse. So the way I'm going to do this is by reversing the descending runs, but I don't move their positions. So the 7, 3, 1 still stays at the front. It just becomes 1, 3, 7. Right, 2 is all by itself. The 6, 4 becomes 4, 6. And then I've got the 5. It's not sorted yet, so I would keep going. Should we do it again? We're having so much fun. Alright, go ahead and take a look. How many descent? Look, how many descending runs are there? Yeah, this is how I teach also. I just make the students do all the work. Alright, so we're going to just reverse all of those descending runs, leave everything else the same. And now I would just keep playing the same game. You see, like, it's going to take us a little while to get sorted because that's. A little while to get sorted because that seven's got to move all the way through now, right? Yeah, okay. So maybe we'll pause from the meeting. But if you get bored, you could just finish sorting this. But you're getting the flavor of what this is all about. How do I make it go? There we go. Partly I did the example because I have a really stupid typo. Sorry. So this is the PopStack sorting map. You just look for all of your max multi-sending runs and you reverse them for permeate. Descending runs and you reverse them for permutations. So, what's kind of interesting about this is you can do it on a poset. So, I want to convince you, maybe, that the game we just played can also be done on the weak order in kind of a cool way. So, if you're not familiar with the weak order, that's okay. You take all your permutations and to say, to move down, how about, from let's say the very top, 4, 3, 2, 1. Very top, 4321. You look for entries which are right next to each other and out of order, and then you just swap them. So it's a little bit like what we were just doing. Maybe we'll do one like this 4, 2, 1, no, no, we'll do here. 3, 4, 1, 2 to move down. In the coset, I find numbers right next to each other which are out of order, like the 4 and the 1, and then I would swap them so that they're in order. 3, 1, 4, 2, which I know is super small, so. Which I know is super small, sorry. So I highlighted the example from my first slide, which I skipped because I was embarrassed by my typo. 4, 2, 3, 1. So if we do this sorting, I'm going to get to 4, 1, 3, which is an orange right here. And it's kind of at the bottom of that little, do you see the little square, like a little Boolean lattice there? And then here, I've got this 4-1, just a little swamp that. 1, so I'll swap that, which actually is the same as the cover relation I just explained. And now I have 2 descents 2, 1, 4, 3, and I do this pop stack sorting, and I'm finally sorted, and that's also at the bottom of a little box. So, this is how one can use that kind of picture to define this pop stack using. Stack using the lattice structure of the weak order. So, also, if you're not familiar with lattices, it's okay. In a lattice poset, for any finite set of elements, you can always find their infimum or their greatest common lower bound. But in the poset we were looking at, what those look like is like the bottom of like a little polyhedral face, like going down to the bottom of a square. And so, pop is what it's doing. Is what it's doing. If you put in an element, you look at all the stuff directly below you, like one step down, and you take their meat. There's this extra thing where you take meat with yourself that's only relevant for the very bottom element. Because the very bottom guy doesn't cover anybody. So taking the meat of the empty set, like conventionally, is supposed to send you to the top, and we want to stay sorted. Okay. Okay. So we kind of just did this, right? 4, 2, 3, 1. Look at the two things it covers. These guys take their greatest common lower bound. Well, that's actually just right here. The square makes it easy. And similarly, this guy, look at the things it covers. It only covers one guy. Take their meat. It's that. Same here. Alright, well then why should we just stick to the map? Why should we just stick to the weak order? We could do other pattern-avoiding permutations, kind of like in Esther's talk. So this is the Tamari lattice. So this is the sub-postet of the weak order consisting of 3,12 avoiding permutations. And I can do the exact same thing. So for example, I could take 3,2,41 and do the 4,1 and do this popstack sorting. So I would take the meat of the two things it covers, and I'd end up here. And actually, the orbit of this guy will be the same as in the weak order, but there are examples where you wouldn't get to the same as the weak order. Okay, so you know, there's a lot of interesting questions we could ask from a dynamical perspective, which I know I have some like experts in the room here, but like maybe a really naive question. Maybe a really naive question is just to say, like, it's a function on my postet. What's its image? Or maybe a slightly different question is, what's not in the image? So what if, yeah, we're having fun. Can you find 3241 is actually not in the image of pop, of this pop-down. Can you find anything else not in the image? There's an easy thing. Quite for you to be in. Yes, exactly. Yes, exactly, the very top. Yeah, there's a bunch of stuff not in the image, though. Actually, the things covered by the top are, none of those ones are in the image either. But you know, as these post-ets get bigger, it's kind of a hard question. What's in the image and what's not. And this is one of the questions that my collaborators and I asked. And for My job. Yeah, oh, yeah. So, no, no, good question. So, I have a postet and I have a function, and the function is this pop thing. So, just imagine plugging everything into pop, and you look at what you get. You don't get everybody. And the reason you don't get everybody is because it's always moving you down. Because you're always getting more sorted, you're always getting closer to the bottom. Thank you for asking. Yeah. Thank you for asking. So it turns out that for the tamari lattice and a whole family of lattices that were also mentioned in Esther's talk, which are these C versions of the Tamari lattice, so for every Coxstrain group, you can make a, it's called a lattice quotient of the weak order, which is like the tamari lattice, has the same cardinality as the tamari lattice. And these are called Cecambrian lattices. Brain lattices. And their images under this POP map are quite nice. And also, I should say, like in the literature, POP has been studied since on permutation since about the 1970s. And the image for the whole symmetric group is not so hard to understand. My collaborators and I were actually kind of motivated to study POPSTAC sorting for quiver representations, and it turns out these sea cambrine lattices really nice. Like, really nice as in that kind of representation theory world. And this kind of perspective led to this theorem. So, this says for any Capster group, for any finite Capster group, and any Capster element C, we're going to take this like C-like Tamari lattice or C Cambrian lattice, and I can tell whether it's in the image of POP if and only if either of the two next conditions hold. I think the third condition is a little easier to read. Conditions a little easier to read. So, I'm going to tell you about that one. So, it says that if you look at your element and the thing that it pops down to, you get a Boolean lattice, which was like in our example, right? You've got like a little square. So you want that. And then the second condition is you need to not be above this element, which we call PI, which is supposed to be like a projective module. But PI, it's not so hard. What it is, is it's the biggest thing. Is it's the biggest thing in a parabolic subgroup. So it's the biggest element which is above the simple generator SI, but not above any other simple. And I'm going to show you a pictorial example. So here's our Tamari lattice. I put the P eyes in blue, but it's very faint. Can you see them at all? You can. Okay, good. Yeah, so. Yeah, so in the Tamari lattice, this guy is the smallest thing above itself and not above anybody else, right? Because if I go one up from it, I'm suddenly above S2. This S2 simple generator, I can go one step up, but after that, I'm either above S3 or I'm above S1. Oh, sorry. Here we go. I could go this way too. Here we go. I could go this way too. There we go. But S1, I can go up a couple steps. This is the biggest guy, which is above S1 and not above any of the other symbols. So those are the PIs. So to be in the image, you can't be above those. And then the second condition is in this sort of pop interval, you should see a Boolean lattice. All of my Boolean lattices are sort of silly. They're all just like singleton guys. But for example, let's see. Let's see. 3, 2, 1, 4, not in the image. And this is a small enough example that you can sort of verify it for yourself. It's not above any of the P's, but you notice that if you compute pop of this element, imagine just going down this hexagon face, you don't get a Boolean lattice. That's why it's not in the image. So. So the other question you could ask is like, how long does it take to get sorted? Right? How many things take does, yeah, how many things take the longest to get sorted? The Tamari lattice, this is not something that we proved, but it was known that for the Tamari lattice, the number of things which take the longest to get sorted is a Catalan number, which is super cute. Also, the number of things in this image is the Matzkin numbers. Matsukin numbers. In general, Dafant, who's one of the co-authors, showed that if you're looking at the whole weak order for any Coxstra group, the longest it's ever going to take you to get sorted is the Coxter number. And this is true actually for any lattice quotient. So these C. Cambrian lattices are lattice quotients, which is kind of like a group quotient, if that's unfamiliar to you. And then we showed that for these C Cambrian lattices, that's Cambrian lattices, that's a strict, like it really does take that long. We constructed elements that take the longest possible time to be sorted, this Caxter number. So n plus 1, the symmetric group. So this is a different Cambrian lattice. This is actually like the one sort of Inadia's, sorry, Nana, and Esther's talk. Sorry, Nana. In Esther's talk, she did the C, she chose. I think you chose the C actually. Yes. The way that we constructed an element which takes the longest to get sorted is by taking the spine of this poset, which is the union of all of the longest chains, and that's marked in yellow, and then sort of popping up, doing the reverse instead of reversing, descending chains. Reversing descending chains, how about reversing ascending chains? So by popping up the spine, you can always find somebody that takes the longest possible time to get swirted. But part of the reason I wanted to give this talk, because there's so many open questions. Like now that it's defined in this kind of PoSET-y language, just like, do you have a favorite POSET? You could just play this game and ask a lot of kind of, I think. I think also POP is in Sage, so it's easy to compute. Yeah, what do you want to know? Do you want to know how long? Is there an upper bound for how long it takes to get sorted? Can you count how many things take that longest amount of time? And then I'm interested in connections to representation theory. So that's it. Thank you. So are there any questions? So are there any connections? What are the connections to representation theory that you're interested in? So I'm interested in if you look at quiver representations and then take certain subcategories called torsion classes which satisfy some closure conditions, you get really nice post-sets from them. Like kind of the way in which like the weak order is nice. They're regular, they're not distributive. They're not distributive usually, but they're like semi-distributive, which is good. And it's kind of nice because they have connections to cluster algebras. So there's a lot of ways to attack problems with them. So I was interested and still am interested in doing more stuff with POP and that side of things. Thank you for asking. We have about four minutes of killing ourselves.