For inviting me to give this talk, and also the previous speakers, which have given a lot of definitions that I shall use, so I don't need to define them again. And so, I'm going to talk about two single sets arising from console fruited trees. And well, this is something we've been working on with Julie, Olivia, Pinka, and Dima. So, okay. So, well, given a tree with a root, A tree with a root, we can cut it in a certain way, which we shall call admissible cuts, which is just to partition the vertices into two sets. Here I am denoting them by U and L, built from upper and lower. We just require that the lower set induces a tree and not a forest, so that the lower set is connected. So this would be an example of an admissible. So, this would be an example of an admissible cut because the lower tree is indeed a tree. But for example, this is not an admissible cut because if you see what's on one partition, the partition which contains the root is disconnected, so it's a forest and not a tree, so that is not an admissible cut. By tree, you can do this from a label tree. For a label tree, an unlabel tree, or a planner tree. You can do it for the three versions, and the three versions give you, you can, in the same way, obtain a single set. But most of my examples are for the unlabeled case because the labeled case tends to be bigger examples and more difficult to visualize. But if you prefer to think about planar trees or about Trees or about label trees that also works. Okay, so this is the formal definition of the simplicity set that is going to be associated to the cuts, the admissible cuts of a rooted tree. So X0 is just the empty tree. X1 is the set of every sub-tree together with those sub-forests obtained from the admissible cuts. What do I mean? What do I mean by that? Like I said, the bottom tree is required to be a tree, but on the top you can have a forest. So then this would be a forest obtained from an admissible cut. So you need to add all of those. And then Xn is a sub-tree with n minus one admissible cuts. Then the phase maps, the zero phase maps, just remove. The zero phase maps just removes the top layer, the end map removes the bottom layer, and all the other maps just remove the cut, but only the cut, the rest remains the same. And then the degeneracy maps are just like duplicating one cut. So for example, if you have like your tree here and you have a cut here, and assume your I mean the cuts are going to. I mean, the cuts are going to be ordered from top to bottom, so perhaps this is your cut number I. Then, if you apply the generous path SI, you just duplicate this cut. So, it's basically going up. Okay, so here is just an example. If you take that top tree, you have cuts cut number one, cut number two, cut number three. At number 3, and then if you want to see what D0, D4, and D2 look like, well, these are the examples. So this would be D0. We have removed the top layer, which is just two vertices. The two red, almost orange vertices have been removed, together with what was cutting them. D4 would be removing the bottom layer, which in this case is just the root vertex. And then D2 would be just to eliminate cut number two. Of course, we also can have like trivial cuts, which is just putting a cut on the bottom or on the top. That is also something you can always have. And well. Well so this simplicial set which comes from a rooted trees with a visible cut turns out to be two signals but not one single. Here's just an example of how you can recover this element from these two together with their intersection. So that's really nice. And well when I first started learning about two single sex it was really difficult for me. It was really difficult for me because I think it's really complicated. But once I saw that you can also obtain a double category, everything started to make sense because double categories for me were much more familiar than single sets. So I'm going to give a lot of examples to what the double category associated to the tree looks like. So well, we have already in this conference, in this workshop, talked In this conference, in this workshop, talked about the S construction. This is just a quick review of how you construct the double category. So the set of objects is x1, the set of morphisms is x2. For each element in x2, you obtain both a horizontal and a vertical morphism. And the set of squares is x3, and you obtain them with this diagram. Diagram. And well, what you obtain is thus, as we all know, a double stable augmented category. And the augmentation is S0 of X0, which in this case is just the empty tree. The empty tree is always going to be the augmentation. And actually, we're going to have a since it's the augmentation, more of a Since it's the augmentation, Morphin seems both vertical and horizontal from and to the emputry. So here is an example because I think all of these things it's really easy to look at if you take an example because otherwise sometimes it doesn't even make a lot of sense. So consider this tree. I shall denote it with graph theoretical notation by k13. It shall K13. It's just this 3, and as a root, I take just one of the vertices which has degree 1. So it's just this 3, and this is going to be the root. Then X1 has as elements the five different rooted sub-trees. It also has the empty tree and the forest consisting of one or two vertices. Or two vertices and no edges. Okay, can you ask a question? Yes, of course. I think of X1 as like the collection of simplices and some multi-category of trees, I guess. Of some category of trees, I like these diagrams look like they're saying, I want to end up with this tree, and here's all the ways that I can take sub-trees and graph them on to end up with the tree I want. I'm not sure I understand. I'm not sure I understand the question. I mean, I have never thought about categories of trees. But basically, you take, I mean, if you want to think of X1, you take a tree, any tree you like, your favorite tree. In this case, this is probably my favorite tree because it's simple enough that you can look at it. Anyway, so you take the sub-trees, which in this case are rooted sub-trees. So you take this one, these two I'm going to consider. These two I'm going to consider different because this has as a root a vertex of degree two, this one has as a root a vertex of degree one. The root is just the vertex closest to the original root. Okay, I have this one and I have this one. So I have five stop trees. But I also need to add this forest because if I cut the tree here, the top layer is this forest. Here is this forest. So I need to add it to x1, and that's it. That's everything x1 is. I'm not sure if this answers your question or perhaps it helps you understand a little bit more. I don't know. Yes, I'm also categorizing. So, for example, this picture of being able to graph two vertices into that Y tree, that's a picture of two zero area multipliers. That's a picture of two zero area multiplication of the operator, in the operator of trees. Model the colored operator of trees, that's just a big infinity opera, and you can go through a case implicit of that look like whose turning vertex is the big tree. Because we can discuss that at that viewpoint around that. Yes, we can talk about that later. Yes. Okay, so um these are the elements of X two. These are the elements of X two which correspond to a non-trivial cut. By non-trivial I'm just saying that none of the two partitions of vertices are empty, because of course for each one of these you can have both the cut, the bottom cut and the top cut, but I also consider to pick to draw those because um and the reason they all have a different colour is because the each one of them is going to represent a morphism in the double category. In the double category. So here is a little bit about how the double category looks like. So it has six objects. It also has the object which is the augmentation, but I'm not going to picture it because if I picture it, we would have too many arrows there. And so I am denoting the horizontal morphisms with this type of arrow and the verticals with the other type of arrow. Verticals with the other type of arrow. And so each element in X2 gives us these morphisms with the same colour. Well, of course, we have more morphism because we have every identity morphism and we have every morphism from and to the augmentation, but I'm not picturing that. So this is what it looks like. I think it's really nice because for me it's much more easier to look at this picture than to imagine like Picture that to imagine like a single set with all of its layers, and so I think this is a really nice example. So, here is just a little sub squares to see how they look like. Of course, we have more squares, but these are the only threes which have two cuts, and such that none of those two cuts are like the bottom cut or the Cuts are like the bottom cut or the top cut, and those give us these three squares. I'm using the same colors as before, so you know a little bit which morphism it was. And okay, so I'm just going to consider one more example because this example is not just for one tree but for any path tree. So I'm going to go to the other side of the board. I'm going to go to the other side of the board, so I can write. So, I'm going to consider the path tree of n vertices, which is just basically you have n vertices which form a path. And I take its root to be a vertex of degree 1. So, I can take this vertex to be the root. So, then I can cut, I can identify the set of codes. Identify the set of codes with the numbers from 0 to n. The trivial bottom cut would be the 0, this would be the first, well, actually, it's from top to bottom. So, this would be the 0, this would be the first, this would be the second, and this would be the nth. And well, the sub-trees are just also paths, but of shorter length. So, this is the path of length n, x1 is the X one is the path path graphs on K vertices with K smaller equal to N plus the MP3. And then if I want to look at X2, I just need two cuts, so I just need two integers, i and j. No, if I need x2 is the sub-trees with one cut, so I have i and j, one of them is giving me the length of the sub-tree. Me the length of the sub-tree, and the other one is giving me which cut I'm taking. And then X3, which is the set of paths with two cuts, we have the length of the sub-tree plus the two different cuts. And then the associated double category, I mean this is an example for a vertices only, looks like this. Here I am picturing the empty subtree. I'm only not picturing the I'm only not picturing the identity morphisms, which are also here. And as you can see, every horizontal morphism goes that way, and I have like every arrow going that way. So I have these ones, but I also have these ones and this one. And the horizontal, the vertical morphisms go from the big trees to the small ones. So here I have every vertical morphism. Vertical morphism, just of this type. And then finally, the squares look like this. So I think it's a really nice double category. And this example for me is really special. I'm going to let you know why just in a minute. And I only also wanted to remark that choosing the root is very important because. Important because if we take the same tree we took before, but now instead of taking as a root a vertex of degree one, we take as a root a vertex of degree three, we obtain something very different. So I'm going to picture the tree with the root at the bottom. So now it looks like this. And we can see right away that this is different because here we have another sub-forest that I We have another sub-forest that we didn't in the previous case. I'm using slightly different notation here. Here, the orange morphisms are the horizontal and the green ones are the verticals. Sorry, I changed notation because I didn't do this picture in latex. So, the program I used for using these pictures is really hard to put like a double arrow here, so I didn't have enough time. So, just think about. Have enough time. So just think about orange are the horizontal and green are the vertical morphisms. Of course, here once again we have the empty string which is the augmentation and every arrow. But I just wanted to show you that it looks very different just for taking a different route. And I think I still have a little bit of time to talk about the associated whole algebra, which I think is also very nice in these cases. In these cases. So, while we already know what a whole algebra is, just giving quickly the definition for what the whole algebra is in this simplicial set case. So, we just have, does someone have a question? No? We just have that as an underlying k vector space spanned by the elements of x1. Of x1. I'm going to denote them by 1b, the basis vector corresponding to an element b and x1. And then the multiplication is given by this formula. 1b multiplies 1a. If I, well, it gives us the sum over all elements e in x one, such that a C B A of one E is the number of elements. A is the number of elements C in. Sorry, this was supposed to say E, and I'm pretty sure this was supposed to say V A2. I apologize, I mean, originally I didn't plan on talking about the whole algebra, but I thought I think I have some time left, so I included it, I think, yesterday, so I typed it in really quickly. Sorry about that. But what is really nice is that let me just give Um let me just give uh well one first observation is that for the whole algebra, all multiplications uh have coefficients 0 or 1. So that's really nice. What I really liked about this is that I really like thinking about graphs. As you may have seen, that for me everything can be represented with a graph or a tree. So I thought, well, why not describe this multiplication with a graph? So just the yellow. Graph. So just the elements are going to be the basis, the vertices for me are going to be the basis elements of my hot algorithm, the basis elements associated to the elements of x1. And then I can just put an arc from one to the other if their multiplication is different than zero. So that's really nice. And another observation is that the whole algebra would be commutative if every arc is symmetric. If every arc is symmetric, right? Unfortunately, that almost never happens. I mean, for example, if you consider a label trees, it never happens. I think if you think just about this tree, but this vertex has a label A and this has the label B, it already is not commutative. But if you consider unlabeled trees, you could end up with something which is commutative. But first, let me return to my favorite. Let me return to my favorite tree, which is again this tree, again with taken as a rule derivatives of equipment. And then this is a description of the products. I mean, here I'm just picturing the tree, but just think of the basis element associated to this element, the next one. And this graph is basically obtained from the graph of the double category. I'm just substituting every time I have a Every time I had a horizontal morphism and then I had a vertical morphism, I am just putting here an arrow from here in between and then that gives me just the multiplication in the whole algebra. And as you can see, these are the only two elements which commute with each other. So one may think for which tree could every element Tree could every element be commute with each other in the whole algebra? And well, it turns out that the whole algebra associated to an unlabeled root tree is commutative if and only if t has no vertices of degree higher than 2 and its root has degree 1. So that means that the only tree for which the whole algebra we obtain is a pass tree with the root vertex of degree 1. So that is why this example was really. So that is why this example was really special for me, because it's the only one for which the whole algebra is commutative. And why is that? Well, it's very easy to see. Let me just move it back to this side. Where is the erase curious? So if you have either a root of the Greek 2 or a Degree 2 or a vertex of degree 3 or higher. When you cut your tree here, what you obtain on top can only be the top part of the tree, but never like the bottom part. And the fact that you have a forest which is always the top and never the bottom means that it cannot commute. The only case where every sub-tree can be either the top or either. It can be either the top or either the bottom of a cut is the path. Because in the path, it doesn't really matter where you cut it. You always obtain something very similar on top and on the bottom. But that only happens when you have a path. I mean, you can have elements which commute. Actually, if you noticed, the two commutative elements were precisely Commutative elements were precisely paths of leg2 and leg1. And those were the elements that commutative. I mean, of course, you can build a tree in which there are commutative elements which are not paths. Yes, but I mean there is always going to be at least one element which does not commute with any other element or something like that. So the path is the only graph for which this is commutative and I think that is all I want to talk about. I think that is all I wanted to talk about you today. Thank you very much. Are there any questions? So if you go back to one or two slides ago where you have this, yeah, this one. So here it looks like the entire graph is one of your vertices in this, okay, your entire tree is one of your vertices in this graph. Yes. But it's isolated from the rest of this graph. Yes. Does that help it in general? Yes. That happen in general? Yes. Why? Because it is never, I mean, there is never a complementary part of it that when you put them together, you get the whole tree because this is the whole tree. Right. And is it possible for more complicated trees that you have multiple connected equipments besides this? I haven't thought about it. That is an excellent question. Um I well, for isolated vertices, I'm pretty sure that is the only isolated vertex. Um I want to say no, but I actually thought it's all about it. But I will, because it seems very interesting. Um let me see if I can just come up with something really quickly. Um I don't know, I don't know. But I'm going to think about it and I'll let you know tomorrow. To think about that, I'll let you know tomorrow. Okay, great, thank you. Yes? So you mentioned that the choice of the root is important. Yes. But for example, if you have the path graph, you chose the root to be one of the end points. If you decide to choose another interior vertex, is there a way to relate it to the corresponding like I think not. I mean I tried like doing a lot of these things when I was uh looking at this. So Looking at this. So, when you here is the reason, yes, you obtain very different things when you, when you're, I mean, if you consider this, you obtain a lot more of sub-forest than in the other case, because, I mean, if you cut it, for example, here, you already have this one, which you don't have if your root is of the group one. But you also have, like, But you also have like this. So you also have this forest. And if you cut it here, you could also have this. And I mean, but they don't even have to be the same length. You can also cut it like this, and then the forest you obtain is a path with a vertex here. So you have way more sub-forest than in the other case. You have much more. So it's much bigger, much more. It's much bigger, much more complicated. And I don't think the other one is even contained here because, I mean, if you consider the path with the root of degree one, if your path is just this length, then the other one is like inside of here. But if you consider the length of the whole thing, well, in the other case you're going to have a really long path as a subject and you're not. As a subterranean here or not? Yes? A background question. What's a diagraph? Diagraph, a directed graph. Instead of edges, you have arrows. That's it. Questions? Take this again. And uh