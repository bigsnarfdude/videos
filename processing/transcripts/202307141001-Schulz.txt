Be able to listen to all of the talks. Really sorry I can't be there in person. And it's, you know, just been really fun to see all of the diversity of topics and how it kind of converges into like a really cool theme. So as the last talk, I'm going to talk about a field that is a little bit different, but still an area where generative modeling is really important. And that is design for manufacturing. So in my group, we're really excited about advances in manufacturing hardware, everything from three. In manufacturing hardware, everything from 3D printers, industrial robots, Holgerman knitting machines. And this is fundamentally changing the landscape of objects that we're able to produce, both in terms of expanding the space of what the shapes can look like and how easy it is to produce one-off designs. So, the goal of my research is to ask: well, in this landscape, what are the next generation design tools? What do they look like? And in particularly, Look like. And in particular, we're focused on a few core pillars. So, we want to increase performance. We want to enable design of objects that have unprecedented capabilities and are designed for specific tasks. We want to bring down the barrier of entry of design to empower more people to design and create objects. And when I mean by design and create, it's not just objects that are virtual, but things that can actually be built and function as we desire once they're part of the physical world. A third pillar that A third pillar that is extremely important to us, of course, when we are thinking about design for the real world is sustainability. So, we want to empower more people to design and create. We also want to ask questions about how expensive it is to produce. And can we include better tools for design to basically empower people to think about the environmental cost of production? So, this is kind of the landscape of work that we do, and as you can see. Of work that we do, and as you can see here, we're really focusing on models from a wide range of domains and fabrication processes. And one of the key questions that arise when we're building these tools is what is the right representation, right? And it's often not just about geometry, it's about geometry, the motion that we want, the manufacturing processes that we're trying to model. And today I want to focus actually on a particular type of representation and tell you a little bit. Type of a presentation and tell you a little bit about why we're excited about this and some of the research that we've been doing in this domain, and that is computer-aided design. So if you look around you in the rooms you are, in most scenes, the vast majority of designs or objects, or at least manufactured objects, have started their lives in a parametric CAD tool. So, in the scene, you know, the TV, the fan, this chair, and literally everything, you know, like, you know, if I look. Literally everything, you know, like, you know, if I look around my room, you know, the toys that were designed, all of these models really start their lives in this parametric cat tools. And this is significant, right? It's significant because it tells us something about what our world looks like, right? It's the way that we design also shapes the kinds of objects that we have. But it's even more than that, the fact that these tools are being used nowadays to design. Are being used nowadays to design also begs the question: well, if we want to empower generative design, how should we impact these tools? So what do the current CAT tools look like? The thing that is special about them is that they're really good at enabling precision. They're really good at ensuring that these models can be analyzed and validated, and they interface really well with manufacturing. So there's this whole field of computer-aided manufacturing that can take shapes, design. Manufacturer that can take shapes designed in CAD and tell us exactly how to build them. So, the representations that we use for CAD are really important. And if we want to make an impact in design for engineering, I believe that this is the domain that we should be looking at. Now, there are lots of things that we can do in this domain because CAD is far from easy to use. In particular, when it comes to ideation and iteration, it's extremely hard to work with these tools. Uh, with these tools, right? Um, they kind of trade off uh precision, right, for the easeability of use of ideation of iteration. Uh, so in the context of the work, you know, that I've seen in the past week, everybody's talking about, you know, next generation design, how can we bring this to CAD, right? How can we empower the kind of generative tools that you can go from text and sketches to actually build models that have the precision that you find in the CAD tools? Precision that you find in the CAD tools. And if we're thinking about design for manufacturing, again, and this came up in other domains, it's really not just about generation, but it's about manipulation and controlled manipulation. So how can you do that with these types of representations that you see in CAT? How can you enable composition? And ultimately, how can we enable optimization? And design optimization will also hinge on the ability to understand what are the space or feasible variations. What are the space or feasible variations that we want to explore? And I believe that this domain is really exciting because it's really not just about creativity, but also about understanding precision, imposing constraints, and dealing with these types of representations. So what I want to focus on today is kind of give you a brief overview of what CAD representations look like. I want to walk you through some of the core challenges of this domain and talk about some of the more foundational. Domain and talk about some of the more foundational work that we've done in CAD representations that hopefully will enable us to design tools like this. So let's dive in. So what are CAD, what does CAD look like? Well, in CAD, when you design a model, you start by a sequence of operations that build the geometry bottom up. So for example, I'll start by creating a sketch, and then I'm going to extrude that sketch by a certain depth. Depth. I can then continue to select a face of the sketch, a face of the resulting model to do another sketch to extrude it again. And here I'm doing this fillet, which I am rounding, but I'm rounding a specific edge that I selected. This is basically, as you are interacting with the tool, you're generating a program, this sequence of instructions that build the geometry bottom up. So that's the first fundamental representation of CAD. CAD is a program. Well, but then how do you visualize this? Well, but then, how do you visualize this program? Well, there's this representation called the BRAP or the boundary representation. And if you're in computer graphics or vision, boundary representations probably just mean surfaces to you, which is fair. But in CAD, boundary representations mean a very specific type of surface, which is one that is composed of these topological elements that are distinct, which are faces, edges, and vertices. And of course, you can convert BRAPs to other. Course, you can convert BRAPs to other geometric formats like meshes or point clouds, but those are not the representations that we typically use in design for manufacturing. We typically really care about working with BRAPs. So I really want to focus today on these two representations is the program and the BRAPs. And just for motivation, the reason why we really care about the BRAPs is because when we're thinking about modeling in CAD, again, remember how I talked about precision. So you want to, for example, round a face, you need to know which face you're Round a face, you need to know which face you're rounding, and you do that by selecting a face over the BRAP. If you want to do assembly of components, you want to ensure that things align together, you usually want to refer to a specific face where that happens. And again, for computer-aided manufacturing, if you want to give rules of how things are built or assign materials, you usually need the precision of your apps. So, how do you learn from these representations? How do you enable generative design? Enable generative design in these representations? What are the challenges with these representations? So, I want to spend, I'll break this talk into talking about programs and then BRAPs. So, CAD programs are one of the fundamental interesting aspects, I believe, in CAD programs is the aspect of references, right? So, for example, I mentioned in this example, if I decide to round this face, the way that I do this in a modern CAD tool is I select a tool is I select, sorry, around an edge. I select an edge and I say, hey, fill it that edge. And I need to reference that specific edge. Now, this is fundamentally different from what a lot of people think when we talk about CAD, which is constructive solid geometry. So constructive solid geometry is a sequence of Boolean operations that can also produce this shape. But this is fundamentally different than using this concept of references. And the reason is because if I use a reference, If I use a reference, I can make this rounding, this fillet, right, rounding of this edge in one operation. Versus in constructive solid geometry, you can see how hard it is to do these sequence of operations. And I need to do this alignment by hand, which is hard. Imagine a generative model trying to actually understand and then do this computation of exactly where things should align, right? So I can round this edge. The other thing is editability, right? If I now do. Right, if I now change the fillet radius, I can just go and apply this again, right? Versus if I'm recomputing everything with constructive solid geometry or CSG, I have to do a lot of computation. So references are really important and they are one of the fundamental aspects of modern CAD. However, there are lots of challenges with working with references. And that is because once the models start to change. Once the models start to change, and particularly once they start to change topology, a lot of the times these references break. So these are some examples from OnShape. I'm changing this model. You see this edge kind of disappeared, right? And really what I expected was this thing here on the bottom that, you know, it disappeared. Okay, I don't have it. But then it kind of infers that the edge went somewhere else, right? And then does this chamfering, which, you know, just doesn't. Chamfering, which you know, just doesn't look right. Um, and even worse things can happen. So, here I'm just trying to remove, uh, like I'm changing this one length. So, I want to actually close this circle. Um, and now I have, you know, a model made of like three parts. Um, so this is really annoying for dealing with cats or even interacting with cats, but you can imagine that in AI tools that deal with this. AI tools that deal with this, doing these verifications becomes really hard. So, we've been doing some work in our group about this. We've done some work in being able to differentiate through CAD programs to allow this type of editing. But here, what we did is we had to impose several constraints to avoid the referencing problem. But more recently, and this is a work that was just published this year at PLDI, we proposed a novel DSL. We propose a novel DSL that basically solves this breakage problem in CAD references. And the idea is that basically we have these operators that tell us where things are coming from in a graph. And I'm not going to go through this. You're welcome to look at the papers, but we have formal proofs that this allows you to basically select any topological entity that you care about. You'll get smoothness, so you're not going to see this kind of. So, you're not going to see this kind of discontinuities when you change the model, and that you're able to distinguish any type of topological change. So, if you're interested in working with these types of and using DSLs and languages to do design and you care about CAD, I strongly encourage you to take a look. This, you know, we have an online implementation of the CSL, and we show that it kind of And we show that it kind of works in many different domains. So, this had programs. I want to make sure I have time to talk a little bit about this other representation, which is the BRAP. So, these programs are really nice because they're constructive, right? But ultimately, they produce these shapes that look like BRAPs. And there's lots of stuff we want to do once we have a BRAP. Do once we have a BRAP in terms of analysis and fabrication. But working with these BRAPs is extremely challenging for two key reasons. The first is that the data format is just hard to learn over. And the second is that even though we have tons and tons of CAD data, right? I mentioned like, look around you, everything in the world was designed for CAD. So you can imagine that you have a lot of CAD data. So, you can imagine that you have a lot of CAT data out there, and that is true, but most of this data is unlabeled. And actually, the data that you have, most of it is made by hobbyists. And the reason is, well, companies design things, their designs are their IP, right? So, you know, the car you drive probably was designed in CAD. You're never going to find that model out there, right? And so, the models that we have usually are pretty rough, and they won't have the labels for the kinds of And they won't have the labels for the kinds of tasks that we care about. Is it to guide us for assembly or material identification, manufacturing rules, whatever it is? We often don't have those data sets. So in our group, we've been working again on developing some fundamental tools for addressing these topics. And I want to focus on those next. So to do this, first So, to do this, first, let me motivate some key challenges of the BREP format. What does it look like? So, the BREP format includes these faces, edges, and vertices. But what's important is that associated with each of these, which we call entities, there are some parametric geometry. So associated with this face, there's going to be a surface. But notice that these surfaces are infinite surfaces without boundaries. The only way, so, for example, associated. The only way, so for example, associated with this face is going to be an infinite plane. The only way that you know what the boundary is is by looking at the adjacency. So you have adjacent edges, and these edges then tell you, okay, then this is bounded. And then what bound, and then again, these edges are infinite lines, but we know how to bound them because then we know the vertices. So really, in order for you to interpret a BRAP, you need to not only understand. You need to not only understand the surfaces associated with each entity, but you also need this topological graph. So, how do we learn on BRAPS? We need to learn from this topological graph. And this is great because this creates a representation that is compact. Again, infinite resolution, easy references, as we mentioned before. But if you have a representation like this, even to visualize it, it's expensive. It's expensive. Like the way that you go from a B wrap to a mesh or so that you can render in a CAT system, you need kernels that are quite non-trivial and handle a lot of corner cases. So it really doesn't have a straightforward geometric interpretation. So I feel like I'm running out of time, so I'm going to go quick on this. I want to highlight two projects that we did here. One of them is to, you know, One of them is to create a representation learning approach for BRAPS, which basically deals with the fact that you have this graph, but it's heterogeneous. So you have faces, edges, and vertices, which make this hard. And also you have these pretty big graphs. Like you basically need a wide receptive field in order to understand neighborhood information, because to go from a face to another face, From a face to another face, the graph goes from the face to an edge, the edge to this loop of edges, and then to the other edge, and then to the face. So that creates challenges in terms of training. So we propose what we call SBGCN, which maybe not the best name, structured BRAP DCN. The idea is that it understands that there is this hierarchy, and this allows us to pass messages from vertices. Allows us to pass messages from vertices to edges to loops to faces, and then we do some additional message passes between faces to kind of capture the neighborhood information. So this is really cool. I mean, there's some other work on learning from BRAPs, but this is the only one that actually is not just focused on faces, but allows you to learn all of these different topological entities, including edges and vertices. And this is really important for many applications. For many applications. So, we've done some work on learning to assemble. And again, this requires learning on all topological entities. And this year at SIGGRAF will present some work on also learning correspondences. And this is really important when you have a model, you update the model, how do you find the right correspondences between the BRAPs? And this is the kind of work that enables collaboration across systems because once you find correspondences, Systems because once you find correspondences, you can propagate these references. Again, so this will be presented at SQL later this year, and this is again done using SPGCN. But as I mentioned, well, okay, so this tells us how to work in this data format, but what about the fact that we have lack of labels? So if we go back to If we go back to the pros and cons of VRAPs, we notice that one of the key challenges is that it really doesn't have a straightforward geometric interpretation. So we ask ourselves, well, could we learn to interpret this geometry? So instead of having to do all these complex computations, can we look at a raw VRAP graph and then learn what the shape should look like? And can by doing this, can this help us? Can this help us with other downstream tasks? So, this is a work that was just presented this year at CDPR. And the idea was basically to do self-supervision to learn to rasterize. So, you have a large data set of unlabeled BRAPs. What you do is you basically learn an encoder that basically teaches you, you know, basically you learn a problem of versatilizing, and then the encoder that you have. And then the encoder that you have trained then can be used for other distream tasks too, for fuchsia tasks like segmenting BRAPs, figuring out machine instructions, or even doing classification. Okay, so this is kind of an overview of some of these techniques that we are developing in our lab to basically enable many different downstream tasks that work with CAD representations. That work with CAD representations. And I just want to encourage you to think about these problems when you're thinking about generative design, because it's really important when we're thinking about design that we try to also consider what are the things that we need to do to create shapes that not just look nice, but that are actually manufacturable and actually have the precision that we need. Have the precision that we need. I'm fascinated by design by engineering because I think it kind of combines these two aspects of human thought. Like, on the one hand, we do this analytical reasoning, functionality, understanding, optimization to really get to the designs that behave the way we want to behave. But it also needs to combine an aspect of creativity, of design iteration. And I think generative tools that kind of try to combine both sides of their brains are really exciting and the manufacturing domain. Really exciting, and the manufacturing domain is really rich in problems like this. So, with that, I'll thank you, and I'll open for questions. Sorry, I can't really hear you. Okay, maybe I'll just note because I don't know our voice anymore. Let's take questions from the audience. Yeah, so thanks for the great presentation. Thanks for the great presentation. So, the last project you mentioned, you can convert on level data set into labels like this representation. But the question is like, how do you generate the representation that had different types, different number of phrases, different number of vertices and natures? Okay, I'm having the same problem of understanding, but you're talking about this self-support. You're talking about this, the self-supervision problem. Okay, so what we're trying to do here is, so the key, so what we're trying to do here is learn to render. So we have a large data set of unlabeled CAD data, right? And our goal is to really learn to rasterize. So we take a BREP model and we encode it and our decoder basically tries to create a rasterization. And then so we don't really need labels. Don't really need labels in this case, right? We are basically just using a geometric loss function to make sure that the RESTRISE image matches the BRAP. And then the idea is that this encoder that we learn, because basically what this encoder is doing, it's learning about the format itself, right? Because it's understanding that if we have what this graph really means. This graph really means in terms of what the shape should look like. And by doing that, it allows us to. So now if you use this encoder as opposed to just using SPGCN or other BRAP encoders that exist, it performs really well. It performs much better, particularly when you have, in the few shot domain, when you don't have a lot of data. And the reason is because this encoder actually understands the representation. Does that answer your? Presentation. Does that answer your question? Any other question? Yeah. You have to speak up.