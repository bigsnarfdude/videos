That I gave on my to set it up, but now everybody knows everything now. So first I'll say what these are free on and that's an outer phase complex. So an outer phase complex is a functor. A functor from this category of inert maps to spaces. So this is the one that was like sub-interval inclusions. It sits inside of I or delta. And now I can't remember if I was writing bars. Now, I can't remember if I was writing bars on my categories on Monday, but I guess no one else remembers either, so it's probably safe to be inconsistent. So one of these things is essentially a diagram like this. So in, you know, from the usual simplicial maps, Simplicial maps, we only have the top and bottom face maps. Those are the only generators that are around. So this is exactly the data of what it out of these. Exactly, the data of what an outer case complex is. And what can I do? Well, I take one of these guys, and if I call this inclusion J, then I can look at the, well, I could look at either the left or right con extension. If I'm talking about free, they should be looking at the left con extensions. Right, so take this thing, you get a new simplicial space, and that's it. So theorem, this is always at the composition. This is always a decomposition space. I want to say a little, you know, I want to say today I want to say something about this. Why is this true? What's the idea? And that's these are the kinds of simplicial spaces that are in the title. So they're free, they're free on outer face surfaces. And we'll see some examples of these as well. Examples of these as well. I guess I should also say: if you know what this is, I guess if all of these AIs are locally finite, then this is also a Mobius decomposition space. If you don't know what that is, then ignore this. So let's just talk about it. So, and here are my new spaces. And here are my name spaces. We could think in sets. So you can think in sets if you want. So maybe let's just say what this thing is in degree k. Well, the usual kind of co-limit formula for non-extensions. All right. Give us what I want to write AM so you look over some comma category of maps from bracket K to J. This can be simplified a little bit. So if I have a map from From K into something else. Remember, there's a unique active inert factorization of that map. And of course, this is now a map in this category K. In this category K, this common category. And so actually, if I just look at inert maps for active maps out of K, that's an initial subcategory of so this turns out to be the sum over Active maps from K to M from A to M. Okay, so this is actually, there's an initial discrete subcategory, it's basically. And I want to actually, this is convenient, but I want to write it a little bit differently. The sum. Of our lists L1 and 2L K of A L where L is the sum of the L x. And so for this, so these are all integers. So, this is depending on some coincidence of active maps and sequences of natural numbers. And maybe I'll put that down. And all this is doing is, you know, what does an active map do? Well, I need to know where I send the different points, and I'm looking at the difference between those. So alpha. You can get a sequence from an active map, and this is just exactly the same data as an active map. So should I think of this initial A, this I diagram A, as some kind of globular thing with source targets, or how should I imagine this? You can think about it. So I commend it. Did they have the same equation? Oh, right, yeah, it's not the same equation. Right, yeah, it's not the same equation. But the source of the target and the target of the source. Yeah, right, it's different. So the question is, how should I think it's the same? So maybe we should save it for an example. Save it for an example. I could mutter something, but maybe it's not as helpful as seeing an actual example. Right, so why is this a decomposition space? Maybe I'll rewrite this as let's pretend we're working in sets. Sorry, real quick. Sorry, real quick. Uh does the the category I contain all of the inert maps in Delta? Yes. Okay. Yeah, so those can be, you know, they're generated by Okay, so you can kind of think of it as having like sort of inert faces with the same. Yeah, yeah. You know, these, so what are these, like what do del zero and del n do? They include up one level, but either forget the level. Up one level, but either forget the first or last. And if I want to do some arbitrary sub-interval inclusion, I just compose a bunch of those. So maybe I'll write this in form like this. For this little a as an element of a sub l. So, what does the two-sQL condition look like? Maybe I'll just do one. So, why is this two-sQL? We'll write a question mark. So let's start with a couple things. So something in x2, this would be like an a, a one of two. And something in x2 is the m1 n2. The interface maps, these are the ones that have been freely added. These are pretty simple to describe. So this just takes my element here to A L1 plus L2. And the other one, B, M1, M2, I'm doing an outer face map. I already had those around. What this does is it actually drops off M2 entirely. Now, E is an L, is something living in A M1 plus M2. And this outer face map, this bottom face map should be utilized. Bottom face map should be utilizing the structure of my outer face complex that I started with. And what does this do? It actually just applies the outer face map that I had enough time to get done. So this is what I start with, and if these are equal, Equal, then the thing that I have to put up here, there's only one thing that will work, and that is B. Look at how bad purple is and how hard it is to see. Alright, so there's the only thing that I could possibly put there. The only thing that I could possibly put there. So, this D2 map is going to add these together. That's going to give me the M2 that I expected. And when I do this D0, it throws away this M1 as I expect. So, this is the only possibility. So, that's why this is a pullback. But let's go to examples. But let's go to examples. And obviously, you need to do something similar, but it's the exact same idea in all the higher dimensions. That should keep the formula. First example, let's take the terminal object, so something that's Let's take the terminal object, so something that's a point in every degree. All my ALs are points. So this was the K remember. This is just a natural. This is just the natural numbers sort of a media for what I or whatever. That's an easy case. Second case, for the sort of things we're looking at, is I could take, let's pick some alphabet. Let's pick some alphabet. Well, let's write a m words in an alphabet A1. A1. So just pick some alphabet, just take all words. And then these outer face maps, this is an outer face complex by throwing away the first or last letter. Right, in some way. That takes me one down. And if I run through this formula, what do I get? Well, x1 is going to become just the set of all words in the alphabet. Um I guess X zero is I guess x0 is just a point, since a0 is a point. x2 is going to be words with some split in the middle. We're at the end. So these are like a one for a n. And these are like a1 ani, an i plus one a n. And then x3 is going to be words with more splits, two of them, and you throw away the splits. So this example, too, this is actually Siegel. This is just the Freeman. The free mono is an A1. And of course, not only these are two single, so we can mess around with this example. So two prime. For 2' I could take the exact same A complex that I have here, this outer face complex, and replace 2 by truncating. Right, just cut everything off and only think about words up to length M and then throw away all the words that are higher. So, this is something that's definitely not SQL. Words of land most M there you go. So there's a nice thing. This turns out to be a decomposition space. So it's not. So it's not once equal because I can't compose things. Maybe my word gets too long. But I can break things apart. And I can do lots of tricks like this, right? I could easily take sort of sub-objects of some given outer face complex as long as I'm corporately connected. I can truncate somewhere. I can shift them up. I can shift them down. Shift them up, I can shift them down, I throw away the bottom. You have a lot of flexibility, and you get a lot of examples like this. And one such example is to take AM E length m words in the images. Some graph and this is maybe oriented to graph. And if you run through this construction with this, you just get the free category on the graph. And this example is actually all of the ones of these free decomposition spaces that are categories, they are all free on the ground. Categories. They are all free on the graph with this. So three is this example is sort of the general one that gives you actual SQL objects instead of good for examples. There's a lot more in the paper. Uh, so here's a theorem. Billy? Did you say that? It doesn't. Say all the one SQL example, which you get, all the one SQL predecomposition? Yeah, so if JShreek of A is one SQL, then A is actually right con extended from Write con extended from the graph thing. So it is a graph. Or it is linked and words in a graph. So theorem. So Jake Shriek uses an equivalence From, well, pre-sheaves on I. And we know this lands in decomposition spaces. And we also know that the terminal object in pre-season I goes to Bn, so this actually lands in a slice. Lens in a slice. And I guess if this is going to be an equivalence, I should restrict the maps on the right. So this is decomposition spaces and cold maps that we saw earlier this week. So there's a question. Why does this actually let you know? Why do you get cold maps out of this? Maybe that's the most basic question. Why is this actually the right target? So y is equipped AB since X and Y are both decomposition spaces, we actually only have to check one pullback. This one so what did I start with? I start with some AM here and I start with some E L one L2. And that just sums, and this one goes to sort of keeps that component the same. So the only thing that we could possibly put up in the upper left is A comma L1 comma. So there's a unique thing that goes up there. I mean, I'm doing this all in SATS. That's also true. So this is indeed called back. So I'm not going to prove this today. Got like two minutes, I think. I'm not going to do that. But I will tell you what the But I will tell you what the what our main ingredient is for proving this. Main ingredient for proof And that's another theorem of Joachim and I, which says that if I have any simplicial space then, if I look at the category of Category of cool maps over my simplicial space X. What can I do? So if I have a simplicial space living over X, I can apply the edgewise subdivision functor. Just maybe I'll give our inclusional spaces over X. So I can apply my edge subdivision, get another some partial space where the cough is edgeway subdivided. This plans mean right vibrations and And actually, this map is an equivalence. So every quilt map over any simplicial space gives you a if I apply this edge right subdivision, I get a right vibration. Turn out to be the same. And I sort of like this because this is a really nice theorem, because it says a lot of what you want to learn about eagle spaces, you can actually get away with looking at right vibrations of coordinate over categories. So for example, if x is a decomposition space Then you have to write subdivision of x is a siegel space, and this is just pre-sheaves. I should not have erased that zero. This is just pre-sheaves. We're sort of all of ten. Yeah. Maybe you can update. Maybe you can get one minute to explain the connection. Yeah, so the only connection is that what's the connection with the theorem of for some reason erased? It's that the subdivision of the n is this category of numeric maps. Is this category of numeric maps? So, what this is doing is saying if I plug in one of these 3D composition spaces, then decomp over Bn is equivalent to pre-shees on the subdivision of Bn, which is delta of the universe. Now, this isn't the map I described for this subdivision functor, but you can show that these end up being four questions.