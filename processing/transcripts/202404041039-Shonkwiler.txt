Um so um thank you so much to the organizers for inviting me. Um this is the first time I've I've been here, so it's it's a great place to go. Um and yeah, so this talk, you can, if you go to that domain, you can see this talk for yourself, the slides at least. So, Jason told you about generating random polygons efficiently. And so, what I want to talk about is Talk about is an idea I had with a graduate student a few years ago about like using just generating huge numbers of these things to look for examples of complicated knots with very fuse edges. So Jason has already kind of told. So the first part of Jason's talk about the polytope and sample. The polytope and sampling and all that stuff was based on symplectic geometry. And so the idea is that somehow the symplectic stuff gives you these efficient algorithms, not as efficient as cobars, but they can do some things that I don't think can be done in cobars yet, in particular for generating knots and confinements. So now instead of just having a polygon, I'm going to say, well, this polygon had better be stuck in a very small sphere. And the idea was. And the idea was that, okay, well, if you require your polygon to be stuck in a very small sphere, that's generally going to make your knot, the knot that it is, more complicated and also much more likely to be prime. And I think maybe Klaus and Uda are going to talk about similar things this afternoon. And so, you know, most of the time we're thinking about, you know, sampling these things and doing things like computing expectations of quantities, the chemists or the physicists. Of quantities that the chemists or the physicists are interested in. Trying to do some sort of Monte Carlo integration kind of scheme. What I'm going to talk about in this talk is absolutely not that. I kind of don't care about sampling from the correct distribution. I just want a way of generating a bunch of complicated examples and seeing what I have. And in particular, I'm going to focus on two very simple not invariants. So, this is in the nature of So, this is in the nature of doing computations and experiments to actually prove theorems and not theory. And so, the first invariant is the stick number, which is just how many edges do you need to make the polygonal version of your knot. And here's a six-stick trefoil, and six is the minimum you can do it with. So, and all other knots have stick numbers strictly greater than six. And then, okay. And then, okay, here's another couple of elementary invariants. So let's say I have a, I choose a unit vector, and I have a closed curve and space, and then I take the, I think about projecting that parametrized curve and space onto the line spanned by the vector v, and I count the number of local maxima. So if I project onto this line, I see two. Line, I see two local maxima. If I project onto that horizontal line, I see three local maxima for this particular curve in space. And I'm going to call the number I get, you know, b sub v of gamma. So gamma is the curve and v is the direction. All right, so then if I, for any curve, if I take the min over all directions, that gives me the bridge number of error. And if I take the map, And if I take the max, that gives me the superbridge number of that curve. And if you take the average, you get a number that's proportional to the total curvature by Kern Construction. So bridge number and superbridge number are sort of bounds on total curvature, if you think like a geometry. Can I ask a question about the superbridge number? Can't you add an arbitrary number of wriggles in order to. So this is for a fixed curve? Fixed curve. Oh, for a fixed curve. Yeah. But you're just looking at different projections of that. You're not looking at different. I'm about to make it a non-invariant. But so far, it's just a number you can associate with any parameterized group. This is, yeah. That's why I have a min here and not a max. So to make it an invariant, now you take the min over all possible realizations on your nut. So the bridge index is the min of. The bridge index is the min of the bridge number over all possible realizations of your not. And the super bridge index is the min of the super bridge number. So it's a min of a max. Which, if you think about it, is kind of a problem for doing anything. Because taking a min of a max, how the hell do you come up with balance for that thing? Now, in this case, for the Now, in this case, for the figure 8, the bridge index, of course, is 2. The superbridge index turns out to be 3. So, those projections that I showed you were actually kind of the best design. All right, so I have two, well, three, but I'm not really going to talk about bridge index because it's much better understood. So, I have these invariants, the stick number and the super ridge index, very poorly understood, very easy to define. And I claim that this is most of what was. That this is most of what was known as of when I started thinking about this stuff. So Kuiper defined the superbridge index and showed that it's bounded strictly greater than the bridge index. And then it's, I guess I attribute this to gen, although it's kind of easy to see that it's less than or equal to half the stick. And then 3.1 and 4.1 definitely have superbridge index equal to 3. Equal to 3. These knots might, although they probably don't. The conjecture would be that the superage index of all of these knots is equal to 4, but it's not known whether it's 3 or 4. And every knot that's not in this list definitely has superage index at least 4. There's only a finite number of knots with superage index equal to 3. There are infinitely many knots with superage index equal to 4, take any 2p towards. So, and you can see, like, we don't know. So, and you can see, like, we don't know the superage index of 5,2. This is ridiculous. And then for stick number, so these knots, okay, 3, 1 has stick number 6, 4, 1 is 7. The rest of the knots on this list have stick number equal to 8. And Jorge Calvo, in sort of heroic work, showed that every other knot has stick number at least 1. And then, yeah, so Kuiper and Giotto. Yeah, so Kuiper and Gyotek Jen and then Colin Adams and various students and other people computed. So Kuiper told Super's index for all torus knots, and the stick number is known for PQ torus knots where P and Q aren't so different from each other. P is like, or Q is less than 3P or something. So, but in general, these are the only infinite families for which either of these invariants is known. All right. All right, so I looked at this situation. I mean, many people have looked at this situation and said this is ridiculous. How can we not know the super index of 5, 2? How can we not know a bunch of sig numbers for pretty small knots? And I was like, okay, let's find some examples. And the idea was: okay, well, I know how to generate random, you know, say nine guns. Well, if I can find some nut with, you know, some You know, some new knot with nine sticks, well, then by this Calvo theorem, I know the stick number is exactly equal to nine, because it can't be less than nine. And I found an example with nine, so it's nine. And in general, of course, examples give you upper bounds. And then the idea was, okay, so I know how to generate polygons. So this is sort of the summary of what Jason already told you, so I'm going to skip through it somewhat quickly. This is maybe a picture to have in mind of like, so Jason had. Jason had these two families of coordinates, the d's and the thetas. And think of the d as the distance between these two non-adjacent vertices along the polygon. And the theta is somehow like the symmetry of the space of n-gons. So this is some, I don't know, 30-gon or something. And in the space of 30-gons, I have the symmetry where I just rotate, you know. Where I just rotate the first 10 edges around the vertex between or the axis between vertex 1 and vertex 11. That's the symmetry of the space. And notice there tells you, well, you have a continuous symmetry of the space. There should be some corresponding conserved quantity. And of course, the conserved quantity is the distance between those two points. So here's sort of an abstract picture. I have this abstract, in this case, 7-gon, but in general, n-gon. I think of the distance. N-gon, I think of the distances to all the non-adjacent vertices to that one. That gives me some list of D's, and then I can start folding around those different axes, and I get this sort of torus of symmetries of the space. And the fact that those chords don't intersect in the sort of planar picture of your ingon means that those rotations commute with each other. So it's really a tolerance. So, it's really a torus function. And so, you have these n minus 3, you know, the lengths of these axes and the angles that you're bending around them, those are the coordinates that Jason is doing. And again, the theorem is that these things are uniform on the dimensions. And so, sampling equal outer ingons is equivalent to sampling points in the convex polytopes of the Ds. That's, of course, the hard part. Sampling random angles is easy. This is. This is again sort of a picture that Jason already showed you. You have these triangle inequalities. So, this is a five gon. Here's the corresponding polytope that you get for all the edge links in one. Here's a picture that Jason already showed you for six gons, and so on and so forth. Okay. And the smart way to sample these polytopes is using this progressive action angle method that's basically change coordinates by some linear change of coordinates. Change coordinates by some linear change of coordinates, rejection sample the cube, and you're surprisingly likely to get a valid sample. Okay, so let's think about confinement. So the motivation for this was things like that Diao and Klaus and Uda talked about, we've been talking about for years, about how do we get polygons in confinement? And the biological motivation is things like viral DNA is jammed into these capsids and it's of course not a free-floating. Capsids, and it's of course not a free-floating thing. It has to be very highly compressed. So, what's the model for that? So, here's a simple model for this. So, we're going to sample polygons in what I'm going to call rooted spherical confinement. So, rooted means that one vertex is fixed at the center of the sphere. Now, that's kind of obnoxious. You kind of, it'd be better biologically if you didn't have this restriction. But be that as it may. But be that as it may. So I stick one vertex at the center and I say everything has to be contained in the sphere of radius r. Well, if the vertex I stick at the center is my special vertex, then I'm just saying, well, all of these distances have to be less than r. That's a very easy linear constraint to have. Okay. And so in terms of the polytopes, And so, in terms of the polytope, so the green is the polytope for unconfined equilateral 5 guns. And then the orange, I'm just choosing values of r between 1 and 2. And you see, it's like the intersection of the orange and the green is actually the polytope corresponding to the confined. And here's the picture for six guns. Okay. So now you have this sort of weirder polytope, which is the intersection of this hypercube and this already slightly weird thing. What can you do? Now, what I would love to do, and haven't done, but I have a student working on it, is find a way of directly sampling that polytope, either by rejection sampling or doing some clever change of coordinates or whatever. But in the absence of something, But in the absence of something clever, the only thing that I really need to know for what I'm about to tell you is it's a convex polytone. Period. And there's Markov chains for sampling points in the limit uniformly from convex bodies. And so one example of such a Markov chain is this thing called hit and run. So the idea is you're at a point, you choose a random direction. That direction and that point determine a line through the point. The intersection of that line with the convex polytope is an interval. Now, sample a point uniformly from that interval. That's a new point in the polytope now iterated. And so that's a Markov chain. And it goes back to the early 80s that, you know, for any convex body in general, but in particular convex polyton. Body in general, but in particular pine electropolic tube, this hit and run chain is what's called uniformly ergodic with respect to Lebesgue measure. So, what that means is no matter what your starting point is, if you run this long enough, it will approach Lebesgue measure. Of course, that is the problem that all Markdown chains do, that you're like, well, you know, how do I know whether it's converged? How many samples do I need to get before it's converged? Do I need to do burn-in? Do I need to skip every, you know, skip a thousand samples before I actually record one? Samples before I actually record one, and so on, and so forth. So, in terms of sampling, this is kind of annoying because you have all these convergence issues. We much better have a direct sampler like Jason was talking about, where you just like, you get something, it's guaranteed to be from the uniform thing, no burn-in, no waving, no, whatever. But this is certainly a way of generating points stochastically in whatever your polytechnic is. All right, and so in particular. And so, in particular, this gives you a uniformly ergodic Markov chain for simulating random equilateral ingons in rooted spherical confinement. And this is implemented in PL Curve. I don't think it's in Cobar's link, but anyway, it's in PL Curve, which is JSON et al.'s C library for generating messing with random polygons. And you can generate things like this. You know, generate things like this. Just more generally, like the same trick is going to work in any torus polygon. Okay, so the upshot here is like we have a way of pretty quickly generating lots and lots of polygons and confinement, very tight confinement. All right, so this is the braindead part of the strategy. I mean, the strategy is kind of. The strategy, I mean, the strategy is kind of overstating it. Some of the strategies just like not the same. Generate trillions of these things and see what you get. I think I generated something in the order of like 2.3 trillion of these things before I sort of stopped. But, and it just not on any big fancy computers here. So here's the pipeline. Oh, wow. That was greenish. I turned yellow. Okay. Turned yellow. Okay. So here's what I did. So, well, I say I. This is my student Tom Eddy, who is now a data scientist at the New York Times because he decided that a PhD wasn't worth the effort. So this was his master's thesis, by the way. Just very impressive student. So we generate a bunch of things using PL curve. So PL curve will tell us, you know, here's the vertices of the thing you generated, here's the PD code, and it also can be. Here's a PD code, and it also can do Humphly. Humphly PT, I guess I should say. So we get that information. We also fed the PD codes into SnapP and pulled those hyperbolic volumes. We didn't do this for everyone, like if the Humphly was trivial. We were like, well, it's not worrying about it. But for things where we got a Humphly where it's like, well, that's probably, it looks like a hyperbolic knot. Probably, it looks like a hyperbolic knot. We can do the hyperbolic volume just to have an extra check of what it was. We took this information, we plugged it into the PyNot ID database, which seems to be offline these days, to see, okay, do these two numbers uniquely determine the knot if you assume that the knots you're going to get have fewer than 16 crossings, which if you're talking about nine guns, they definitely will have fewer than 16 crossings. And if it, you know, along And if it, you know, almost always uniquely, those two pieces of information uniquely determine the knot. And so that gave us a list of vertices and a not identification. And then whenever we found something that we thought was new, we fed the vertices into not plot, which was Rob Schrein's software, and had it give us a DT code on the theory that would hopefully be quasi-independent from the PL curve stuff that we were doing. And then we plugged that DT code into not info and said, please tell us what not. not info, and said, please tell us what not this is, and verified that the not that we got out, not info was the same as the not that we thought we got out of our stuff. And in every case it was. So that was reassuring. Now, have we really proved that everything we found was definitely what we claim it is? No. But this was pretty robust, I think. So, okay, so what did we actually get out of this? So, first off, we computed some new stick numbers. Computed some new stick numbers. So these knots all have stick number equal to nine. Here's nine stick realizations of these knots. And of course, the proof is like, well, there you go. They had nine sticks. Calvo told us that they can't have two of the nine sticks, therefore sigma equals nine. All right. What else do you get? Well, each of these knots has to have superbridge index equal to four. How do we know? Well, okay, the superbridge index has to be less than or equal to half the stick number. has to be less than or equal to half the stick number, which is 9, so it can't be any bigger than 4. And these are all three bridge knots, and super bridge is strictly greater than bridge numbers, so it has to be between 4 and 4, in other words. All right. And then here's a bunch of bounds. So in Tom's master's thesis, we said, oh, all these knots have stick number no more than 10, 11, 12. And in particular, every knot up to 10 cross sense has. Every knot up to 10 cross-sense has stick number lesser input. And some later work, I did some generated, so this was like 400 billion examples, and then when you generate like 2 trillion, you get, so we got 918 showed up, 1018 moved up to here, and so on and so forth. 1080 moved up to here. Anyway, so some of these bounds got a little bit better, and some new things showed up. Showed up. Alright. And here's, so this is my favorite example. So work of Eric Rodden and Rob Sharine like 20 years ago, they had done a bunch of stuff trying to find examples of low-stick Himmer knots. And the best bound they could come up with for 1084 was 14. So they found a 14-stick example of 1084. And here's a 10-stick example. And here's a 10-stick example. So we dropped it by four, which was kind of amazing. So, all right. We also did some work with Ryan Blair and Nate Morrison. We computed stick numbers and superage indices and bridge indices for these two slightly random knots. I mean, basically, we're like, oh, I found 10 stick examples of these two knots. 10-stick examples of these two knots. That must be the best you can do, right? Okay, prove it. Well, so how did we actually prove this? Well, basically, what we proved was the bridge index is equal to 4, and the stick number is no bigger than 10, and then that sequence of inequalities determines it. And the bridge index equals to 4 proof was, this is really Ryan and Nate, who have a fairly, like, a year. A fairly like a year or two ago preprint with Sashka Qshukova, where they are basically using Coxider quotients to compute bridge numbers of knots. So the idea is like, well, there's a homomorphism from the knot group to the symmetric group on five letters that sends verte intergenerators to transpositions. And so this implies that the bridge input has to be at least four. And this picture is supposed to tell you what the homorphism is. So each arc here is telling you what transposition it's going to. So this arc goes to the transposition 1, 2, and so on, and so forth. And Ryan and Nate and Sashka have some code for finding these whole organisms. And then we did, so this was some sort of like intuitive miracle of someone's party, forget who, where you said, oh, here's 15N41127. If I push this over here and do a similar little Reidomester 2 move, and then change that crossing, I get the mirror of 13M592. And when you do And when you did that move, it didn't really mess with this homework. So, how we found this, I don't even remember. And I should say, like, these are the first non-Taurus knots with more than 10 crossings for which superbridge index or SIG number were counted. Tell you how little we know about these invariants. And then, okay, here's some more superbridge indices. More superagendices, so all these knots have superagendics equal to four. And the idea was: like, all this, as far as I can tell, other than the torus knots, all the superagendices on the tables that are known is basically like you found an MSTIC example, and you take n over 2, and that's an upper bound for superagendex, and there you go, right? Which is not a very good way of going about it, because superage index, you can have infinitely many knots with superage equal to four, but there's only finitely many. 4, but there's only finitely many knots with stick number n for any n. So, like, the gap between n over 2 and the stick number over 2 and the super's index is arbitrarily large. And so to do this, the question was like, okay, well, can I find examples where I can actually show that here's an example of a thing with super. An example of a thing with superage number equal to 4, even though it's not like an 8-stick knot or whatever. Like, so, how do I have some certificate that this particular realization of this knot has this super-rich number? Like, okay, you know, this projection has, you know, four local maxes. How do I know there's not some other direction that has more than four local maxes? Well, if you only have eight sticks, it's sort of easy. You're like, well, the number of critical points. Local map, the number of critical points can't be more than eight because that's how many vertices you have, and half of them have to be mins, and so there you go. But in these examples, so these are 10-stick examples, it's not going to work. Like, you could, in principle, with 10 sticks, have five local maxes. So, how are you actually going to show that you have four local maxes? I don't know if there's not some little direction, some tiny little open set on the sphere of directions where you actually get five. And so, the advantage of polygons is this allows you to do. Of polygons, is this allows you to discretize the problem? You know, with smooth things, God only knows how you could actually do this. But with these polygonal things, you're like, okay, well, it's some discretized thing. And the idea is like, okay, well, if there were a direction where you had five maxes, then if you just take the dot product of that direction vector with the edge vectors, you would get alternating signs, up, down, up, down, up, down, up, down. And so if I instead And so, if I instead alternate the signs of the edges, then the dot product should all be positive. Or all negative, but just replace V with minus V if they're all negative. Okay, well this is now like a feasibility of a linear programming. Like, can you find coordinate, x, y, z coordinates that make this all positive or not? And And, okay, so there's these classic, you know, theorems of the alternative that says either your linear programming problem is satisfiable, or this other thing happens. And so in this case, you know, the particular, so Gordon's theorem is an example of a theorem of an alternative and says either this is feasible, like there's a V that makes all of, you know, the resulting numbers all positive, or there exists a U that solves this linear equation. Linear equation where U has non-negative entries and not all the entries are superman. Okay, well this you're like, does this linear thing have a solution? Yes or no? That tells you whether there exists a direction where you have five local maxes or not. So then you just find an example of a U that solves this equation. And of course, what we did was we scaled things up and rounded. We scaled things up and rounded so that the entries and all of these things were integers, and we found an integer example of u, so we don't have to worry about rounding issues. Okay, so that was nice. You reduced this problem of, is there some direction where you have super rich number equal to five? Well, can you solve this linear equation or not? You can do a little bit better. So these are examples. Bit better. So these are examples with 11 sticks. So now you don't get alternating signs. It's like you're going to get up, down, up, down, up, down, up, up, down, up, down. Like you have one sort of repeated up or repeated down. So instead of one linear equation, it's like 11 linear equations, 11 systems of equations. But anyway, you can, again, so that's how it beats performed by just sort of sweeping up a little bit. All right. So Alright, so one other thing I want to say is: like, if you look at not info or something, you know, there's like bounds for stick numbers through 10. There's very few, very little information about stick numbers of knots with 11 crossings. Okay, I don't know the exact number, stick number for most, really any 11 crossing knots, but certainly I've found, well, Certainly, I found, well, with four exceptions, I found examples of all 11-crossing knots where I did it with no more than 13 steps. And here are the four exceptions. So these four knots, despite generating 2 trillion or whatever, random polygons, I never saw any of these four knots. It was distressing. Was distressing. But the nice thing is, these are all two-bridge knots. And so there's a result of who, no, and O that tells you, well, for two-bridge knots, the stick number is no more than crossing number plus two. So their bound is 13 for these points. So it's like, I didn't see them, but nonetheless, they are there somewhere. Somewhere. And in particular, so I found a total of 85 11 crossing knots where the best example I can find has 13 edges. All of these examples are alternate. So with non-alternating 11 crossing knots, the worst might have actually been 11 sticks, but certainly no more than 12. So in general, non-alternating are better, have lower stick numbers than all of the agents. And so somehow this bound is actually like these. Bound is actually like these should, well, two bridges. Obviously, there's alternating knots that aren't two bridges, but somehow, like, the alternating ones should have the biggest stick numbers, but the bound we have is for a class of knots. So, anyway. All right. So, in particular, this tells you the superage index of all 11 crossing knots is no more than 6 because 11 over 2, or 13 over 2, sorry, is 6 and a half. I've also, you know, you can show that all not 10 crossing a super number no bigger than 5. Okay, so most of these, you know, the stick number is 11, you know, 10 or 11 or less. And so you get the easy bound. But there's a couple that have, you know, the best ones I can find have 12 sticks. And of course, 12 over 2 is 6, not 5. So how did I get from 6 to 5? Well, for 1037, this has great. This has great index 2, and Colin showed that the supervision number is no more than 3 times the break index. So that gives you this. And in fact, I then, to reassure myself, found an example where actually the super region number of this particular political organization is equal to five. But really, it follows from homework with Halloween students. And then here's an example: again, 12 sticks, but 12 sticks, but super rich number is equal to 12. So we have bounds on all knots or limit crossings for these invariants, but we don't know what the value is for almost anything. But we have lots of tables, we have lots of code. So you can find tables in our papers or better on GitHub. Better on GitHub, which is also where the code is. So this is Thomas Eddy's stick knot gen. And all of our bound, well, the stuff with stick numbers and load and trusting knots has not been added to not info yet because the paper is not actually done. But everything else has been added to not info. So just go to not info if you want to know stick numbers or support residences is the real answer. But anyway, this information is is a really long. This information is available on. So, here, just some conjectures. So, somehow, this bound crossing number plus two should really be true for all knots, not just for two rich knots. And likewise, the super-rich index, okay, so you take this over two, you cross, you know, half of crossing number plus one. This is slightly smaller than that. But there's these examples of like 12-stick knots. 12 stick knots or the superage number is five, and that's sort of the difference. So, anyway. And this conjecture is deeply frustrating. So, everything I've been generating is equilateral polygons. But of course, stick number doesn't require equilateral. You can have whatever lengths you want. And, like, I could, you know, Jason said in general, like, you can have, you know, R1, R2, R3, R4. They don't all have to be one. But then, you know, But then, you know, so I could in principle generate strings of examples where I choose the R's to be whatever I want them to be, but it's like, what R's should I pick if I'm looking for examples, whatever. But anyway, so there's, so everything I've been generating is equilateral, so really what I'm showing is the equilateral stick number is bounded above by whatever those numbers are. And of course, the stick number is no bigger than the equilateral stick number, but surely these are distinct invariants. Like, surely, by messing with the links, you can do better. Better, but prove it, right? So let me say what the status is on these conjectures. Yeah, so this bound is true for alternating knots, it's true for pu Taurus knots, and the best known bound is like three halves process. But somehow this three halves should really be one. And for Superage number, the best thing. For Superbridge number, the best bound is just take this 3 halves over 2 and get 3 quarters, but again, 3 quarters should really be 1 half. And then for this, okay, this is the only example I know where the numbers aren't the same, or don't appear to be the same. So for 929, the stick number is definitely 9. There's a non-equilateral example with 9 sticks, and 9 is the best you can possibly do. So fine, stick number is 9. Now I've found examples with 10 sticks that are equilateral. The requilateral. I have generated just an obscene number of 9-guns looking for 929, you know, 9 equilateral sticks, and I can't find it. But this is the only example that I know of where the bounds don't agree. If you read Eric and Rob's paper from 20 years ago, they have a list of like 10 possible examples, and we've slowly knocked off all of their examples except for this one. How do you prove it? I don't know. The problem is lateral sticks are really weird to get your hands on. Yeah, this conjecture. I mean, I'm probably the only person who really cares, but it's still like, ugh. All right. Okay, Jason cares. Public cares. Andrew cares. Excellent. Andrew cares. Excellent. There's five of us that care. So you get the glory of five people's undying appreciation. All right. I'm a fake knot theorist, so I'm not going to claim to be doing anything substantial here. But this is tiny but suggestive data on satellites. Of course, the problem is like the first satellite knot is like 13 crossings, right? So you don't see them very often. So, you don't see them very often when you're generating small polygons. These are the only satellites I've found in my 2 trillion examples. And they're all just take the white-hat double of the trefoil and put a little twist on it. So what this notation is telling you is what the twist is, the white-hat double of the trefoil. And I've also given the DT names. I guess these are the Burton names, the two at the bottom. The two at the bottom, the 17 crossing ones. And so the half-integer number of twists, I found examples with 12 sticks. For the integer twists, the best I found is 13 sticks. And that's equilencies? Yeah. Yeah, equilateral. It seems like those would be easier with, I mean, right. Right. Tiny, tiny dick. But I was just, you know, at some point I was like, well, what satellites have I seen? And these were the satellites I've seen. And it was like, the half-integer ones were all 12. I mean, I also found 13s for these stuff in the ends, but like in particular, 12 was the best. And for the integer ones, the best I could do was 13. It seemed like a weird coincidence. So I put this in front of you. Do with it as you will. Um they keep trying to get students to think about this and they're like, That that sounds hard. Um and not very remunerative in terms of getting jobs down the line. So I don't know. But there is this weird sort of dichotomy here. And I mean there's somehow the low stick number examples that I found tend in some very vague sense. In some very vague sense, which I don't want to even attempt to quantify, tend to have low, small hyperbolic volumes, broadly speaking, which makes a certain amount of sense in that they're both measures of some sort of geometric complexity of the knot. But like you don't see so many, well, obviously some of them aren't hyperbolic at all, but the ones that are hyperbolic tend to have pretty small remote points. But really, maybe the thing I want to say. Maybe the thing I want to say is: like, you know, if you want small, complicated knots, like generate things in confinement. Like, that boosts your probability of getting something complicated. And we have ways of generating lots, you know, again, trillions of things in confinement. So if you're looking for examples of complicated knots that are in some sense small, meaning in this sense I mean, you know, small strict number, but you know. Small stick number, but stick number is somehow loosely correlated with various other measures of complexity. This is a way of generating lots of things. All right, that's it. Questions? So when you generated them confinement, did you always use radius confinement one or did Always use radius 0.5 and 1, or did any other radius turn out to be? Oh, I was, yeah, so we did like 1.5, 1.1, 1, and then, okay, so I did 1.5, 1.1, 1.05, 1.04, 1.32, 1.01, 1.005, and 1.001. We did, you know, like whatever, 10 billion in each scale or something like that. Any one of them seems better? If you want complicated stuff, the smaller the better. The smaller the better. So 1.001 was way better than 1.5. And if what you were looking for was knots with a higher probability of getting high crossing knots. So for us, the smaller the better, because we just got more complicated. I mean, still, like, something, even at 1.001, even for 13 guns, it was still like 70%. It was still like 70% unknots or something. Like, it's still mostly unknots. But of course, if you just generate 13 guns in unconfined, it's like 99.999% unknots. So you dramatically increase your probability of getting something that wasn't a none none. But there were still most of the none nuns. Yeah, I was worried about, like, because we checked various inequalities along the way, and I was worried if it was exactly one that, like, the inequalities. That, like, the unequal, that something would go wrong with rounding your floating points or something. So, that's why I didn't go any smaller than 1.0. But, yeah. You can't go any smaller than 1 because you have to go out your first step. So, if you're distance one away, so the radius of the sphere can't be smaller than one. What happens if you take the initial point down the sphere instead of like so I think Klaus and Uder. So, I think Klaus and Uda are going to talk about similar things. I don't, so in terms of the symplectic geometry, I don't know how to incorporate that. But, I mean, in some sense, so what, right? Like, I wasn't trying to prove anything about distributions or expected values. Like, I was just looking for examples. So, yeah, I mean, you could just generate, you know, generate endpoints uniformly at random in a sphere or the box. Uniformly at random in a sphere or a box or whatever and connect them up, and those would also be as helpless. And those wouldn't have equal algorithms. So if someone wants to do that, please do. You can probably beat some of my bounds if you have not equal algorithms. Yeah. Yeah, maybe it's a dumb question. So beyond using confinement, do you have, like, given that you're sort of generating increasingly large numbers of things with an increasingly small return, which makes sense because you're. Smaller term, which makes sense because you do have other ideas for how to encourage more complex cases beyond squishing them into a small space? Short answer, no. Yeah, so that was my idea like five years ago. I was like, if I'm looking for examples, just do it in confinement, I know how to do it, and then I'll go for it. I haven't actually, I sort of stopped doing these examples a year or so ago because A year or so ago, because or used computations because I got bored. I didn't have a better idea of how to do something else that would encourage things to be complicated. But yeah, people have ideas, though, you know. Yeah. You also tried random embedding in the sense that Erica talked about the other day, so just take random points and connect them. No. No. I mean, that's what I was saying, like, someone should do that. I'm probably not going to do it because I need an undergrad who's a good programmer, and they're hard to find. But yes, that is a thing that I should do and haven't done. I mean, so 25 years ago, like Ken Millette was doing these things, and he was generating, you know, 10 million. Wow! You know, and so yeah, at this point, you could do. So yeah, at this point you could do two trillion on a pretty reasonable machine and not too much. Do you expect a different behavior compared to like with after a different? So my guess is, well, it depends on what you mean by different. I think you would probably find examples, for example, maybe with these satellites, like somehow, like to get a satellite with a few sticks, maybe it's better to have, you know. Satellite with a few sticks, maybe it's better to have one long edge or different scales of edges. So you might find individual examples that have smaller sticks than an equilateral case. In some sense, the equilateral ones are sort of the most flexible. And so, I would expect that certain, you know, yeah, I mean, what do I mean by that? I think it. I think it would be different. You would find some examples, but Equal Auto is probably actually surprisingly good for finding small examples, even though it's probably not the best for any particular lunch. We'll last question and then we'll lunch in one fifteen. Forward collateral? Um, I cannot keep tr two trillion on nuts. You can try to use one and save on the pickups. Yeah, I should do that. Or someone should do that. A student should do that. The problem is, if Tom had stayed for his PhD, this is the sort of thing I would have him do, but he decided to go make more money. Yeah. I think you're all setting a way to more rapidly sort of attach myself to allow my colour with that would be sort of bigger than