I come from a combined department at CMU. So today I'm going to talk about one of our open source software that we called Cell Organizer. It aims to learn the morphological, spatial, and dynamic models for those cellular and sub-cellular components. Let me firstly go through some motivations. So as we all know, that there are dozens of those cellular organelles and other structures and molecules within the situation. Molecules within the same cell. But typically, in sexual examples, we will only see some cartoons, for example, like mitochondria, we see only the ellipsoid. But in reality, there's a large variance in their shapes, in their numbers, and their spatial distributions. So we we know that the viral examinations or those classic descriptive models will fail to capture such uh intrinsic variance, okay? Intrinsic variance. So here, the philosophy of computational methods are expected to create those automated, compact, statistical, accurate, and generated models. So for the first two points, since we are somehow in the big data era, so you will expect that the software can automate it to process a large volume of the data and the result models. The data and the relaxed models should be compact because you cannot have an infinite memory to just remember all the data. And for the last point, the generated models. So in early years, it's pretty hard to explain the notion of generated models, but nowadays it's pretty easy due to those success of deep generated models, for example, like TEPGT stuff. Okay, but actually, we are working on more stuff. We are working on more statistical generated models, not those de-generated models. So, back to the software. So, the cell organizer project provides tools for learning the generated models of cell organization from images. We can store our and retail our learned models, and we can use those models to synthesize new images. That's why it. Images. That's why it is a generic model. A fun fact here is that this cell model is actually synthesized from our software. So this is the main workflow of cell organizers. So basically, we assume that we have a set of images. So each image contains only a single cell. It has the cell boundary, it has the nuclear and the protein of interest. Protein of interest. Okay, so first we will just align this cell by its major and minor axis. We will figure out where the cell boundary is. We will figure out where the nuclear boundary is. And we will also identify those proteins of interest. Okay, then given these three components, we can fit a spatial models. And use the spatial models, we learned it has two purposes. The one is that we can Two purposes. The one is that we can compare different resulting models. For example, if we fit two models by images of two different cell lines, so we can just figure out the morphological difference between those two cell lines. The second usage is that we can use it to synthesize new cell models and use those cell models for downstreaming biochemical simulations. So let me just go through some details of this toolkit. So for modeling the cell shape or the nuclear shape, we actually use the strategy of separable harmonics. So we have introduced this method in maybe yesterday before yesterday's talk. So basically the idea is that given a 2D image Is that given a 2D image? Is we find the outline of the cell, let's say, or in 3D, or given a 3D image, we find the surface of the cell, right? Then we can get its curvature map of the surface or outline of the cell. So that's this unique ball. Then we can project it onto a finite set of four-servonal cervical harmonic phases. Then we can use the resulting fluid. we can use the resulting coefficients we somehow call it like the spherical harmonic descriptors so that can be used as somehow like a feature vectors to describe this shell self-hate. And this is the pretty standard technique used in like CO processing. It's pretty much like the ORA transport. In sake of the time, let's just give the definition here. The one of the advantages of spherical hardware. Another advantage of a spherical harmonic transform is that the resulting descriptor is actually a linear combination of those bases. So it has the linear hierarchy here. So although the mass of that descriptor is pretty large, we can actually use like PCA, a linear map to reduce its dimensionality. So here I show an twelve examples. So basically, the sine cells are and blue cells are just the model. Just the model, we use the separate hormonic to feed those images of those two cell lines. Then we use PCA to double to reduce its dimensions that show the scatter plots of its first three PCs. So basically, it reflects the morphological difference of these two cell lines. As we intuitively, we can see that the blue cells are typical. Blue cells are typically has those elongated shapes. Just one clarification question. These are originally which is 3D. Yes, basically example is 3D, actually. Yeah, but it works for both 2D and 3D. So for delustrating the software purposes, so originally the cell liner is written in MATLAB, but recently we write a Docker company. Write a Docker container and we also write a Jupyter bundle version to wrap up all the software in a single bundle. So basically, you go to the our, if you just download our software, you know, Google, you can just basically rename the image. So the image here assumed to be a 3D image with unvoxed and off the finalize the images. Then you can just call this function directly. This function directly. This can be directly imported from our software. Then you can just get the feature of harmonic descriptors. Then for these descriptors, you can use these two functions to just get the inverse transform. So this is the inverse transform of the cell meshes, the surface meshes, and we can also sample the volumetric image of that. Volumetric image of that cell. Okay, so this is the beacon of the implementation. Okay, so we can also do some dynamical modeling of cells because, as I just mentioned, the descriptor has some, has the linearity. So basically, we have to just do a linear interpolation between, for example, the starting point and the end point. Maybe we also have some intermediate point, and we can just interpolate the entire dynamic. Interpolated the entire dynamics from the shape descriptors. So I show this figure, but if you are interested in the details, you can check this paper. So it's a very trivial extension to those vesicular organelles. So because we can just fit the same models for each segmented vesicular organelles, for example. So on the left panel, I show the same first pieces scatter plots. So the sine objects here refers to the nucleophile and the blue stuff refers to the 4G apparatus. So they're segmented from the images of the same cell line. And on the right panel, I show another example: it's the decimal sum versus the 4G apparatus. the 4G apparatus because the for illustration purposes here I just take these two sets of very two sets of organelles with distinct morphologies okay and note that they are all like vesicular organelles because they have let's say topologically we know that they are genus zero uh they have a this have a a genus zero topology so we can definitely use the suffering parameting to model their shapes. Modeling to model their shapes. It depends on kind of how many information you want to get by doing the PCA, but for illustration, so I can always show like two or three PCs. So that's uh so that's why I showed those all those scatter plots with three PCAs. So I'm a number of connected components. I meant a number of camping components. So if you're fitting a script on it to each of these pieces, and you're going to get a set of each of these space, you have to do that on both of these examples and the same length of your features up here. Okay, so you said that some kind of vesicular can be fitted by some small number degree of pressure. Have like two components, some cells can have three. How you parametrizes two cells and this case. Sorry, so I didn't quite get the point of the component. So for each the object here, we use the spheric harmonic to feed it. So you're losing the cell information? You're doing just per piece? Yeah, so at this point, we're doing only at the organelle level. Yes. Yes. Okay. But I will get back to this example combining assembly. Okay. So another example here is that we actually do another more practical application. That is to say that we find deep-generated models. We use that model to synthesize some cell images. Then we also have some real microscopic images. Then we segment. Images, then we segment the organs from the real images and also from the synthetic images. That is to say, we want to see that are morphologically if those deep generating models did a good job. So that's the result we get. So the blue stuff here refers to the organized segmented from the real images, and the sign stuff refers to the organized segmented from those fake or synthetic images. Those fake or synthetic images from generated models. So that's another application here. Okay, so the next topic I will talk about use the cell organizer to study the spatial distributions of proteins or forms. So for the first three rows, this illustrates the for like, so here, I believe the So, here I believe the green pattern refers to some proteins, then the red pattern refers to the microtubules, and the yellow refers to the ER. So they are from the real microscopy images. Then we have some way to discretize them into like punctures. So there are actually dots here, but due to the resolution, it's not quite easy to figure out. They are just dots here. So what the purpose is of doing this. Of doing this qualitation is that we can actually study the spatial organization of those organelles or proteins in the cell. Because we can basically find some landmarks, for example, like the nuclear boundaries, we can calculate their distance to the nuclear boundaries, we can calculate the distances from the cell boundaries, we can fit by kernel densities of those organelles or the protein, the molecules. The molecules, the proteins of interest. So that's the general purposes of this part. And if we go back to the example of those basic color organizes, so because this one is more straightforward, because we do not need, we need to discrete type it. We can just only find the centuries of those vesicles. Then basically, here I show another two spatial. Showed another two spatial models. So basically, we project the cell surface onto a uni ball and we also just mark those the center, the positions of centuries of those organelles inside this uni ball. For example, so the sign here refers to the nuclear light. So basically, we'll notice that all the sine points are located at the center of this sphere. Of this sphere, and the blue here refers to the 4G apparatus. So it basically locates on the top half of this sphere. Would this represent a single cell? This is a collection of cells. I put them together. But not too much, because this is just a sort of tri-example. I cannot put too much dots here. You cannot see anything. So if we put in So if we put in all the can I get what we mean? Yeah, so if we put all the stuff together, so we can get a synthetic cell. So basically we can generate a statistical accurate cell and its associated nuclear, and we have learned protein distributions, then we also know the shapes of those proteins or organ. Of those proteins or organelles, so we can put those organelles or protein objects according to the spatial distribution. So, this is an example of the models. Okay, so all the stuff are implemented by our software. And we also have an extensive tutorials on our website here, the project website. And we will also publish a product of this. Published a product of this software in methods in molecular biology, but it's still in press. Maybe published at the end of this year, we'll pass. Okay, and I thank for your listening and acknowledgement. This work is funded by those two brands, and we have a very large development team led by our PI Bob Murphy. And yeah, let's take a look at the business. So I guess my question is how do you generate the spatial distribution with respect to the given cell boundary? So if I give you a shell attribute to generate the nucleus and the components in there, how do you ensure that it doesn't overlap? Because the site doesn't overlap. I mean what generates it? Yeah, okay, I got your question. Okay, I got your question. So for introduce the software purposes, I had a lot of computational technical details here. So we actually use like a point process model. So it's a stochastic process. So basically, you give a probability measure. So you sample the point here, then you would put another to the next point, maybe near this point, but these two are not independent. But these two are not independent, they are dependent. So there's an interaction that will keep all the points that do not collect together. But yeah, I just give a lot of deep learning-based, right? It's just what this should be. One question, too. What does the software look like? So if you have a combination of meshes, points, all of that is. One of the displays according to the type of organized? Yeah, so it's like in MATLAB we have sort of a wrap-up class with all those fields, like just you described. And we have a lot of building functions to let you do some analysis with that. And we have a tutorial, so if you go to the website, you definitely So, you'll go to the website. You definitely know what I'm saying. Okay, thank you. Thanks.