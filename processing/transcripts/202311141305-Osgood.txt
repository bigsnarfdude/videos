Many of you know me from our very applied work. We also have many lines of methodological work from inventing new programming languages for modeling to targeting novel architectures, taking advantage of large-scale parallelism, GPUs, and so on. Today I'm going to be talking with you about the line of her methodological work that most excites me, which lies in the use of applied category theory to create To create composable modular models capable of multiple levels of abstraction, and that can really empower teams. So I'm maybe going to talk compositional modeling, and I want to emphasize that it's the product of a broad team. And most notably, Xiaoyan Li, my doctoral student, whose work has been had some support from Canmod, particularly in terms of. Particularly in terms of a workshop promoting this, and we're going to be offering a second round of that workshop sometime in the next year or so, in 2024. I did want to begin this talk as probably I should. I came back, came to this event just after returning from my father's funeral and burial, and wanted to acknowledge his formative role in inspiring a lot of my work, both by example and Both by example and as an inspiration of a life in science, did pioneering work in laser physics, inventor of the CO laser, and a lot of laser pumping techniques, went on to contribute in photonics and optoelectronics and was a towering figure in the applied physics and electrical engineering world when it came to optoelectronics. So, the motivation for this work. Motivation for this work lies in my reflection that the fundamental units of success in modeling are teams. It takes a village to build a good model, in my view. A village composed of distinctly interdisciplinary population with diverse backgrounds and often diverse lived experiences. And that diversity is an asset in delivering on effective modeling. We adhere to an agile modeling approach. We adhere to an agile modeling approach that really puts a premium on involving stakeholders early and often and throughout a modeling project and engaging with the structure of those models, understanding that structure so they can challenge it, so they can critique it, so they can help refine it, and so that they can interpret dynamics elicited from the model in light of that. The model in light of that structure. We're a big believer in involving, as someone who holds a position in our Saskatchewan Center for Patriotic Research, the involvement of people with lived experience within our projects. And there's many reasons that can be enumerated for modeling that really reaches out and empowers stakeholders and people of lived experience who have no background in modeling, but whose experience within the health system. Experience within the health system or experience on the streets for homelessness, et cetera, is germane for grounding a model and for ensuring that model recommendations get put into place. Now, our dynamic modeling toolkit, as some of you will know from our publications or our work through the pandemic, is composed of multiple types of modeling. We're heavy user of agent-based modeling and discrete simulation, often hybridized. Often hybridized. But I'm going to be focusing for this talk on system dynamics modeling, a compartmental tradition with a distinct philosophy and sort of perspective behind it. I should emphasize that we use these techniques, and the work today is inspired by our use of these techniques, together with a lot of machine learning and computational statistics tools. So, our work, for example, that came out of my collaboration with UCMU. out of my collaboration with Ju CM Liu here and particle filtering, particle MCMC, etc. Now within the system dynamics modeling sphere, for those less familiar with it, it's a technique that prizes participatory interaction geared around different diagrams, different types of diagrams. And I'm going to walk you through successive diagrams that, in some sense, successive elaborations of an understanding. Of an understanding of a system from causal loop diagrams to system structure diagrams to stock and flow diagrams. Whereas you go down, there's success of elaboration, or as you go up, there's success of sort of abstraction. Now, causal loop diagrams are typically used very early in a project, but often very on a frequent basis throughout a project. And the code posited causal links between different variables. They are Different variables. They are semi-quantitative in the sense that each link is associated with a polarity that indicates the posited nature of the causal relationship or direction of it. In the sense of as you change the source variable, how does it tend to increase or decrease the target variable compared to the value it otherwise would have had, other things being equal? And what's important is that these sort of diagrams are very useful for capturing sometimes squishy factors, behavioral. Sometimes squishy factors, behavioral factors in modeling. And often we return to them throughout a modeling project of this sort. These links, as you might expect, compose, and they compose in terms of polarities according to the law of sines, which is a reflection of sort of, if you go more technically, partial derivatives involved. Now, importantly, and this is going to be true for all the diagram types, they provide an average. Types. They provide an avenue for understanding model dynamics, for understanding why we see certain types of behavior. And different types of feedback loops induced within these diagrams are associated with our typical behavior. You know, divergent behavior where the real part of the eigenvalues are greater than zero, or cases where they're all less than zero, and you have stability, or cases where you have pronounced delays and you get oscillations to an equilibrium. Oscillations to an equilibrium. So, causal diagrams are often bread and butter of the techniques we use with people with lived experience or system stakeholders early. At the middle phase, and as we elaborate those diagrams, we include more structure. And commonly, it's taken in the form of elaborating and distinguishing things that are elements of state, so it's what are called stocks or level of variables. Variables and flows into them. With the reflection being that a lot of variables impact flows more or less instantaneously, but the impact on the flows on the stocks to which they are incident occurs typically on a more gradual, continuous basis. By so elaborating it, we get extra ability to kind of reason about behavior. And the primary, or one of the foremost gains by elaborating stocks and flows is reasoning about the dynamics. Flows is reasonable about the dynamics of the stock in terms of the flows. So, if the net flow into the stock is positive, if there's more coming in per unit time than it's leaving, the value of the stock will tend to rise. If the reverse is true, there's more flowing out per unit time than it's coming in, it'll tend to drop. And if the two are equal, of course, the stock's in stasis. The value of it doesn't change. And this provides a lens, which, while it may seem simplistic, even trivial, is really, really helpful in understanding observed dynamics. An understanding observed dynamics. And our stakeholders, not from modeling background, will often interpret patterns in the empirical data in light of these sort of stock and flow relationships using principles as simple as that. The final type of diagram I do want to introduce because it has a disproportionate role in our compositional modeling approaches is one of stock and flow diagrams. And here we have a structure like we have. Have a structure like we have for system structure diagrams, but we elaborate the quantitative nature of the relationships that are incumbent or impinge on each variable here. So fractional prevalence would be the number of infected people over the total population, or the recovery would be the number of infected people divided by the average duration of infectiousness. Traditionally, that is seen as inducing, and this is the typical and overwhelming. Typical and overwhelmingly common interpretation, a set of ODEs. But the attention is always on the diagram, not on the ODEs. The ODEs are seen as kind of explicating this diagram in a natural way. But for system dynamics modelers, the discussions, the understanding is undertaken at the level of the diagram itself. Now, while system dynamics packages prize the ability to communicate about To communicate about these models in a fashion that's transparent, there's a number of shortcomings with existing system dynamic software that our work helps address. One is it has very little support for model modularity. We really don't have a way of composing a model out of subpieces that we stick together or glue together. We don't have libraries of modeling components that are tried and true that we can reuse. Stratification often yields. Gratification often yields a combinatorial explosion by the curse of dimensionality that overwhelms an understanding of the structure of the model. Particularly, if we have dynamics associated, say, with age groups, associated with sexual activity group change, there's smoking status change, as well as flow through, in this case, an HPV set of natural history. Often all of these become entangled in a way that is Way that is where the trees obscure the forest. And at the very least, as Jun Ling commented, you become an accountant for just keeping track of all the inflows and outflows that are tangled together for a given stock. There's also, curiously, given their relationships of successive elaboration, an inability to really capture To really capture ongoing synchrony between different diagrams. So, even though we often successfully elaborate a structure out of a causal loop diagram into a system structure diagram and a sock and flow diagram, these are then treated as three solitudes. And if you change one, you have to go back and manually change the other, and often one or the other of them will fall out of date. Many other Many other weaknesses and inability to capture higher levels of abstraction, for example. And critically, all the software for system dynamics is geared towards desktop use by single people, a single person at a time, rather than empowering the teams that are typical within impactful modeling projects. So, why a categorical approach? Well, we'll see some flavor of it here, but there's But there's a number of reasons. Category theory is sometimes said to be a matter of taking diagrams seriously. And here we're aiming at transparency for stakeholders in support of diagrammatic reasoning. That's a typical part of the system dynamics portfolio. Secondly, it provides support for modularity, abstraction at different levels, and critically composability. Levels and critically composability. That's at the heart of categoric theory, being able to compose morphisms. Equally important is its typical primacy it places on separating syntax and semantics. So syntax is about the form of things, in this case the form of the model. What thing is linked to what. Semantics is how we interpret that given model, a given That given model, a given diagram. And if you think about it, often when we have models, we put them through many different lenses, many different interpretations, or things that could be viewed as interpretations. We simulate them, we calibrate them. We might perform formal analyses, such as in system dynamics, analyzing the loop gains that are active at any one time and how that changes throughout a given simulation, which loops are driving behavior. We perform eigenvalue E less. We perform eigenvalue elasticity analysis to understand how certain parameters are more efficacious at one time or another. And of course, we use them with computational statistics. And we have large code bases just devoted, custom code bases for particle filtering and particle MCMC and ABC for our models. Beyond this, we seek categorical basis, the formal mathematical basis for the ability to transform models. For the ability to transform models for effective optimization and parallelization. This is less a central issue with stock and flow models because they're commonly fairly lightweight, but for agent-based models, it really comes to the fore. The ability to map between diagram types and the ability to keep a model up to date with schema evolution, and then some support for hybrid modeling. I want to give you a glimpse, though, of what we've done here. We've done here. And essentially, we've built a technology stack. And all credit goes to Xiao Yan, Xiaoyan Li for the hard work of the early building of this, where atop of the programming language Julia, we write atop CatLab, which is a categorical computing platform, which has spawned an algebraic Julia ecosystem for algebraic. Algebraic approaches, so categorically inspired approaches to a variety of types of modeling challenges, including for Petri nodes and other structures. We've contributed a stockflow.jl libraries atop Algebraic Juya. Those are largely Xiaoyan's products, but are now being supported by several others in our group. And then we have domain-specific languages on top of that. All of this can run in Jupyter notebooks. Run in Jupyter Notebooks. And it also is going to support, as you'll see, a real-time collaborative browser-based system for allowing teams to build up in sort of a Google Doc type fashion on models simultaneously in a real-time collaborative fashion. So a few elements of the approach. Category theory is notoriously deep as a topic, and I'm not going to be able to provide more than a glimpse here, but hopefully it will give you some. Here, but hopefully, it will give you some sense of where we're going. So, a foundational component of this work lies in encoding the syntax of a given stock flow model. To do that, we make use of what are known as copri-sheaves or C-sets from a schema category. The schema category, in this case, for a sock and flow diagram, we've another one for system structure, another one for cost-to-loop diagrams. Cause the loop diagrams. It basically encodes the grammar. Now, it's not obvious that this encodes a grammar, but it basically says what can be connected to what and in what relationship. So each of the objects in this schema, it's a category, are denoted here in rectangles. And these arrows are morphisms. They're abstract mappings here. Now, left to itself, this is a grammar. But if we map it into the category of small sets, The category of small sets, so the category called fin set. Basically, for each stock, for the stock object, we map that into an object in finset, which is a set, a set of stocks. We map flows into a set of flows, as denoted by that column here. And these morphisms over here in the schema category map into morphisms in FinSet, or category of small sets, which are functions, functions from one set to another. So, in this case, for example, So, in this case, for example, from an outflow, it indicates the flow with which it's associated, in this case, flow one, and the stock with which it's associated. This is depicted in a database fashion because there's a deep relationship between categories and databases. But essentially, we're depicting the functions that map from, in this case, these outflows to the flows here. So, a given mapping from this scheme. Given mapping from this schema category into set is encoding a specific stock flow diagram. The schema category is a grammar for encoding stock flow diagrams. In general, it's by mapping it into set that we encode a specific diagram. Now, this can be characterized within CATLAB and Algebraic Julia using syntax transforming macros as our standard in Julia, where we describe this schema category. This schema category. So here's, for example, stock, here's inflow and outflow, here are the flows as objects, and then we define the hom sets which are associated with these various morphisms. Now, on top of this, we have a variety of, we have three primary domain-specific languages. The first of them is to just declare a stock and flow diagram. And you can see here, we can characterize in a symbolic fashion a stock-flow diagram, and it unpacks. Flow diagram, and it unpacks it into its categorical encoding. This is using admittedly very ugly writing on top Algebraic Julia's automatic visualization for any C set. It sort of depicts the structure SI and R is over here, as well as the other variables in the model. We're going to be putting in place a custom visualization tool for stock flow models, but right now we're using a built-in one. We're using the built-in one. And this is the encoding as a categorical database. Now, left to its own devices, this would be, you know, of kind of a curiosity. But what's really interesting is what we can do with it after we've categorically encoded it. Of course, we have encodings of soft-cloud diagrams as data structures and many software packages. The fact that we characterize it formally gives us all sorts of strengths. One of the more interesting things we can do is define a category of open. A category of open stock flow diagrams using a construct known as structured co-spans, which can be viewed as morphisms in a certain category. And basically, for a given stock flow diagram, we can have interfaces into it that can be used to join up with other stock flow diagrams. So here's one, and we have two places we could join up the S stock and the I stock. These are these two legs here on what's called a structured co-span. And the idea is. Coastban. And the idea is: if we want to compose it, we have three ways of composing: upstream, downstream, hierarchical, and simply identifying stocks and some variables. That's the simplest one. It's what I'm showing here. So we have two diagrams, the X diagram on the left, it's an SIR diagram, and the SV diagram on the right. So X and Y. And what we're saying is to compose them by identifying the stock S between them. So we've the stock S over here. So we've the stock S over here in the X diagram, stock S here in the Y diagram, and we're saying basically view those as the same stock. View N, which is the sum dynamic variable, as the same sum dynamic variable. And what you get out is the push out in this category of associated with these structured cospans of these two diagrams. Basically, it's a disjoint union of those, but identifying this with this and identifying the ends. In identifying the ends with n's. And that's a composed stock flow diagram. So we can compose, for example, by extension, SEIV diagram, which represents the fact that people in the vaccinated states can still get infected, with an SEIR diagram and get an SEIR V diagram by identifying the S, the I and the E here. So we have several routes of composition, but another thing that we But another thing that we really have focused on is dealing with this cursive dimensionality associated with stratification. In order to do this, we need to go up a level and reason about a category of stock flow diagrams. And to do that, we need morphisms between them, which in this case are homomorphisms. So these are mappings between stock flow diagrams that are structure-preserving. So they may collapse, they may coarse-grained this one on the left. Coarse-grained, this one on the left to the one on the right, or they may embed it on the right-hand side, but they're structure-preserving mappings between them. And if we describe these homomorphisms, we can reason in the category of stock flow diagrams about a structure known as a push-out. Now, that, excuse me, known as a pullback. So, this is a pullback within the category of stock flow diagrams. Why is that interesting? Because it allows us to reason about how different. To reason about how different strata interact. In the simplest case, we might have a product type relationship. So if we have an age stratification and we have a given underlying model, we can take the pullback of these two, and in the simplest case, it's the product, and we get the product in this form, where each of these stocks, these SEIR, have then a given age group associated with it. Or we can Associated with it. Or we can do that with the sex stratification. What gets interesting is we start to stratify it by age and sex, or age and sex and smoking status. And fundamentally, what this gives us is a modular way of stratifying, which doesn't assume that they're always orthogonal. It doesn't assume they're always a product relationship. And this concept of a pullback in category theory is exactly that more generalized. Exactly, that more generalized notion that can handle a product but can handle loosenings of product that, for example, reflect the fact that if you stratify by age and you stratify you by occupation, occupations only come in for the age groups where people are in the working population. Another thing we can do, and just watching the time here, is map between these diagram types. We can take a stock flow diagram and extract the causal loop diagram from it or extract the system structure diagram. From it or extract the system structure diagram. But perhaps the most important mapping for day-to-day use is mapping to different semantic domains. And here we can map, for example, to a simulation domain, take a diagram, maybe it's been stratified, maybe it's been composed in various ways, and we can then interpret it in different semantic domains, in this case with a simple simulation domain. But we have different interpretation domains. Different interpretation domains which we're targeting, including things like calibration. And for Xiaoyan, who did her master's work with quite impressive applications of particle filtering in the infectious disease area, the ability to support particle filtering and particle MCMC via Markov categories as semantic domains are big attraction. I'm going to have to finish up here, but we've built a real-time collaborative system atop this that doesn't assume any category. This doesn't assume any categorical background or knowledge. It allows teams from diverse backgrounds to jointly and in real time collaboratively put together different types of diagrams for their projects, to interact around diagrams in sort of a Google Doc or Google Sheets type of way, where they can see each other's modifications. And of course, it supports this sort of ability to compose models. So we can take a pre-existing Models. So we can take a pre-existing model from a library, stick it in, and then elaborate on it, stick together multiple ones from the library and elaborate on them and then publish that. So this work is going in several directions for adding support, dimensional and unit information, adding in support for bringing it together with the results of categorical encodings of Petri nets with open dynamical systems. Dynamical systems, and further elaborating support for causality pierograms. Some of the most exciting work in this area, though, is going on in the agent-based and hybrid modeling world, and it's been given a real shot in the arm by funding from International Center for Mathematical Sciences and University of Edinburgh to host a six-week hackathon this coming summer to categorify agent-based modeling and to lay the groundwork for a similar framework for agent-based models. So, a few take-home. For each of those models. So, a few take-home messages. Impactful modeling projects, in my view, are best contributed by interdisciplinary teams. To empower those teams, we need modeling software that can be transparent from people from diverse modeling backgrounds and that can have a focus on diagrams. And system dynamics is one tradition that prizes that, but it's limited by existing tools. And applied category theory provides this transparency. Provides this transparency, modularity, the ability to compose, to capture different levels of abstraction, mappings between the different diagram types, and cleaner stratification, and finally, and importantly, semantic flexibility. And finally, the tools we've built can allow its use by teams without familiarity with category three. I provided here a set of resources for anyone who'd like to get them off the slides. I've also provided, and maybe it could be posted. It could be posted, a backgrounder which provides these links as well as other information for anyone who'd like to try out the software. Finally, I want to provide acknowledgments to CamOd, to MCERT, the basic My Discovery grant, and to a wide variety of others who have contributed to this work. Thanks very much.