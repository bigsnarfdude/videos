First conference. Probably people are sleep deprived slash hammer or both. But let's just hopefully we can be distracted by some math. So it's my pleasure to introduce Alice Rosardo from the University of Liverpool, who's going to talk about geometric realizations to construct non-Fourier chi functors. Non-free Mk Hunters. The floor is yours. Okay, thank you. Thank you very much for inviting me. Thanks for the introduction. I hope that people got some sleep. And I'm very happy to be here. Partially because it's a great occasion, but also partially because this is important for me because, well, I had long COVID for a long time. Long COVID for a long time, and I'm finally feeling like I'm recovering and starting to work again. So it feels really good to be here. So let's talk about Fury Mokai functors. So first of all, we all know and love Fury Mokai functors. They're super common, they're important for anybody who does drive categories. They've already been mentioned. Categories have already been mentioned in several talks so far. However, they are not the whole story. So this is a result from a few years ago by myself and Niemann and van den Baer. And this is a construction of a functor between the draft category of a quadricing before to the draft. A quadric in P4 to the derived category of P4. And it's a, yeah, I should have said this is an exact functor, but so it's a nice functor in principle, but it's not for human kind. And the way this functor is constructed is it passes through a non-commutative deformation. I've indicated this with Q eta. So this is a non-commutative deformation. So this is a non-commutative deformation of Q. And I'll explain better how this is later on. So in fact, this no-free Machi functor that we constructed is just the composition of this functor from dBq to dbq eta and then over to the derived category of p4. Of P4. So let me tell you a few good things about this result and a few bad things. And let's start with the good. So the good is we have a construction for this functor. In fact, we have two constructions of this functor. The first one that was given by myself and van den Berg, and then Andrew Neumann K. And Neumann came up with another construction, which is actually kind of nicer for the same functor that works in great generality. So it works for any smooth projective scheme of dimension and greater or equivalent three over a field, but actually it probably works in much bigger generality. probably works in much bigger generality. And this functor here is an exact functor which is non-Fouri, although I do have to tell you what that means because this object is not a geometric scheme. So it's, I'm going to tell you more about this later, but this is an A-infinity category. is an infinity category. So what I mean by non-freemchi just means there is no, it doesn't come from a bimodule. And so this functor is kind of quite hard to construct, or at least both of the constructions that we have are kind of complicated. But on the plus side, it's easy to show that this is non-Fourier Mokai. Fury Mokai. Okay, so that was the good. So the good is, you know, we have a general construction, it works very well and it works, you know, just in a lot of cases you might be interested in. The bad is this X eta is a non-commutative of a deformation of X, and it's not a scheme. So I can't just give you. Scheme. So I can't just give you that. I mean, if I just gave you this functor, you would be unsatisfied because this is kind of a weird, you know, a functor that lands in a weird category. So that's not good enough for us. So we have to post-compose like here with another functor to go back to the geometric world. And this is also not particularly hard to do, but it is kind of dangerous because. Kind of dangerous because while you're composing with another functor, it could break the whole construction. So, in this example that we have with the quadric, we have this functor, which is, we know, is non-Freemokai, and it's kind of easy to show. But then we have to post-compose it to the derived category P4, and this could break the whole construction. So, essentially, what we did is we had to check. Check again from scratch that the composition from dBq to db of P4 is known for Mukaui. And this hinges on a pretty delicate obstruction theory that I won't go into because it's outside of the scope of this talk, but which acted in one case, which acted in this case of unknown singular quadratic in V4, my student. Before, my student, Felix Kung, is working to extend this to a family of cases. And the question is, can we get around this in any other way? Because, so I mean, the aim here that I have is to promise you that actually there are a lot of these functors that are non-free MUCAI. And if I just show you one, that's kind of Show you one that's kind of, you know, that's a little bit of a letdown, it's a little bit disappointed. So the question is, can we build more no-frame of Mukai functors using this functor L that we already have and avoiding this fact of post-composing with something that goes into Goes into a reasonable scheme back, and the answer is yes. So we can. So we can construct more non-free Mochi functors using this L. And the cost that we have to pay is that we kind of lose control over the target scheme. So, this scheme here is really nice. And in this talk that I'm going to give today, it may get Give today, it may get quite a bit bigger. Alice, before you go further, the second factor from QET to P4, is it for you, Mokai or not? I think so. Yes, I think so. Yes, I think so. You think it is for Yamokai, right? Yes. Do I understand you correctly? Okay, thanks. Okay, so the goal is this. Take a smooth projective scheme with a tilting bundle and the dimension of x should be greater or equal three and construct an afrium chi-functor. Construct a new freedom chi-functor from the derived category of x to the derived category of y for some scheme y. And the strategy is going to be like this. So we're going to take the functor L that we had in the previous slide. So this goes from the derived category of coherent shoes on X to the derived category of this. Category of this non-commutative deformation x eta. And then we're going to take the essential image of L inside of here. And this is quasi-equivalent of this perfect complexes over the endomorphism ring of Anomorphism ring of the image of the tilting bundle inside here. And so I can correstrict. So I get some functor that is still known for your Mochai from the derived category of X to perf of R, where R is going to be an A infinity algebra. And now we want a geometric realization for Realization for this R. So geometric realization is a fully faithful Fourier Machi functor from perf R to dB of Y, where Y should be a smooth projective case scheme. So in the next few slides, I'm going to tell you a little bit about how this geometric realization is constructed. Constructed. And again, the catches that I've been sort of sweeping under the rug a little bit is that this category, chi eta is an A infinity category, and this R is an A infinity algebra. And this will complicate things a bit, but I'll try to keep it simple. And is it important to work with? To work with A infinity? Couldn't you stay in DG world instead? Actually, it is crucial for us to, all of the constructions we have work so much better in the A infinity world. And I'll show you why. So, the way that this X eta is constructed is deforming forming um well you have to so i'll i'll get you know i'll get back to this later but um you're using you're starting from a category associated to x and then deforming it so that you get some stuff in uh you know sufficiently negative degree and you really need a infinity there and um um for example um the way that The way that you show that L cannot be free of Mukai is really easy on the A infinity level because essentially boils down to the fact that we have an abstraction theory for how A infinity functors work. And that doesn't work nearly as well on the Digi level. So A infinity, when you construct an Afinity. infinity when you construct an infinity functor you can do it iteratively one step at a time you know for hfi that you construct and and for that there's a really nice abstraction theory for you know for how that works and so that's sort of crucial to the philosophy of what we've done but also the you know many of the computations are done on the infinity level. Are done on the infinity level. Okay, so, but let's start classically. Okay, so I'm going to just start with the Auslambder algebra. So let's take a finite dimensional algebra over a field, and J is going to be the Jacobson radical of lambda. And I want to fix and such that And such that j to the n is equal to zero. So the Euslander algebra is defined like this: it's a finite-dimensional algebra given by the endomorphism of this direct sum where I'm taking successive quotients by powers of the Jacobson radical. So, before we go any further, let me put up a huge matrix on the screen. A huge matrix on the screen. Sorry about this. But it's actually okay. So I just want to tell you: this matrix is a sub-algebra of this gamma lambda. And that's actually really easy to see because if you start thinking about, so for example, if you take morphisms from lambda to lambda, you get this lambda over here. If you get morphisms, If you get morphisms from lambda to lambda divided by jn minus 1, we get this lambda divided by jn minus 1. And then if you get the morphisms from lambda divided by jn minus 1 to lambda, well, certainly j is contained in there because j to d n is equal to zero. So this n is equal to zero. So this so the actual all the morphisms could be bigger than this, but certainly j isn't there. And then you can fill out the whole matrix in this way. And I'm just putting it up now because I'm going to use it again. It's going to come up again in a little bit. Okay, so why is this awesome? So first of all, we have the result of our slander. Of all we have the result of Auslambder, so there exists a fully phaseful functor from perf of lambda to into perf of this gamma lambda, and gamma lambda has a finite global dimension. And then Ordov used this to well first of all, he got a semi-orthogonal decomposition. A semi-orthogonal decomposition for this perf of gamma lambda into very nice pieces. So all of these di's are central simple algebras. And so all of used all of this to find a geometric realization for finite dimensional algebra lambda, such that this piece here, this last piece, which is the The smaller one is a separable k-algebra. And then Serchek with the seventh Lunds had also a similar construction. In fact, a similar construction that also uses this matrix here to find categorical resolution of singularities for a scheme S such that the sub-scheme corresponding to subscheme corresponding to this bit again so OS divided by j is smooth okay so let's do the same for in the infinity case cool so the situation is going to be exactly the same except now everything is going to be infinity so instead of having an algebra we have Instead of having an algebra, we have an infinity algebra. And instead of, okay, so this is actually a little bit different. I'm going to take it back immediately. This is actually a little bit different because before we were filtering by powers of the Jacobson radicals, so before we had r j square j to the n minus one and then j n equal to zero. And now I'm going to take a situation that is slightly more general. So So I just want a filtration of R could be any filtration as long as it's compatible with the infinity structure. So for example, if I take M3 of F1 tensor F1 tensor F1, this should be inside F3 and so on. Okay. Okay, so I'm going to do the same thing that we did before and take this big matrix that we are friends with now. It's really the same matrix except that here I had J and now I have F1, here I had J square and now I have F2 and so on. So there's a slight pitch which Which is that for technical reasons I want to think of this as a category. So I have n objects and the morphisms between the object i and the object j is the entry is in the entry j, i in this matrix, and then composition is matrix multiplication. composition is matrix multiplication. But the info that information that is encoded in this matrix is the same as if this were a direct sum as before. It's just easier for our construction. So again, if R is concentrated in degree zero and F is the radical filtration, then we got the matrix that I showed you before. So an actual sub-algebra. So an actual sub-algebra of Slander's original definition. Okay, and we do get a similar result as before. So we have a fully faithful functor from perf of our infinity algebra to perf of this Auslander category. A slender category and a semi-orthogonal decomposition into pieces, and each of these pieces is just perfect of the smallest quotient. So again, the smallest quotient plays a special role. And this, I won't really go into the proof of this, but it's a very explicit computation. So you just write down some Write down some natural projective modules and then take their cones. This gives these objects SI that I wrote down here. But if you're tired of looking at matrices, just you can safely ignore this. And then you break off one of these pieces at the time, and there end the more. Their endomorphism rings are all like this divided by F1. Okay, so this is great because we got our geometrization result. So let R be a finite dimensional infinity algebra. Be a finite dimensional infinity algebra equipped with a finite descendant filtration. These are the hypotheses that I had before. And then I want R divided by F1 to be geometric. So again, this is the quotient by the biggest piece of the filtration. And remember, before we had a similar situation where we were asking that lambda divided by J is a separable. J is a separable k algebra, so this is kind of the analogous situation. And then there exists a fully faithful Florence I functor from perf R to dB Y, where Y is a smooth projective case scheme. And at this point, this is really easy. It's just done by sort of gluing geometrizations. Symmetrizations. And I'm being slightly imprecise here because you need a little bit more than just semi-orthogonal decomposition, you need the embeddings at the Digi level, but it doesn't, yeah, everything works out well. And so we can put this into a smooth projective case scheme. Also, perhaps I should mention that. Mention that so shortly after we wrote this, then Theo Red Skelders and Greg Stevenson also used it for proving another result, which is that every proper connective Digi algebra admits a geometric realization. So connective means the positive cohomologies are zero. Okay, so now that we have Okay, so now that we have our geometrization result, let's go back to constructing non-free Mocha functors. So first I have to tell you a little bit more about this non-commutative deformation that I sort of glossed over in the beginning. So I'm going to start with a smooth projective scheme, again of dimension m greater or equal 3. And so I'm going to take a sheaf on it. A sheaf on it. So this sheaf is going to be omega x tensor 2. But it's not, I mean, this is just a shift that works, but I'm sure there's a lot of other sheaves that work just as well. So, in principle, there are a lot of other deformations that you could cook up. So, first of all, we're going to take x and turn it into a category because we like categories. Categories behave a lot like algebras. So, they're sort of in many ways they're easy to get a hold of. So, we're going to take all of the data that we know about X and construct a category out of it. So, you take, I'm not going to tell you exactly how it works, but you take. Itself and how it works, but you take the data of an affine covering of X and you turn that into a category in such a way that modules over this category are the category of pre-sheaves associated to the covering. So sort of any sheet that you have on X becomes a module over this category chi. In fact, it becomes a bimodule. It becomes a bimodule. And then the cool thing about this is that the Hogshell chromology doesn't change. So anytime I have a sheaf on X, I can think of this as a bimodule on chi, and the Hawkshea cohomology stays the same. What does this comma M mean? Is it some kind of cohomology of a paper? Kind of cohomology of a pair, or what's that? So, in the same way that you have, if you're taking Haxie cohomology of a ring, you can take it with values in a bimodule, so you can do the same thing if you have a category. So, the Hochschild Kahomology adjusts texts from the identity functor to itself. And th these are homes from identity to the M to the by module M or By module M or what from the diagonal by module to M? So the way I usually think about this is to just construct the Hochschull complex, right, where you have where you just, you know, for a ring, you have in degree and you have minus. Uh, and you have minus n probably, you have morphisms from n tensor and copies of your ring to n and then you just take the chromology of that. But I think your definition also works okay. Okay, and then the next thing I'm going to do is I'm going to take a non-zero element in the Hogschut cohomology of X with Balisin M. So again, that's the same with the Hochschule cohomology of chi with Balizina. And now we can deform the category. And I'm going to deform it to an A-infinity category. This I'm going to call Kai Ita to remember. Going to call chi eta to remember that I deformed with eta. Oh, I should have oh, I should have done this so that it appeared one at a time. Anyway, that's okay. So the objects of this a infinity category are the same as the objects of chi. And then I'm going to add in some morphisms. So I had the morphisms in degree zero, which is just because chi is a category. And then I'm going to add some more morphisms in negative degree given by this bar module n. And then I'm going to put an infinity structure on this. So I have to do two things. So I have composition, which is just coming from composition. Coming from composition in chi. And then I have a higher, just one unique higher multiplication, which is m for 2m. So these are 2m copies of chi. And so because this eta is in etiquette, Uh h2m. So actually, I'm cheating a little bit here because I need a co-cycle. I don't need an element in the cohomology, but you can lift eta to a co-cycle. So what that means is if eta n is in h2m of chi with coefficients in m, this means I have just lifted this to a co-cycle. This corresponds to A co-cycle, this corresponds to a morphism from 2m copies of chi to my m. And this is almost good enough, except that I have to go back to chi peta because that's where I want to live. But that's okay. So essentially, I'm using so essentially, I'm using this eta from 2M copies of chi to m and then this. Chi to m and then this m composition chi and I'm extending both of them linearly to be zero and whatever whatever this data doesn't include okay is sigma just the translation sorry sorry what is sigma just the shift yes I yeah sorry I've been like really sloppy with shifts because I need I would Labor with shifts because I would need some shifts here too, which I sort of was too lazy to put in. So, this is just telling you that this m doesn't sit in degree zero, it sits in negative degree. And this is sort of crucial for us because, yeah, this gap of you have a bunch of zeros in the morphisms, and that's really important for the way that we construct things. We construct things. Okay, but so essentially, this category may look a little bit scary, but it's actually really simple. There's just the original category in degree zero, and then a little bit of stuff in negative enough degree that can, you know, create enough problems so that our functor L from dBx to dbx eta breaks and is not free. Breaks and is not free Mokai, but not enough stuff to make this too complicated. Okay, so let's and high apparitions are all zero, are they? Sorry? What about high apparatians? Are all of them zero? Yes, so there's only two of them. And the differential is also zero, right? Is also zero, right? Yes. Okay, so let's put this all together. Sorry again, and does it matter how you lift your cohomology class to ecocycle? No, not really. For any lift, this will be an A-infinity structure, right? I think so. Structure, right? I think so. So, I mean, I'm asking about this associativity property. So, it will hold, you see, right? Yes. Yeah, so you need a cosycle. Okay. Okay, so this is the theorem. So, x. So X smooth projector scheme dimension greater or equal than 3 than usual as usual. I'm going to take this sheaf, which is omega x tensor 2, just because I know what the Hockschild cohomology of X M is. So the top, I just need the top one. Top, I just need the top one, and the top one is one-dimensional. So this HH2M in this situation is one-dimensional, so I can certainly take a non-zero eta. And I want X to have a tilting bundle for reasons that will become clear very soon. And then there is a And then there is a non-Fourier Mukai functor from dBx to dBy, where y is a smooth projective scheme. And I shouldn't, I really shouldn't have called this L. I apologize. So essentially, for most smooth projective schemes, well, if they have a tilting bundle, then we can construct a non-Fourier Muccai functor with a source, the derived category of that scheme. The derived category of that scheme and target, we don't know. Okay, so how do you show this? So we start with this non-free Muki functor that I told you about in the beginning from the derived category of X to the derived category of chi eta. So now I've curled this up a little bit because at the beginning I was being a little bit dishonest. Being a little bit dishonest. So now you know that this chi eta, this, you know, the thing, this thing that in the beginning I called the non-commutative deformation of x, now we know exactly what it is, is this A infinity category where I deform this category by putting some stuff in negative degree. And we have this functor L, which is complicated to construct, but it's easy to show that it's not for Mokai. Is not for Makai. And yeah, so because this is an A infinity category, perhaps I should mention that this is the direct category of A infinity modules, which is actually very well behaved because so if you have an A infinity category, then The their infinity modules over chi eta form a DG category. Yeah, great. Okay, so is it big derived category like only infinite modules or is it something like perfect modules? I'm gonna take them all, but it won't matter because. I'm going to take them all, but it won't matter because I'm going to corestrict in a second. Okay. So I'm going to take the tilting bundle that we have on X and send it forward here. So we're going to have L of t that sits into the infinity of chi eta. So I'm going to call the endomorphisms of this L of t, I'm going to denote it by R. I'm going to denote it by R. So, this is an A infinity algebra. And by the way that we constructed this functor L and this category chi eta, we know that the cohomology of R is concentrated in degree, in negative degree, in non-positive degree, sorry. And this H0 of R is just the endomorphic. Uh, just the endomorphism ring of T. In particular, it's tautologically geometric, which is great because it's a great candidate for the first piece in our filtration. Remember, we wanted something geometric to apply our results, and in fact, this works really well. This works really well by just taking the easiest filtration, the filtration by degree. So this is, it's easy to show that this is compatible with the I infinity structure. And then remember, this is essentially all we needed to apply our geometrization results. We wanted the filtration compatible with the infinity structure, and we wanted The first piece to be geometric. And so, so we take, sorry, yeah, I didn't write this down, but I wrote this down earlier. So, you start with this functor L from dBx to the infinity of chi eta, and then I want to correst to Want to correct to perf R, which I can do because there's going to be perf R is certainly sitting inside here, and there's a quasi-equivalence with the essential image of L. So I can restrict L to just something like dBx to perf R, and then I can apply my geometrization result and end up in a End up in a smooth projective scheme again, dBy, and this is our big source of new examples of non-freemokai functors. And I think this is all I wanted to say, so I'll stop here. Thank you. Great. Thank you very much, Alice, for the talk. Please thank Alice in the chat or. Chat or on mute, whatever you wish. Um, questions can I ask: Is it easy to see what breaks when the dimension is less than three? Yeah, so for dimension less than three, here's what's going on. So I have some positive results, some partial results about Trying to figure out what happens when you have an exact functor between two things, and you know, if the dimension is small, actually things seem to behave better at least generically. And so I had this, you know, this kind of nice result since low dimension, and I, you know, was kind of banging my head for why I couldn't do this. You know, why I couldn't do this in higher dimension. And it looks like partially the behavior is just different in higher dimension. But also for our construction, having dimension at least three is sort of important because it allows us to construct this category chi eta in a way that the degree is small enough. So chi eta is concentrated in two degrees and it's concentrated in degrees. In two degrees, and it's considered in degree zero, and it, and the other is some negative degree. And there's uh, there needs to be a gap in between those two. So, we need some zeros in there, which is why we need the dimension to be big enough. Thank you. So it's a mix of, yeah, I'm not quite sure what to say. It's a mix of we probably kind of need it, but also it's, you know, it makes our construction work. Makes our construction work. I was just trying to see where in the construction you use three, and it gets, as you say, it's in this gap in the degrees. So I have a couple questions. One, what's the relevance of taking the second power of the canonical for M? It's just nice because you immediately get that using search. That using SERD duality in the you're computing a Hartshill cohomology, so you have to push to the product of X with itself, and then you use Ser duality there. On the diagonal, right? So there you have that the S functor is the product of DO2 omega X from the two factors. And so like Factors and so like that immediately cancels out to get to that how she comes with one-dimensional. So we're using this kind of trick that, you know, of using serviality a couple of times. But it's not, I mean, other than computations are particularly easy for this M, it's not, you know, it's not special in any way. So this actually, you know. Actually, you know, this result is probably much more general. It's just, you know, it's just a bit harder to compute. And I think you mentioned this. My second question was, I didn't understand exactly why the composition is not for you. Like you mentioned that L, it's easy to show L is not for you, Mokai, but now why is this whole functor from dbx to dby? DBX to dby, not for you, Mukai. Oh, this one. Oh, yeah. Yeah, so I mean, because this second arrow now is a full, you know, it's an Magnus fully faithful. So, I mean, if you want, you can, well, one way to say it is it's enough to It's enough to cover straight, right? So instead of dby here, I could just have the essential image of the second functor. Yeah, I'm sorry. Thank you for asking this because I really should have said. So it's enough to consider, it's enough to show that the composition of L with this co-restricted sacrament arrow is known for Muka. Restricted second error is known for Mukai, but this is essentially then this becomes just an equivalence. And you know. So it's there's really nothing to show. And can you say a couple of words about how this functor L is constructed? Yeah, so it's kind of an involved construction. So essentially we had, so the first construction that Michelle and I had was using, well, so L, first of all, she's either L is the left adjoint functor. Left adjoint functor. But so it's really constructed iteratively. So you take, first of all, you take injective sheaves in X and you prescribe an image for those. And then you build it up by sort of showing that there's only one way to construct it. To construct it for everything else. And then Amnon Neeman has this other construction using T structures and which, you know, it also starts from the basic building blocks and then using good couples is kind of easier to extend. But it's kind of a really It's kind of a really complicated construction, and yeah, and then yeah, I guess Amnon's construction is just easy, you know, it's one of the things that's easier about it is that, you know, sort of exactness, it's easy to show, and for us, we have to work even more to show exactness. But yeah, it's It's a complicated functor to construct, actually. I don't think I've ever talked about that in a talk because it's quite technical. And you said it is left adjoint, is it? Yeah. I mean, it is left. It is left adjoint of what? Well, to the functor going the other way. And is this functor going the other way easier to describe? Yes. Yes, because essentially it's the functor taking the zeroth cohomology. Right, so if you have if you have this x and this chi eta, and you just forget the part that isn't in degree zero, then you can make a functor out of that. So it's kind of truncation functor, right? Right. But I guess the joint function. I guess the joint functor of an exact functor is always exact. So, probably to prove exactness, if you know that it is a joint, it shouldn't be hard. Yeah, I don't, I'm sorry, I don't remember. Okay, anyway, thank you very much. Great. Do we have other questions? So I just wanted to make sure I got this right. So like the first theorem that you had in the first slide, so that was a different construction where from like the quadric to yeah, okay. So this was a different construction where you could get the y. The why explicitly? Yes, yes. So that's quite different because, you know, like in this case, there's a trade-off, right? So either you can make the target derived category nice, so even very nice. Or you lose control a bit, you know, you lose control in the dimension. You know, you lose control in the dimension because this why, you know, if you're doing a geometric realization, the y is going to get really big. So if you want a target that is small so that it looks more like a functor that of the kind that we work with, then you have to work quite a bit harder because you have to Harder because you have to show again that this composition is not for Imokai, or you can just say, Well, I don't care where I end up, I just care about quantity over quality. Then in that case, you can construct a whole bunch. Okay, and the trade-off being that this functor is harder to construct in this example here? This it's not harder to construct, it's just harder to prove that it's not free Mooka because it's. That it's not free Muka because it's sort of, you know, in this situation that I talked about today, you sort of get it for free that you know, you still have a composition of two functors, but you get for free that the composition is now free in Machia, so much so that I kind of almost forgot to explain that. But instead, here in this situation, you really have to work quite hard to show the discomposition of two functions. That this composition of two functors is now free of R. Okay, great, thanks. Okay, if there are no more questions, then let's thank Alice again for that great talk. Thank you. And okay, we will resume in about eight minutes, I guess, with the next talk. I guess, with the next talk, okay, are you already here, Sharmico? Yes. Okay, great. 