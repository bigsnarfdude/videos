Let's start. Thank you for the organizers that I'm here. It's an honor to be here, to give the presentation, especially thanks to Deepish, who invited me. Unfortunately, he cannot be here right now, but I think he's online. So thanks, Deepish. Okay, maybe before lunch, some slides to relax, not as complicated deep algebra. Less complicated deep algebra stuff. More the shallow numeric side. Okay, I begin with some obligation, introduction, like yeah, classic before. And then I specify what is the underlying PDE I want to solve, where does it come from? And then I show or explain two different approaches how to build finite element methods to solve these. PDE is. To solve these PDEs approximately. And then maybe it depends on the time. Maybe you want to have lunch early or not. Then maybe some words about linearisticity so that we can apply the general thing to a specific context. Okay, so what's the motivation? So no big formulas. So at the end, I want to do finite element simulation and typical work. Typical work path is: you have the BDE with two additional conditions, boundary conditions, maybe initial conditions, and you will have want to have approximations for it. And then, okay, you have the origin BDE, but it's not very suitable to do computations. Then you transfer it to some variational formulation, a weak formulation, which is typically done by just multiplying with some test function doing the depression by parts. And then you have the weak formulation, which typically depends. Decorrelation, which typically depends on an infinite-dimensional Hilbert space, and then you instead of the complete Hilbert space, you go to some finite-dimensional subspace. And hopefully, if you plug it in, you get some at least a linear case non-linear system, some solution, and then maybe it's a good approximation or not. So, but these steps are often the same. And one toy example which has been popped up at different times is the Broso-Regulations, maybe the easiest. Equations, maybe the easiest equation you can think of. It's just La Bausian minus Laplacian. Some u is some source function, and then you can transfer the La Bausian to carryans. And yes, it was Martin's talk. And yes, Brindaby, you can now think of what discrete spaces I can plug in. And the easiest one is just head functions. So at each point in the mesh, one arrow is zero. Mesh one ergonomic zero. Okay, we need some boundary computations here. Yeah, zero boundary insert. It's the easiest thing you can do. Plug in and it works. So that's the nice thing. So this simple head function seems to be the correct basis for such problem. It converges at least if your exact solution is good enough. So that 3D picture, nice picture. That's not the head function 2D. So that's a 2D problem. Sorry, adjustment square and the head function. So that the basis function. That the head function, so that the basis functions, yes, correct. Yeah, so all of them, so they're all one, right? That's the partition unit. Analysis, if you would sum, if you would plot kind of all of them, you would have one exit of the boundary. It's just that's the partition. If I would sum the if I would sum them, yes, that's not the sum, that's each. Okay, data is separate. Okay,  