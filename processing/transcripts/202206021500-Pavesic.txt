Thank you very much. Let me start. This talk is going to be kind of a combination that should work both for people in the room as for if there is anyone on the at home. So the title is fiber TC of a map, but before getting there, I will Before getting there, I will take the opportunity to make a long introduction where I see some of these things interesting and important. And then in the second part, I will talk about, say, non-technical aspects of this fiber TC topic. So, I mean, this I mean, this topological complexity subject is here for just quite a long time. It's not anymore a new theory. So I think that it is good when at some stage to think about three main aspects. So one of them is what are the origins of the what are the origins of the uh of the theory what are we doing normally uh when when it uh every uh everything uh when every everything started then also i mean theory has developed a lot uh so there are many uh many different aspects uh developments people try to do in topological complexity what they know that uh worked in other areas try to connect with other areas Areas, try to connect with other areas, which is really important. And I also think that we need to look at possible new problems where the theory should go. So let me just start a bit about this, if you want, historical part. The question is, with topological complexity, when we start considering new problems, what are we actually modeling? What are we actually modeling? So, the initial idea, the idea that appears almost in every introduction to every paper in topological complexity, is that we have some space, some topological space that we consider as a workspace, a space of positions of some robotic, some automatic device. And we want to kind of plan the moving within this. The moving within this within space in an autonomous way. And as Michael explained in the first talk, you have normally in these situations either discrete choices or continuous choices. And we essentially work in the second world of continuous choices. And given two points, we study which way are we going. Which way are we going to choose in continuous paths? Oh, sorry, I just didn't mention, it is not going to be very important. I'm not going to mention many numerical results, but I live in the non-normalized world. So topological complexity of a point is one. But it won't matter much here. So the problem is given two points in the work space. We want to find continuous motion within this space. Motion within this space, which starts at the first coordinate and ends in the second coordinate. So, I mean, a path is by definition continuous, but we want another kind of continuity, namely the continuity of choice of paths. So, not only the paths must be continuous, but also the choice, the dependence of the path on the initial and final point should be continuous. Uh, initial and final point should be as continuous as possible because we know there are issues, there are problems. So we have different uh names for this. Sometimes we call this uh robust, sometimes we call this predictable motion. And this is an essential feature because think of it. I mean, if you have a robot moving around or a human, a person walking in a crowd, walking in woods, on just some small narrow Woods on just some small narrow paths, or driving a car, you essentially look at people around and you want to know whether they are going to turn right, turn left, go to some side. Most of the time, of course, there are singularities, but most of the time you want to kind of be able to guess from their position, their posture, what are they going to do. And this is essentially the idea. And if you have some collaboration and you have Some collaboration, and you have robots with sensors. They know what's the program of their colleagues, if you want, but still they detect the position with some precision. And then you want to be sure what the other one is going to do just not to crash into it. Most of the time, we know that it is not impossible to do it all the time, but most of the time we want to do that. Okay, so I mean, we want predict. Okay, so I mean, we want predictable motion plans, and the minimum number of predictable motion plans that are needed to cover all possible pairs, choices of points in workspace is defined to be the topological complexity of motion planning in this space W. Okay. Now, of course, we know that that was the beginning of the story. We have a lot of important extensions. I would I would mention just a few. One of them is this collision-free motion. This is, in a sense, maybe the most interesting case here. So this is motion planning for, say, N robot devices that move in the same workspace. So we want them not to collide. I mean, they cannot be at the same time in the same place. So this is the topological complexity of the configuration. Complexity of the configuration space of n objects, which we idealize as points in a workspace. And also, the second important aspect that appeared several times during this conference is motion planning with prescribed stops. If we have a number of prescribed, if you want, checkpoints, then this becomes higher topological complexity. Complexity of motion planning in the space. Okay, so here, so in this motion planning, each device is essentially considered to be kind of a black box. I mean, you just give instructions and the robot goes that way or the other way, turns left, turns right, whatever you want. And this happens kind of magical. It just follows. It just follows its instructions and you don't care how it really does each move. Okay, but what happens if we open each black box, right? Then we open the robots, take off the lids and see, I mean, all part of complicated components of this robot machine. And the motion of And the motion of each part is result of a motion, I mean, result in a motion of this robot device. So the next stage, if you want, is what I call manipulation planning, or maybe steering of a robot. So now we have two spaces. We have a space of internal states of a robot and the workspace of the robot. And we have some map which relates the two. And in robotics, this is called. And in robotics, this is called a forward kinematic map, which for each position in the configuration space says what the position of the robot. And typically, what I have in mind is that the configuration space is some subspace of a product of circles for each rotational joint and a product of copies of intervals if you want reals for each sliding. Reels for each sliding joint, and these are, I mean, there are other joints, but these are the most useful, most practical. And the workspace is usually either a position in a space or a position together with the rotation, I mean the orientation of your object, which is usually called the pose of a robot. So a position plus orientation. And most of the time, my map F is a smooth map. Okay, so this is not only continuous, it's a smooth map. Not only continuous, it's a smooth map, but usually with singularities. So, I mean, you just go to Google and say robot arm, something like that, and you get thousands of pictures. So, for example, if you ask for the SCA SCARA design, this is probably the most used industrial robot design. It is simple, efficient, strong, can do a lot of things. Strong can do a lot of things and already gives us a toy model for this manipulation plan. So this is just schematical description. So you have two axes, sometimes it has three, but it doesn't really matter. And then it has this is rotational joints, and there is a sliding track. So the internal states of this machine is a product of two copies of a circle. Copies of a circle, or maybe parts of a circle if there are some blocking mechanisms, and then some interval which says that your machine can go up and down. Okay, and the workspace is it's easy to visualize is this kind of space which is like a cylinder with a hole in it. And the map you can easily write formulas given by some trigonometry. Trigonometry, it is a smooth map, it is two to one most of the time, except on the boundaries when it is one to one. So, I mean, the first thing that you see, it's not a fabrication. Another example, also very common in robotics, is what's called the robot's wrist or triple-roll wrist. Triple roll refers to having three different axis of rotation. And again, you have many. And again, you have many different methods to build this. And again, here the configuration space is now a product of two copies, of three copies of the circle. Workspace, now I'm going to disregard position and look only on the orientation, so SO3 of the hand, because this is what you want to obtain with the hand. And you again get some trigonometric form. Again, get some trigonometric formulas to give you a smooth map from this three-dimensional torus to SO3. Okay, so what's the manipulation? It's around for a while. So the idea is that your robot is in some internal state. You get some position to which you want to bring it. So you want a path, a sequence of. A path, a sequence of motions in the internal space of the robot, because this is what you give commands. You give commands to individual joints when you write a program, a software, right? So you want a path in the configuration space such that it starts at your initial position, the state that you found the robot, and it ends up in some point in the configuration space. In the configuration space, which via the configuration, the format kinematic map corresponds to the desired position of the robot. Okay, so if you and of course, as before, you want to do this as predictable as possible. So the minimal number of such predictable manipulation plans needed to cover all possible points in C cross V is called topological complexity of this forwarding. Complexity of this forward kinematic map. Okay. So formally, you all know how to do this. You just take the projection from paths to this product. You say, okay, projection sends a path to the initial point and then to f of the final point. So you just read when it happens. And we define the topological complexity of this guy as a sectional number. So be careful. So this is a number of precise. So, this is a number of precise, exact sections that are needed to solve this problem. It is not a C cat that we are more used to it because it gives an answer, but an answer to a different problem. Because this map is not a vibration in general. So, CCAT is just a lower bound for C, right? So, let me just make a couple of notes. Just make a couple of notes, for example. So it's always the case that a section number is bigger or equal to the sectional category, and they are equal if it is a vibration. Also, it is a proposition that this map is a vibration if and only if F is a vibration. And then you can make, for example, in our two toy examples. Toy examples. So for the Scala design, this one has a section. It is not a vibration. And topological complexity can be computed. It is three. For the triple row list, it doesn't have a section, not the global section. It is not a fabrication. Its topological complexity, it is either four or five, and I don't know which one. Okay. Now we must be. We must be careful. So, we often assume that the map is vibration or that the map has a section. This is useful. But there are results from Dan Gottlieb from the 80s, which says, well, if your configuration space is a torus of any dimension, so you can add as many joints that you want, and if your workspace is or it deforms to a sphere or to SO. Or to SO3, so I mean, only if SO3 is a factor of it, that's already the case, or the special Euclidean group which combines the two. Then every smooth map, for every smooth map, is two things are true. There is no global section and it always has singularities. And hence, singularities, in a sense, there are always points when the smooth map loses, I mean. I mean, Jacobian is not subjective. Okay, so you lose what the robotics people say, you lose your freedom of movement. You cannot move in all possible directions. Somehow, in some positions, you are bounded to go only in certain directions. That's very unpleasant. Your mechanism gets stuck. Okay? Engineers solve this by prohibiting those regions and so on, but that can. Those regions and so on. But that can be a problem because those singularities can separate your space. And often they do. And if they separate, then you cannot go from one position to the other without going through singularity. Okay, so I showed one example of what the topological complexity of a med models, but actually it can be used to model several. Model it can be used to model several other things. So, for example, it can model some of the versions of symmetric planning. Because if you consider just a map, you think that g acts on x. If you consider topological complexity of this quotient map, this is just saying, okay, I don't care which of the final positions respect to this group actions I end up, I just want to. I just want to move it in my space so that the final position is one of the allowed to do the job. Okay, I mean, for grabbing, it doesn't matter if it is like this or like this, but it matters if it is like this because then it can slip down. But those two positions are fine for grab. So, I mean, you can model symmetric planning using this. Often, Often you have a complicated mechanism that moves a lot of parts, but only some parts do the job. So, this is especially case like this is a famous Stewart platform. It's used in, it's very strong, it can be precisely positioned, it's made of simple sliding joints, and it can give you almost every possible Almost every possible orientation. So it's very often used. Now you have a complicated mechanism, but you are actually interested only in the state of this platform. You don't care what's going on under the platform. So essentially, you have a configuration space of all positions, but you project to some subspace. And you And you take that topological complexity of this projection. So, this is very often the case when you have such closed mechanisms, not open mechanisms are usually direct, closed mechanism when you have closed, I mean, sequences of what's linkages, right? I mean, here it's usually called linkages, then this is very often the case. Okay, and another example. And another example, and there are really plenty. This is, I was trying to do some simple toy computation: when you have collision-free manipulation. So you have more than one robot that moves somewhere, that its parts move somewhere. So when you have, okay, it's hard to see, but here you have two scar. Oh, okay, this is Puma design, doesn't matter. So it's a different design, more complicated, and you want them not to collide. And you want them not to collide into each other, but you want them to work almost on the same space. Or here, there is just some fancy thing. They make robots that are music directors. Of course, I mean, it seems easy, but I mean, you need to teach a robot not to break his hands. And so you have two parts of the mechanism that move in the same space. That move in the same space. And you will see that some of them, I mean, if you look, some of them, there is an imaginary line and the left hand doesn't cross the right hand. But this is not how you work. I mean, people work differently. You cross your hands and somehow it is hardwired that you don't crash one hand into the other. One hand into the other. Okay, so to model this is more complicated because now you have two things to consider. One of them is you take a subspace of your workspace, which is some collision-free version for a number of devices. And then you take pre-image of that in the product of copies of the configuration space and take all of it, or maybe a part of it sometimes, because then again. Part of it sometimes, because then again you forbid certain subspace. And you consider topological complexity of this essentially power of fn, but restricted to x from x to y. Okay, so this becomes complicated, it's hard to compute what happens, but for example, I was able to do computations for two scara designs, one close to the other, trying not to hit. Trying not to hit each other. Okay. So let me just remind you of some history because it's not very long. As far as I know, the first time that this concept was proposed was in a conference in Castro, Realis, where Sasha Bronishnikov defined TCF mostly by the same motivation. Uh, by the same motivation and develop just some basic properties. Then I wrote a couple of papers: first one for a robotics journal, and then more mathematical ones. Then, of course, this is always the publication year. So, for example, Anicito, Muyo, and G-Wu defined TCODE work map essentially at the same time. So, the first archive prep appeared, I mean, the same. Uh, appeared, I mean, the same month, uh, but it uh it was published later. So, this is a variant, it's called the topological complexity of the work map. And just recently, Jamie Scott published a paper and he examines and compares these various definitions of TC of a map. So, I'm going to return to this later, yeah, assuming that I will have enough time. Okay. Okay, um, so uh, that's the story. I mean, we all kind of know of it, but uh, let me ask the following question. I mean, what's out of this, uh, all of this, what is a takeaway for engineers? What they should know out? So, uh, first thing is, uh, and this is new, I mean, they already knew that it's not possible to build continuous With continuous, robust, predictable motion plans. But as for why it was a mystery, so for example, then Gottlieb reports how one of those famous people was giving a PhDs after PhDs to people that tried to say, okay, if it can be done with three joints, but with four joints, five joints, I mean, making redundant mechanisms. I mean, making redundant mechanisms until he proved that it doesn't matter. You can put 26 joints, you will always have unaccessible positions, and your singular space is just growing up. It doesn't help. So this is one takeaway. There are actually theoretical lower bounds for the complexity of algorithms and just for the complexity of software, which is required to resolve various motions. Various motion and manipulation planning problems. So, this is a hard fact of robotics. And, well, that's maybe not good news, but there is some good news here that these lower bounds, however, are not that bad. I mean, they are not interested if they need to program two or three sub-procedures. Important it is that you don't need It is that you don't need hundreds, right? And we all know that those lower bounds that we compute are roughly linear in what is typical of, I mean, what is characteristic of a problem. In a sense, maybe the number of parts of the robot, the number of robots in the configuration space, the number of obstacles, the number of crossings in a graph when you move in a graph. Graph, when you move in a graph, lower bounds are usually linear in, or I mean, twice on a certain number of them. Even for higher topological complexity, it is linear either in this characteristic or if you look at the number of intermediate checkpoints that you want to do. Okay, so this sounds like good news, but it's my impression that for the purpose of engineering. That for the purpose of engineering, these lower bounds can be actually seriously underestimated from the engineering point of view. Okay, so now this certainly needs explanation because we know that many of those lower bounds are exact. I mean, they give us exactly or maybe off by one the number of motion plans that are needed. Of motion plans that are needed. So, in what sense I feel that this can be underestimated? Well, this is something that I think emerged relatively recently. So when we started to write down explicit motion plans for more complicated situations, like for configuration spaces. So we know that we need exactly that number, like 2n or something. Like two n or something motion plans, but they are not uniform, they are always patched from many different things. So that's these motion plans are continuous, but you still need to program each one. So, to give you, I mean, so some people. So, some people try to do that, and I'm very well aware what's the problem. Some are not. So, maybe if I give you just this simple-minded example, take a polyhedron. How can you build a motion plan for a polyhedron? You split a polyhedron in open simplicity, right? Take a product, so I mean each simplex by each simplex, you can define an obvious. Define an obvious map from once. I mean, the product is contractible, so you can define some motion plan and then you aggregate that, then you patch them together. And well, I mean, topologically, you know, that some, if you combine them in an intelligent way, you get essentially about twice the dimension of separated sub-collections. And if you have Collections. And if you have separated sub-collections, the map that is defined on each of them is actually continuous on the unit. So you get this diagonal argument that appears so often. And you have at most twice the dimension continuous motion plans. But I mean, this is kind of cheating from the point of view of the engineer, because, I mean, you need to program. You need to program something for every pair of those elements. Yeah, right. So, I mean, from their viewpoint, the topological, the complexity of making a software is quadratic, it's not linear. Okay, so I'm not inventing this. I mean, I was talking to people. I said, no, no, no, I mean, I need to program all of those. need to program all of them it's not that i program uh i mean there is there is always i mean this program has if then else and so on over all of these uh these situations so okay uh so so the conclusion would be twice the dimension but explicit i mean in fact it is not uh and as far as i know and some of you are more uh like try this harder Like, try this harder. Almost all examples when there are explicit motion plans are done like that. So you define it on smaller parts, right? You did that, I mean, and then you patch it together. But essentially, you have many, many cases. Michael said that, I mean, you can have thousands of different individual cases, then you then combine in 15, right? Okay, so. Okay, so I think that one of the things that we are probably ready to attack now, one of the problems is to find a way to quantify the real complexity of this problem. So, of course, the first attempt would be to count somehow these components, but this is not clear because, I mean, try to say that it is the same formula on two different or it is a. On two different, or it is a different formula. There is no clear distinction. But okay, let me give you just a suggestion what could be more topological here, so more invariant kind of measure of complexity. So, to do that, I must recall something about this idea that topological complexity. Uh, idea that topological complexity also detects points of instability of a motion plan, right? You know, what's the point of instability, you have a motion plan at some points, you exactly know if you are there or you are close to it, you know exactly what the robot is going to do. But then there are points which are on the common front here of different motion plans, so in those points. Motion plans. So, in those points, you don't know. You look at the robot, and maybe it is a bit to the left, so it's going to say to use motion plan A, or it is a bit to the right and is going to use motion plan B. So, that's a point of instability. You don't know exactly which one is going to use. And, okay, that's a point of instability of degree too. Instability is the, but there may be points where you have in the Points where you have in the immediate neighborhood three different motion planes, or four or five. Okay, and so very here early in the theory, Farber in 2004 proved that actually topological complexity measures that if topological complexity is some number, then there is at least one point where the degree, the order of instability is at least that number. Is at least that number, which is kind of huge. I mean, that means if you have order the topological complexity 10, there will be always points when you, I mean, in every neighborhood, the robot will choose one of 10 completely different ways to act. Okay, so this is like a picture for degree of instability two or a degree of instability three. Or a degree of instability three and so on. And also, I proved a similar result for the topological complexity of a map. So, this extends. Okay, so far we have a theorem saying that there is a if topological complexity is n, then there is a point that has degree of instability n. But actually, then there are many points and there can be many. Many points, and there can be many points that have top instability, and there are certainly points that have instability, n minus one, n minus two, n minus three. So the set, the singular set of this motion plan is some topological space. It is naturally stratified, and because you have points of instability, two, three, four, up to the topological complexity of the space. And this singular set, in a sense, Set in a sense describes determines how complicated is the motion plan. Okay, so it's hard to compute. I try to do this for spheres and things like that, and it's already can get a bit complicated, even if you have a small number of sets. And of course, it's, I mean, you change a bit the motion plan, so you change. But there is a feeling that there is some topological. That there is some topological invariance there that can be determined. In particular, if you want, I mean, topological complexity of the space is related to the dimension of that space. Take a nerve, do things like that. So my question here would be: what can we say about the size or the structure of the set of instabilities? Instabilities of any or at least optimal motion planners for X. Now, the question about size is maybe not a topological question, but it can make sense. You say, well, at some level of precision, of measurement, what is the, I mean, you increase, you take the regular neighborhood of this singular set. How big is it? I mean, is this 1% of the entire space or it is 10%? Or it is 10%, I mean, or it is half of the space. And the topological structure. So, I mean, how many, what's the homology of this space? Maybe what's the persistence homology of this space since we have a stratification? Okay, so that's the introduction. I have like six minutes left, but yeah, okay, but it's not that bad. I have like two-thirds through the. like two-thirds through the talk cool so let me now return to the uh uh to the question from from my title fibered fiber topological complexity uh of a map um so before going there uh i i'm going to review really briefly the uh parametrize the so the topological complexity of a of a space Complexity of a space. This was done a few years ago, published recently by Den Coin, Michael Farber, and Schmuel Weinberger. They considered motion planning problem, so collision-free motion with obstacles, and they realized that if you have a set of obstacles, then this is a natural way to split the problem. Okay, you have some set of obstacles, this is one problem, a different set of obstacles is a different problem. Set of obstacles is a different problem, the third one. So, in a sense, you simplify your question. And this is always good in mathematics, right? So, you can have motion planning in a space in X, or you can have motion planning relative to this splitting. So, in the first case, this is the sectional category of this projection as we started. The second one is a sectional category. Is a sectional category again of these gadgets, which were defined several times in this conference. So I had the opportunity to skip the definition. So these are pairs of points that are on the same fiber with respect. So in the same problem. And the top space is in the you move under the same set of conditions. Conditions. Okay, so when I first attended Michael's talk about that, I immediately said, well, I mean, you are simplifying your problem because instead of initial points in X cross X, you get initial points in a subspace. It's not just any subset. It is lower dimension. It has lower category. So it's an easier problem, right? It should be less. Should be, it should be less, but then immediately I realize: yes, but you are also restricting the space of solutions. You're not going everywhere, you're just going under the same set of solutions. So you can less room to move. So maybe it's bigger. Well, these are configuration spaces. In configuration spaces, the result is always magically just the maximum, the theoretical maximum that you get. That's the topological complexity. That's the topological complexity. It is hard to prove, but somehow it always is the result. So, in this case, too, the topological complexity results to be just the category of this space. Not always for the case of collision-free motion plan. Okay. One of the crucial properties here is that this. Crucial property here is that this map is a vibration. This is not always the case, but here it is. You can use it, and also you can use some hard computation to prove the lower bound. The lower bound coincides with this theoretical, I mean, relatively straightforward upper bound. Okay. So, actually, I want to extend. Actually, I want to extend this to manipulation planning. So, again, I mean, the beginning is as before, you take a map, assume that it is subjective, assume that the spaces are part connected so that there is a solution. And then assume that the condominium fibers over some space. So, it splits into fibers. And this is formalized by some map from Y. Some map from the uh from y to b okay, then automatically, uh, uh, you have this composition, uh, q composed f gives you a map from x to b and f immediately become becomes a map over b in a sense of what Jose was explaining precisely and with all details. So essentially, Essentially, once you fiber your prodomain, you get a bunch of, if you want, isolated problems, simpler problems. And so you have those maps and we are kind of naturally led to consider this B-indexed family of manipulation planning problems and giving a topological complexity of this slice map. Slice map, if you want, for each B. So we again define topological complexity of B of F to be the sectional number, not the sectional category of this projection. Okay, what can be said about that? Well, there is always this lower bound of homological which says that, well, it is at least the Is at least the nil potency of the kernel of this map, which goes from the base space and the top space is homotopy equivalent to X. So you just do this and it can be kernel can be computed, nil potency a bit harder, but it can be computed in some in some cases. But again, you want upper bounds. And I remind you, this is not a vibration. Upper bounds. This is not a vibration. Upper bounds for space for a map that is not a vibration. It's so sectional, sectional number can be arbitrarily bigger than sectional category. There is, I mean, whichever number you want, it's somehow it can jump approximately by the dimension of the space. So you want to compute some upper bounds and also some topological lower bounds, not only cohomological. not not only cohomological and this is one thing that i would i mean if anyone tries to do that i already did and one thing appears so there is a condition that is automatic for spaces and for maps between spaces it is not automatically given for maps between fiber spaces this is something that jose also mentioned you want those things to be fiber wise pointed so you want a continuous choice of base points Continuous choice of base points in each fiber. I mean, you can always choose one base point, but the continuous choice in the fiber, it is harder to have. This is an assumption, a non-trivial one. Well, unfortunately, whatever you try, you return to this assumption. You need this to prove almost any topological result about the topological complexity of the, I mean, fiber. Uh, but I mean, fiber topological complexity of MF. So, okay, so this is the part that I wanted to say for whoever will try to do these things. And this is exactly the point that, now to wrap up, this is exactly the point which kind of led me to the problem that I mentioned before. Because, of course, if you don't have a If you don't have a global pointing, a global choice of a point, you can try with local ones. So you split. But then you also need to split each. So you have some cover of the base space, which combines with some set of local choices of base points. And they are not coherent in any way. So you get instead of you get. Get instead of you, you get a quadratic number of those patches. And I said, Well, I mean, but that's the same as people do with explicit motion planning rules. So that's the problem, and that's the reason why for all of that introduction. Okay, so if this thing is If this thing is pointed, I'm going just to list a couple of results. So you have lower bounds, that topological complexity, fiber topological complexity is bigger than the category of the codomain. If F admits some section, it is bigger than the topological complexity of the codomain. There is a not very good, but still an upper bound depends on the. Upper bound depends on the sectional number of the map that you're analyzing and the category of the fiber category of the map. And so on. I mean, you can obtain those results, but always assuming that you have a fiberized pointed space. And so on. So, unfortunately, I mean, but there is one thing to consider. So, the parametrization. thing to consider so the parametrization the splitting is something that you have i mean you have opportunity to choose if one splitting is not good you you can use another one so the uh here the conclusion is in a sense that yes uh when taking parametrization be careful that there is a that there is a uh there is a section there is a global section otherwise you are in trouble uh okay give me just Okay, give me just two minutes to relate this to other definitions of topological complexity. So, conveniently, they can be described in one diagram. And the diagram is this one. So, you consider projection of parts in the codomain, and then you take a pullback to x cross y and the pullback to x cross x. Now, the sectional category of this. The sectional category of this Q map is exactly the definition by Murillo and Wu, and is also exactly the alternative definition of Scott. This topological, so sectional number of this map here is what Scott ad hoc defined as TC one-half, the intermediate topological complexity. Okay, I mean. I believe. And the sectional number of the green one is the topological complexity of the map that Jamishnikov did, and I was using. So this immediately gives relations because, of course, sectional number of this one is bigger than the sectional and C cat of this one, and the C cat of Q is pulled back, so it is smaller than C cat of P. So these relations can be obtained and These relations can be obtained, and everything almost everything can be deduced from this data. So, you want to do more, of course, like homotopy invariance, upper bounds, everything. And you can try. And it turns out that even, as is normal, you assume that F is a vibration, you still need to assume that P is a vibration as well, otherwise, it doesn't work. So, okay, so this is so this I think has a more important more important in the sense that this in application is you can't expect to get vibrations. It's a great luck in the case of parametrized collision-free motion that that thing is a vibration. Usually, it is hard to obtain a parametrization that is actually a vibration. Um, so, um, okay, so this seems to be a good point to stop. Thank you. Thank you. Are there questions here online? Is anybody on the screen? Hi, you're welcome to rename the one-half notation that I used. Just put that if it's ad hoc, it was. I like the one-half, actually. I don't know um maybe TC idea should be directed to uh Directed to get more into the life of engineering by not trying to plan the motion between any parallel possible position. But in more real situations, you have an initial position and then you have a sensor that measures a suburban linear note. And then just you try to model more of what is. What is what you're saying? Yeah. Something that that takes into account real-time evaluation of the phase around it. Do you think that this can be okay? I was maybe not last time, but years ago, I read quite a few papers on motion planning done by engineers. Done by engineers, and they are mostly done in the following: you discretize the space, then you just go to the closest node, and then you look for a path in a graph to another node. And this looks great on paper, but I mean, the problem becomes computationally huge. And it really only works in the plan. In the plane. Already, when they move in the space, I mean, it's impossible to. I mean, there are papers saying, yeah, okay, we tried hard, but it's impossible to model obstacles in three-dimensional space. It's just you have this curves of dimensionality. You can make a program, but I mean, doesn't work because you want to have a relatively precise situation. So you have a small mesh and And again, and it doesn't actually answer your question because, still, you're not going locally. You need initial point, you know where you need to go, and you need a global view. I mean, they have these algorithms to look for efficient or shortest or any paths in a graph. And yes, I don't think, I mean, I like the idea. Think me, I mean, I like the idea of those kind of gradient fields that Michael tried to say similar, like in, but okay, then you need to implement that. I mean, and then you are in a gradient field and you are somehow moving locally along some geodesics, if you want, and so to say. But then you have a problem: okay, you maybe need some luck that your geodesics. Maybe it needs some luck that your genetic goes exactly to that point. So, but yes, I mean, that's a problem. I mean, there is, I mean, I think every week you can find a new paper solving that problem, so to say. Yes category. Yeah. Um we do things homotopy invariant. Okay. Okay, I don't have anything against sectional category. I've made my living out of homotopy theory, right? But as I said, I mean, we have real problems, we have our mathematical problems, and we want to, I mean, to relate both. So maybe I emphasize sectional number and non-homotopy invariant viewpoint just to make a little bit. Just to make a little bit, I mean, to remind you that this is also in the field. But of course, I mean, once you want to do things, it's sectional category that you actually compute. So I agree with you. Yes, if you want theoretical results. And again, my problem always is that sectional category and sanctional number can be far away. So, I mean, what are you measuring if you say, well, sectional category is 10, but actually, Is 10, but actually, I mean, you need 30 continuous rules and maybe 400 small patches, small programs to solve that. I agree, you can control it. Yes, but control is quadratic. I mean, the best that I know is not linear, right? That's a quadratic is a huge difference in computation than with respect to linear. You know, I talked about triangulations. There is another topic that I'm studying, how big or how small triangulation you can have. This is something, oh, yeah, yeah, I ask you. I mean, if you want to angulate grasmaniums. Grassmannians, relatively small Grassmannians. So, I think so it increases exponentially. And to triangulate, I think G of eight or nine dimensional subspaces in 20 dimensional R, you need so a triangulation would have a number of points that is. Have a number of points that is bigger than the particles in the universe. I mean, can we really say that this thing is triangular? And it's incredible how big these things grow. So even for small problems, I tried, I think, like planes in R4, R5, so R9 or you already. you already need for every singular for the minimal triangulation you need hundreds of vertices once you want to write down a program right it's what's the dimension of the chips complex you can compute persistent homology You can compute persistent homology in theory, but so imagine that these controls have natural natural situations are fabrication. They are never fabricated. Yeah, I mean, okay, in the most trivial cases, they are, but you have got this result from a number of rotating joints, so that from a torus to any. Do anything that is topological, I mean, that spatial S2, SO3 Euclidean group that blends the two. You have always. And the argument is great. I like it. It's easy to say. If this map is a vibration, then you look at the fiber. Fiber is infinite-dimensional. I mean, you could compute cohomology using spectral sequence. It's infinite-dimensional. Topologists immediately see this, right? Yes, right, so it cannot be, yeah. I mean, amazingly simple, but as I said, this guy, Wemper, what is uh was giving at Purdue, I mean, one PhD after the other, trying to do redundant robots that are vibrations. It doesn't work. That's hard fact. That's hard fact of the life. And if you cut out singular space, I mean, it separates. So yes, you must. Okay, you can go. I mean, that's the reason why I wanted to ask about the structure of the singular set, because then you must go transversally over the singular sets in your path. We never asked teams. We never ask things like that. We don't allow all directions of paths. Any continuous path is okay. Yeah, but not in real life. We should say, okay, there are forbidden directions for those paths. That would bring us closer to those problems. Any more questions? Any more questions? Okay, since I'm the last speaker of this conference, let me just say a few words. So I think there are many reasons why I and probably you are going to remember this conference, is this terrific place and food, great talks and discussions. I would say, yeah, also. So, you discover how many friends do you have? Because people were writing to me. I mean, we are reading in the news that there is a hurricane there. I mean, are you safe? Okay, I say, yes, I'm safe. It is hard to close, but thank you for the thought. But I think probably the main thing that I will remember this conference is that. Remember this conference is that this is my first conference after the pandemics. So, I would really like to thank the organizer, the local staff, and everyone here for this help to say return to normal, to reboot our scientific activity. And I really hope that the people that stay at home this time, that we will meet them at the next conference in a normal time. So, again, thanks to the Normal time. So, again, thanks to the organizers and to everyone else.