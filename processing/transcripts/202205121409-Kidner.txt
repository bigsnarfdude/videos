Being here, obviously, in person and electronically, it's very nice to have a community that I can be physically part of again. My title is very long, but we're going to restrict it to a much simpler talk, so it'll be really nice. I'm, of course, Arnott. This is joint work that I did with Rick and Gary at Thompson Rivers University and University of Victoria, respectively. And as I said, the title is gamma-strict homomorphisms on MN mixed graphs. But what I'm really going to talk about is two colorings. Two colorings. So homomorphisms towards a target on two vertices, specifically K2. Pushed for a button the first time. Sorry, there's just a delay. Come on. Come on. There we go. So these are just my main talking points. So I'm going to just kind of define some things first. And then by the second half of the talk, we can actually start talking about some stuff that's actually happened, which is slowly. So as they come up. So what is an MN mixed graph? So, as they come up, so what is an MMX graph? So, there's a lot of words in there that have all different meanings. This is being very slow get loading. Okay, there we go. So, here we have the definition of a M-N-Mix graph. So, an M-mix graph is just going to be a mixed graph, which is a graph obtained from having a collection of edges, and some have orientations, some don't. So, we have a collection of edges. Some don't. So we have a collection of edges and a collection of arcs. In this case, we're going to only deal with simple mixed graphs. So we don't have any parallel edges, no loops, and we don't have any edge and arcs between any pair of vertices. Because that's obviously another strange possibility that could pick up. I went the wrong way, which I regret. Okay, so here's an example of a mixed graph. So of course we have some collection of edges, we have some collection of arcs. And what we're going to do is we're just going to start applying colors to them. To start applying colors to them, this is very different to the last talk where we had to have some kind of rule. We just could do whatever we want, just assign them whatever colors. So, here we go. There's a 1-1 mixed graph. So, all of our edges are the same color. All of our arts are the same color. Over here, we have a 3-1 mixed graph. So I've just made the arts a very different color just so that they're noticeable. But there's only one collection of them. On the other hand, we have, for example, blue, or if you're colorblind, we have solid red dash. We have solid, red, dashed, and green dotted. So now that we kind of know what objects we're working on, we need to know what kind of operations we're allowed to use on these objects. So we're going to define switching with a vertex as replacing every, so let pi be a permutation, and I'm going to say it's acting on the graph. It's a little bit misleading. But it just colloquially, we're going to have a vertex. We're going to have a vertex and a permutation. We're going to take that vertex and then we're going to take all of the edges and arcs incident to it and act on it with respect to that permutation. So what we can do is we can swap colors of edges, we can swap colors of arcs, and we can swap the orientation of arcs. So if we go back to this lovely example, we have this graph and we're just going to pick our center of vertex here as V, and we're just going to switch it with respect to this permutation. So we have blue goes to red, red goes to green, green goes to blue, and we're going to reverse. To green, green goes to blue, and we're going to reverse the arc. This is our presentation, of course, is a bit of an issue with these because reversing arcs is not as easy to write down as you'd assume it is. So, if we just look at this, so here's our original graph. And over here, we can see that this green arc, for example, went to blue, this red arc went to green, this blue edge went to red, and of course this up arc and I guess this whole two path has flipped around. So, it's a pretty intuitive. So, it's a pretty intuitive thing. Notationally, it's a little dense, but it's fairly intuitive. And we're going to just denote this as g to the switch. So, this is represented with vertex and what operation we're applying to it. Okay, so now that we've established what objects we're working on and what kind of operations we're allowed to work with, we're going to now talk about the equivalence of these objects. So, and it is an equivalence relation. So, we can say that g and h are mn-mixed graphs, gamma. Nature and then mixed graphs. Gamma, I put this in blue because it's a bit misleading. How I wrote this, it's a group acting on the graphs. What I'm really saying is that it's acting on the edges and our colors. So it's irrelevant of the graph, and it's more relevant to the things that are colored with. So we say that these two objects are. This is actually not 100% true. There's a lot of places I'm hand-waving here, which is great. So we're going to say two things are switch equivalent. If I can. Things are switch equivalent if I can reach them from a series of switches. So if I have G, I apply a bunch of switches to G, I arrive at H, we say that they're switch equivalent. It's reflective trivially because everything's related to itself, and I think that symmetric and transitive are also fairly obvious because we have a group, groups have inverses, and we're happy. So let's just take a four-cycle, for example. So we have a G here, and again, we have pi equals blue and red. For the sake of our Blue and red. For the sake of argument, we're going to say that the number of edge colors is two. I could have a third color here that's just not represented in the graph, or I could have a third color that's not relevant, but we're just going to say this is equal to two. So let's start with G and let's just see what's switchable to it. So in case anyone was curious, these are what are called sine graphs right here with the operation. So we can see that if we switch this top vertex with respect to pi, we get this graph, this vertex, we get this graph up here, and as you can see, we're just swapping. Up here, and as you can see, we're just swapping red and blue. It's a nice, easy group to work with. So, this is our first step, right? And then you kind of just keep building, right? Well, okay, well, this is the rest of the component. So, you can say that we get from here to here by switching this vertex, and then if I switch this vertex down here, they'll get down to here. And then this is the whole component, but it's not the whole graph, because as anyone who's noticed, these are the balance cycles. We're missing all of the unbalanced cycles. So there's at least two components in this. And in fact, if we construct the other components, We construct the other component. We can start with a single thing here, and you can just generate this whole thing. I've drawn this by hand, so it's going to appear many, many times, and I hope everyone appreciates it does. Boy. And as you can see here, this is hopefully all the states. We should have the number of edges, exponential number of edges, in the reconfiguration graph. So in this case, we should have the number of colors, which is two, and we're raising that to the power of four. So hopefully, this is 16 things. Is 16 things. If not, well, I can't count anyways. So, now what are we going to talk about, which I want to talk about, which is two color specifically? So, this was the first result that we arrived at, and it appears in my thesis. So, we're going to say that, oops, I did not mean to push that. So, we're going to say G is an M and mixed graph, and gamma is a transitive group acting on G. And what I mean by transitive, again, it's very myth. mean by transitive again it's it's very misleading we want any edge to be reachable and we want any arc to be reachable but we don't want edges to go to arcs and arcs to go to edges so they're just saying that there for any edge color I give you I can find some some operation that will allow me to get it to any other edge or arc respectively so here's here's a nice statement so I've color-coded these based on how important they are so How important they are. So G is gamma switchly two colorable, if and only if there exists a sequence of switches, sigma such that G sigma is homomorphic to some monochromatic K2 or T2. Not relevant. What really is it saying here is either G is bipartite with only arts and can be switched to be made monochromatic and directed to path free, or it's bipartite and it can be switched to be made monochromatic. So it's either a directed graph or an undirected graph as the underlying graph. The underlying graph. So now this is no longer really a homomorphism problem in terms of presentation material, just as in terms of let me drink with some water here. It's more of a switching question, which is more in keeping with the reconfiguration problem. So we're going to start with the very simplest class of graphs here, which is for this problem, which is trees. So we're going to restrict ourselves to M0 microphone. Restrict ourselves to M0 mixed graphs from now until I say so. It's important that this is also called M edge colored graphs, and I may use that interchangeably because I have multiple words for it, and I tend to use them all. So the main idea is that if we have a tree that's M0, gamma is a transitive group acting on T or on the colors of T, then it's always gamma switchually two colorful. There's never a time this is not two colorful. This is what we'd hope to be, because this is the case for normal two color. Normal to go. So here we have a tree, we have a permutation here, a permutation group that's isomorphic to Z3. I'm going to assume it's a three-edge color because I want it to be a transitive group. So we have some collection, again, of vertices and edges here. So we've got some green edges and some red edges and some blue edges. So what we're going to do is an operation I've called propagation. So we're just going to start at a vertex. So I've labeled them all here. We're going to start at a vertex. The mall here. We're going to start at a vertex. It's actually not v1, we're going to start at v2, and we're going to try and make this green edge blue, for example. And that's, of course, just applying pi to it. So what ends up happening is we apply pi to this vertex, and then we swapped this green edge to be blue. Our reds go to greens, and our blue will go to red. And of course, this is now T of V2 pi. So we're going to just keep propagating. So we'll start at V3, V4, and V5. V4 and V5. They're an independent set, so we can switch them all at the same time if we'd like to, even though the group's not necessarily abelian. In this case, it is abelian, but if it wasn't, it doesn't matter. So we're just going to swap all three of those, V3, V4, and V5 at the same time. And what's going to happen is our red edge is going to go to blue, because we've applied the inverse operation here. And then our blue will go to green, should be. I don't know how I messed that up. Oh well. So before here, we had. Oh wait, no, that's because it was a different. Oh, wait, no, that's because it was a different color. I'm sorry. This is green and blue. So then when I go back one or up forward one step, green goes to blue and blue goes to red. Sorry, I confused myself. And so that's what we expect here. And you can go back and forth and just check everyone and just make sure green, green both go to blue, red will go to blue, and then green will go to red. So we have this as our next step. And we got this edge for free as collateral, but it may not have necessarily been that case. May not have necessarily been that case. And then we just keep doing this. So we have now some monochromatic tree and our sequence, which just runs right outside the screen. It's important to understand that when we're talking about monochromatic, there's an implicit monochromatic of some color. So in particular, I've decided, without loss of generality, to be blue, and it's without loss of generality because I can switch from blue to red or green by just taking a bipartition of the vertices and switching the whole bipartition with some operator. And switching the whole bipartition with some operation. So in this case, I've picked that bipartition to be V2, 6, 7, and 8. So it's this vertex, and then this column of vertices. And then you can just apply the inverse to get a full red, or apply pi to get all green. So this is a departure from this case now that we've noticed that we have the idea of I can switch almost a full cycle to be monochromatic. So any spanning tree I can make monochromatic, but I might. I can make monochromatic, but I might not be able to make that last edge monochromatic. So, in this case, for example, if I start from any of these states, I can just propagate around the tree, and if I get the last edge, it will be either this or this. So, there's examples of groups where there are yes instances and no instances. So, this is obviously a more complicated problem. So, we need to have a tool on how to deal with this. So, for cycles, we want to define, I've been using this term already, we have a nearly monochromatic cycle. Cycle. And we're going to say it's nearly monochromatic of colors i and j if all the colors are of i except for one which is j. So if we go back to this picture here, this is nearly monochromatic of blue and red. And this one here is nearly monochromatic of red and blue. I mean, you could also technically say this is nearly monochromatic of blue and blue, but I feel like that would be kind of weird. So it's just, you know, it's a pretty standard idea here. So here's the big theorem though. So here's the big theorem though. So if I can give you a, if I can fix a four cycle to be monochromatic, so if I can make it from ij to all i, I can do that with any 2k cycle. So for if I can do it for one even cycle, I can do it for any even cycle. So if I can fix, again, going back to this picture, if I could somehow fix this edge for a four cycle, I could fix it for any large even cycle, and vice versa for any large even cycle, I could switch to it B, I could fix the four cycle. And I probably drew a picture here, anyways. So let's suppose we have this situation here. So we have this nearly monochromatic of blue and red. Under some sequence of switches can go to monochromatic blue. So we're not too edge color. There could be an arbitrary number of edges. We have m edges, and the group is actually irrelevant here. Well, it's not irrelevant, but for the argument. So if this can happen, we can just start with, for example, an eat cycle. With, for example, an eight cycle here. And what we can do is we can just start taking homomorphisms of things, because we love taking homomorphisms. So we can just, you know, fold V3 into V1 and then V2 into V4, and now we've had a six cycle. So if I could just keep applying this process over and over again, we can get down to a four cycle. So the lovely thing about this is by supposition, we know how to make this monochromatic of color blue. So what we can do is, we can Color blue. So, what we can do is we kind of lift the sequence back up because everything in this set will be linear, or will be independent. Everything in this set will be independent, so we can switch anywhere where we switched on C, we'll switch on two, four, and six, and anywhere we switched on B, we'd switch at one, three, and five, and then obviously these two things. So if we can get this to be monochromatic, we can just reverse the sequence and then get this to be monochromatic. This is what I mean by a little notationally dense. It's a lot easier to say. Notationally dense. It's a lot easier to say than it is to write down. Now, what about the other way? The other way is actually a fairly nice argument. So let's take that 8th cycle and suppose that we can make this 8th cycle monochromatic. Well, we'll start with the 6th cycle. We'll call it H. And what we're going to do is we're going to modify it. So we're going to convert it into a theta graph. So in this case here, we have H is right here in the inside. And you can see we have our one dad edge here. Or one data edge here. But now that you can, by construction, we now have this eight cycle around here. So we know how to solve this problem by supposition. So, what can we do? So, I've just relabeled some vertices just for the sake of being able to address things. So, we have now V012 and W012. Let me get you ahead of time here. So, what we can do is we can actually make the outside cycle monochromatic. Outside cycle monochromatic, but we don't know what's going to happen to these interior's. They could turn to anything. But what we know is that there's an automorphism from these U's to these W's. So we can kind of augment the sequence sigma in order to kind of get this cycle to be the original H, and this cycle is now monochromatic. And what that gives you is that if I show you the pruned graph, well, now I can get the sixth cycle to be monochromatic if I can get the eighth cycle too. So these all can close. To. So these all can collapse down. So this is a really, really, really important idea. So that leads into whether the idea of these substitution classes or Green's classes. So I like the substitution classes better. So we say that if you can swap a nearly monochromatic cycle of colors I and J to be monochromatic, then we say that I is gamma substitutable for J. So this is an equivalence relationship. It's non-trivial to show the transitivity. It's non-trivial to show the transitivity argument, but it's a fairly nice argument. So if I can get it from i to j, then I can get j to i, and all those lovely things. So the idea is I have these equivalent statements now. So I have g is gamma situationally two colorable, which is what we want. Equivalently, we can say it can be switched to be monochromatic. So it's assumed to be bipartite and only contain edges at this point. So we can also say for all cycles in G, each cycle can be switched to be monochromatic independently. Cycle can be switched to be monochromatic independently. So we don't need to switch them all at the same time. As long as I can show every cycle can be switched to be monochromatic, I can do all of them. I know there exists a sequence. And for our really fast algorithm, then that gives us this one. So if I fix a spanning tree of G and I take a sequence to make T monochromatic, then I can make, I just need to check each co-tree edge to see if it gamma substitutes for the color I've made the tree. So if I make the tree colour I, I just check each co-tree edge and just say, if it's colour J, does J relate to I? Color J does J relate to I. And that gives us a really fast algorithm for this. So, in terms of the reconfiguration graph, which is what I really wanted to talk about, I've given myself way too many slides on purpose. What we can do then is we can just say, okay, well, we can construct these reconfiguration graphs and we can just compute it because I've just proven to you that I can find any cycle and kind of collapse it down to a four-cycle. So now that means every Four cycle. So now that means every reconfiguration graph to find these two edges, for example, will have size at most m to the four, which is a constant in terms of our problem. So it's polynomially bounded. The lovely part about this is that, I've already said those, so we have this nice corollary, which is of course that this is supporting the constant time. So you can just, you can pre-compute all of these things. So here's again M2 with Z2. Z2. That's the one we've seen before. But if we take a bigger example, here's Z3 with M3 edge colorings. So this is a bit confusingly drawn because I didn't want to draw a million edges here. But you can see this cycle is equivalent to all of these, as is this red cycle. And I can get down to here. And in fact, this is the whole component for Z3. So there's no nearly monochromatic cycles here anywhere. And that's, of course, to be expected because abelian groups behave that way. But I can show you that for S3, for example. I can show you that for S3, for example, so the group composed of all transpositions, I can get from a blue down to these. And these, of course, have a thing I can do because I can switch on the bipartition to get between these three. So these are actually all related, and there's only one component to this graph. So this is, of course, the symmetric group. So there's other groups that we can do, and then there's different results. But I just wanted to, the whole point of this particular talk was just to talk about how using these reconfiguration graphs can give you the polynomial bound on its own. Give you the polynomial bound on its own. You don't need more advanced tools. And that's the whole point that I was trying to make. Does anybody local have questions from speaking? Perfect. Let's go to Zoom. Does anyone on Zoom have questions for the speakers? Any questions for the speakers? All right. If not, then let's thank the speaker one of the time. Next speaker is going to be Stephanie. So