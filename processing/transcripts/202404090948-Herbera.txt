It's closed at an isomorphism. Okay, so that's quite reasonable to ask for. Okay, then, okay, they should contain some minimum class of elements. So we say that for any objects of A, the exact sequence, the exact sequence you can generate the identity. Identities this is epsilon, this is epsilon, and the other way around. So this is both otherwise, no, otherwise enough. So you have a certain at least a certain amount of this. And then you have some closure properties. No? The closure properties, one is uh uh one. If well are for morphism, so okay, for an admissible, if and zero, a prime, f prime, divide, I'm sorry, no, sorry, sorry, sorry, it shouldn't be composed. Uh B C L G. So these are uh Epsilon admissible. And here, when I mean admissible, it means that, so this exact sequence, so here I prepare the compare of F, not original. So then the composition of F composition of G is also Epsilon and then the dual thing. So here the actions are going to be okay self-dual. I mean because dual statements of closure by By epsilon admissible of treasure by epsilon admissible, epimorphism. Okay, and then things that okay we can make an extra operation with this extra these admissible morphisms with pullbacks and pushouts. So if we have no, so if we start with With f. No, so if we start with something that, okay, so let's call it sine f. No, that's epsilon admissible here. And in that, we take the push out, so we get maybe CFD. So because we get here. So because we get here some f sub h and then because of the ability this will be also objective no and this is going so the our statement is that this so so this thing is that f of h is h is epsilon i see and then the the one thing with the uh pullback. Pullbacks. So if we start with something, I will put the A here. Let's put the G, 0, here, and H, this is L. This is a small control. So then, in the pullback, this is D. So then the parallel line, oh, this was H, it's called the T of H. going to G of H. So that's going also because of Kevin Handy is going to be also so that G of H is epsilon. Okay, and that's, you know, so that's the definition essentially. So these are all filler exact appearance. These are not exact. These are not exactly so these are redundant actions, no, maybe it's not so much needed to make explicitly an action manage to all. There is a reformulation, it's also a reformulation of Quillen's exact categories because Quillen has some strange action of factorization of morphisms that Ernard Keller showed that was already the moment, so this becomes very similar, very simplified, no? Very simplified. What was the idea with that? So, if you are familiar with the UNEDA version of X constructed with short X sequence, so the idea is to restrict to a class of short exact sequence that you could make a lattice version of your X factor. So, this is, for example, where you need, for example, this pullback. So, to this thing, also then, so this is X1, so the XN, you can take it from number XYZ. So, you can give a book operation to this, not to the exact sequence, starting at one object, ending at the other object. So, less naive way to act is to show, no, using the machinery of drag. Using the machinery of derived categories adapted to here, that you can have suitable factors, you have derived functions. Here, what we will be interested is in constructing, so these derived factors, we would like to construct, well, we like to compute it via projective or injective resolution. So, we will be interested in some particular exact categories that we may. Is that we may have that. So let me make, because I'm forgetting, let me make some remarks on that. Toros? Yes. Just to be fair, I think Rabelian category, the notion of building category is the same as product class of MacLean, which is actually the aliens. Yes, also because and the thing is that actually I think William was not thinking of a real category, was thinking more in narrative setting. But I think people feel more comfortable Think people feel more comfortable here, no? So that I checked them. So I agree. And then it's true. I mean, this is not. So Quinlan has the merit, but also if you read on these things, there is a very nice survey by Theo Puller that explains very nicely the story. There are many there were many people going in this direction, no offending this. And certainly my plane. And certainly my plane should be one of them. Not so in my place. So let me make some remarks that I think they will be more than not more than I don't know. Okay, so we said in our exact text structure we at this should have this exact sequence. But also we have disclosure properties by pullback. So something we can do is to say, okay, if I take so two things, no? Two things, no. If I take A, B, a couple of objects, no, in my category A, no, so then I know that this and this, both of them, no, primary actions are admissible monomorphisms. So if I compute here with a pushal, this is A prime example B. This is A B, and this actually these maps become the badonic value inclusion for the ones associated with the coprado. So what we are getting? We are getting that these and these are epsilon admissible. And being epsilon admissible, even uh so what happens? You know that okay, these are of course amorphisms, this is here, you have here, and of course the potential. And of course, the potential is going to be this. So, this is a split sequence. And then, what should happen, no, what this is telling that, okay, this is closed by isomorphisms, no? So, any it's a sequence in any In A should belong, should be in our class epsilon. And actually if we take, no, if you want like epsilon sharp split, no, like the class of the split sequence. So it's really an easy assignment. So it's really an easy assize to check that these actions are satisfied. So that's it that's an exact extraction. And which is called the speech extraction by the obvious reason. Okay, so then on the other extreme, no? So if you take your class Alexa sequence, I'll short it. Unshort exact sequence, sorry. If we take unshort exact sequences, this is the exact structure we are used to work with. So we are interested in things in between. Things in between for what can be defined. So, okay. Okay, so we got like a definition. So we got X plus of objects. Okay, okay. And then we define no. We define no, so we consider the class like sequences. Okay, so I just put zoom A something B C uh let me don't remain exact. Don't remain exact when we apply home A x zero two and in this okay. Okay, more precisely, so what this means, so for this exact sequence to be here, what does it mean? It means that, okay, when we apply the comparative code, what we lose is the products are here. So that is to say, no? So this is important to say to say Say not that when you apply home, we have exactness here. Notice that in a diagram of these four edge, no? And this is not from my first edge, no, and here you always have complete with an arrow like this. So this always factors, these always factors like this. Always factors, there's always factors like this. No, that's a simple thing. So, this class, so this class of exact sequence, no, so this is called x, this class of exact sequences. Okay, and it's it's really easy to check, no, that um. Then it is an exact situation. So, if I go to my examples from here, so you can take this is not a speed exact sequence. So, this is this is f of x. This is f of x not for x equal to all objects a bit one or eight composable or whatever, so something like that. And this is when you take all short exact sequence, so that's the definition of projective model. So this is f of x for x equal projective k. Oh, so that's so and then you have a range in between. In principle here, I'm not saying that the project which are here, but you will see that it will be immediately half a home. Just for your information, but we are not going to mention it, we can do a dual thing, make applying a contravarium to ask and consider questions. I'm considered the short exact sequence that remain exactly, and that would be another exact structure. So we concentrate in this case, but this is the other one. So, well, when we start with that, no, so let's say, no? So, in this sense, no? So, if we restrict our world to consider this exact sequence, no? It's clear that our X are going to behave like projective objects. But only, of course, not only our X, but also the original projectives in my category. And also, of course, if I have, because I am not saying anything about X, because maybe I just want to take the composable objects, but if I take sums of elements of X, they will also satisfy this property, and if I take direct sums, they will also satisfy this property. So this is to say that, knowing so in so in So in C so if we call okay, so let's be like projective X no of projective way, no, so the class of these epsilon projective modules, sorry, projective ones, objective subjects. Project is object, sorry, no, or projecting representations, no. Okay, so certainly this should include project is gray and the union with what I'm saying this at of x, this direct closing by direct sounds and direct sound maximum. And I am not very precise whether this is infinite or not, so I am assuming everything is fine. That's all I am assuming everything is fine, that's all. No worry, no. So then what happens? So for example, if okay, now now it comes the wall of Arctinalas. No, so it's not so our example, no, so if our class A is this mod uh lambda and lambda is marked in algebra, so then you can prove that. So then you can do that this brush. So this star is an equality. And in general, what you need know is, what you need to make an argument is that to have enough exact sequence. And actually, what the user know in this case is that imaging the composable object, they have almost that's not projective. That's not projective. There is an almost split sequence and then a dano, that's not a split, not a split sequence. And then this makes problems for this object to be projected. It's not already here. Also, that's just the generic value. So you need enough non-split sequences not to be able to have the quadrature. Okay, now we have some ideas. Now we have some idea, we have the exact structure, some idea of the projectives, and so we realize somehow we have to include the projectives there. So let's now go to this projective resolution, not to this approximation. Yes, sorry. Uh what what is the definition of a small projective? Ah, just admit so exactly so so these are the modules that So, these are the models that no? I did sorry the models. So, and what we call it while checking that A if home A Y maintains home we see it here makes it so if all the C so if So if all the sequences if all the exact sequences, sorry if when we apply home exposure home, why uh to the exact sequence like this, to the exact sequences. In two exact sequences in this f remain exact. So from now on you are fixing the class E to be the, I mean the exact structure E to be the on X blank at the stack. Yeah, and if you want to consider the projectives, the things that remain Here are the projectives, the things that remain exact. So you always will have the projectives, and then you have, so your class can be at least completed by some direct exams and direct exams. And maybe there could be other things if there are not depending on your audience. So that's the missed example. So then this example is really nice when we're starting from. Really nice when we're starting from, I guess, a class of objects x, then we create e x, then we can get the projected exact. What if we start from an abstract and even flash exact structure? Is there anything with an like just you know some exact structure? Some exact structure. I think uh okay. Okay. Well, they should certainly be always the projectives. And I read from them that many of these, or at least these categories of representations, these exact structures essentially seem to be coming from this, not from this way, because if you, well, it's a little bit, okay, it's that you move around, but it's a so I don't know. That's the answer. No, but formally, if you determine. Normally, if you determine the projectives, and then you make the projective with respect to the relative structure, is the sense, and then you say, okay, now I call the SX to this class of projective, then you are going a class of this type. But of course, it's not a nice answer to what you are asking, also, it's saying, okay, well, that's the answer. So here, no. Okay, if you want here, they are, no. In here, in this pretext, like sequence, no, the projectives are or modules. Here, the projectives are the projectives. No? So that would be the thing, no, like the two extreme cases. No? So I'm here. Just give a really quick in the Euslander-Solberg paper, the precise statement is that it's a bijection. Is that the bijection between the class of additive subcategories that are continually projective, standard projectives, that are contravariantly finite, meaning they admit approximations, and exact structures that have projective problems. That's the one-to-one correspondence. And the correspondence is in the setting of like an art calculator. In the setting of Artina. So let me talk to you. The setting of our financial. So let me talk, because I want to talk also, let me talk about approximation. So now, okay, we would like to make the analogous projective, the analogous of the projective resolution. Okay, so let's say now, okay, so we will pretend or we will act like if all the projectives are like this, not so that no one One the text, no class if you want we can think on the representations over I think I can we'll get K of a post, YP is a field no if one so if you prefer a class of representations, no the A class is The class in thing containing objectives objectives objectives or in the Ardina algebra. No. So then okay, so Okay, so we say that so for an no, for we say that if you have an M, no, a representation can be as an approximation. Sorry, I'm still learning from the Approximation and let's try at x approximation for an object okay no is an uh is um math. Um homomorphism. Let's cut it from you way, no, such that we have such that u is in the class in this type of x, no, and then uh such that no, so let's call such that, no, so let's call this here, no, whenever we have this and we have a map here, no, from some x, this belonging from, if you want, actually I only need the class x, no, the class x, no, you have this characteristic. So if you remember before, no, so this is to say, no, so this is equivalent to say, well, not equivalent to no. I am restricted to this kind of classes, no? Why does it have? No? Why does it happen? No? Because if the category we are considering, no, so we are considering categories in which any object any object is a homomorphic image. So that's like we have enough projective presentations not to find a projective that not that maps homomorphically onto this. So notice that if this is onto and we have this commutative diagram, then Diagram and G is also an onto map. No? So actually, no, if, so here, this thing, in practice, what happens, no, is that so ug is at x. However, if and only if g is an uh f x, FX admissible or automatic. No, so that means not at short and the kernel, no, the short exact sequence, and it's on my family of the exact sequence, not that remain exact on the capital, okay. If you think if you think uh but are we going no are we going to have such such things no is it possible okay yes it is a nice idea is is x supposedly an add x or is it really just we must uh Because when you have this thing, and if you have a finite sum, then you can just solve the problem by component-wise in the direct sum. So that's important, no? Because for example, if everything is some of indecomposable, you need, so if you have, no, so if you want to factorize this thing so you have uh okay, sorry. Okay, sorry, the other way around. So you have this included in this, this included in this, no? And then you solve this problem, you solve this problem, and putting together the magical universal properties of problems and the problems, but now you solve this problem. No, but this be careful, this is fixed. And this uh should be such that uh That no, sorry. So, this should, you should be able to factor. So, this is fixed. You should be able to factor to any map you write in here. And then, in particular, there is an important map that is a projective that bands into here, onto. You have to factor that, that makes it onto. So, this should be onto. And it's onto all the time. And it's on all the time, for all the maps, not the same map. And then you can, if you want to factorize that, with tight exams, so you kind of apply these things, you factor, you make this composition, you can factor this. So if these are these are in x, you factor this, no, and then you put like the, no, so here we get the gx, no, here we go from here, we get the gy, and then the one that factors here is like you write. factors here is like you write exactly like gx g y sorry the one sorry the one that factors here is gx g y and so you compose the map with the two no the map has two components one of x and one of i and you find them no that's that's the thing no and for direct summons it's a kind of the same kind of the same thing no so the direct summon is so if you have a map of the direct summon so the more Of a direct summon, so the mod of a model in X, no? Of something you know how to factor X, let's say, no? So you have the projection on that, you factor your map composed with the projection, and then you arrange that, because that's selected summaries clear, so then you can arrange. But this is, so I am not writing this out of X, because if this, for example, is one indecomposable module. No, but maybe not because. Module? No, well, maybe not because it should be the project. No, but if it's 25 in the composable modules, I only have to check for the 25 in the composable modules. That's important. So that's the thing. So and also this is important now when I want to when I want to no this is now this is important because Important because I want to explain you a little a way to construct this kind of things, something that's useful to construct this kind of things. You say, okay, I have to for example now, so I have uh no, I Uh no, I I want to so somehow to find something here. Uh no? I have I have a pair of morphism from one x to a, no? And I want to put something in here that's in add of x, no? And that makes, I am sure that this morphism factorizes here, no? And that if I change, also actually, if you put, I think I need G, so if I take G. So if I take G, not in this column X, okay, no? I would like to find something in here that factorizes any morphism number. Okay, so this in general is complicated, but in this category, it's not that we have a strong finalness condition. So actually, the finalness condition we would like is, for example, is that x is finitely generated, sorry, that whole. Sorry, that home XA is finitely generated over and morphism. Well, I can put it. Maybe if this category is that, so let's put the other category. So something like that. Okay, so think that if I have something here, I can always compose the anomorphism of x, and I get some back from the x2. Get some back from the next to it. So that gives me. So if I have a way not to say, okay, so if I have here some okay, H1, Hn, no, and my H1, Hn satisfy that if I have energy like this, it's going to be a sum of these HI endomorphisms. I don't know who to write F G H, I don't know, alpha. These are. No? These are in some of n's. So if I have this from my equals one twelfth, what could I do? Okay, so I put here n copies of this. Here I put, here I have a fixed, I need a fixed number, so I should write something like on the first component of x, of x1, xz, no? And here, to factorize them, what's going to work? much going toward the scales, these these things are. So these are alpha one alpha n. And then if you so this is like we are writing this like alpha one alpha. This is what we are and then this has so if this generates this also has a solution no? And then this way I can factorize always any map Always any map from X to this module. So, what's the point? Now, if X is finite, we do this for any X in X and we always have So we take here, so what do we do that? No? Here, what do we take? For this, for x1, no, let's say, we take x to the its corresponding n1, for x2, and we add x to the corresponding x2. To the corresponding x, also is also if this is x1 xm, no? So this should be like the thing that we are taking now is x1 to the corresponding xm L one L and then we take the corresponding no at each component we take two eight, we take this one. So that's that's the construction we need. So that's that's a construction we need. No, and that is the thing. Okay, so this is how you write in here. Okay, so this way not so if you know if for the job or not so so in this way not so for okay so if you're so if x no is what what we are always not we have this We are always not, we have this at of x approximation. So then, in this no, in this context, no, we can always take, so once we have, no, these are our projectives, no, we can make, can start, no, we can, we have these approximations, we can repeat these things, no, no, with the kernel of the approximation, then resolve it and so on, no, and take So on and take out of the X resolutions of things. So let me also something important here is that, okay, I was explaining this, so this is to construct an approximation. And then there is the concept, so there is, so this, you see that this can be constructed in many ways, no? And so there should be a notion of an optical one. So we say f. And X approximation I was writing it Euro I was writing G no is minima if the only way to compute the Naira. No, so when we put the whole thing, no, so it's here with the identity. No, it's so is Fgh, so it's J is equal to this thing, no, F composed with J then Then it is an isomorphism, sorry. And then in this context, no, in this context, no, in this finite dimensional, in this context with the strong finateness conditions Actually, now if so the statement is to say no, so if and because The category involved is what is called Louis Mead. So, any object the composers in a unique way as a song. In the composables, and if A has an X cover, then sorry, recover, I was making it's approximation. Yeah. So i its approximation, then sorry, it's has an its uh approximation then A has a minimal approximation. So as someone was saying yesterday, no, you just threw away the decomposable set and notion that's a very nice That's a very nice way to show it, no? Okay, so then, no, in this context, so in this representations of causes, no, we do not find our conditions, no? So what we get is thought that we have one representation, no, we can take what is no, have x plus of Let's put a class of representations, no? No? Containing the projective one. And then we have this kind of one, we could not we have this kind of at x, no resolution. No? Like that. And then we can. So then we can think on this thing of substituting invariants, finding invariants for our objects in substituting by the idea of finding an invariant of this resolution. So the usual way to do it, no? So if let's say, so we Like the definition, not so we have stars of representatives, not so we consider say sorry, I get better won't be like it. So we take something like this is K. So we take the let me just copy because I apologize, no, that's the well we consider the okay, we consider the Okay. We consider the the three AM group by the isoclasses or in this case of in the composable objects. No, okay, let's call it like F. No? And then we make this remote out this thing, no, the remote out F modulo. R H, no, an H is the subgroup generated by, okay, let's put it. Let's put it. Okay. A okay. This was the B, this was the C where A, B, C, C is in my fx. That's generated by that, by this. And this is by definition, the K0 of K0 of if you want of the if you want this let's write it like Kp and the opposite no with respect to the class X no that's the relative K0 no and then what happens no is that of course here no everything no the exact sequences associated with this long exact sequence are in f of x no so but if you But if we want to substitute this by just some thing, something generated by these elements, we need this thing to be finite because we cannot get finite subjects. So we need to restrict some 0. Sure. Also, for part of the assumption and I have files in that it affects the covering. And that there are no objects in these representations of my project with infinite project, minimal projective. It's objective resolution. Okay, so a resolution like this, no, it's also this, we take the minimum representatives, no, I think, no, I'm finished. I'm finished. Then you see the BX, which is the free amelia group. Will be generated by independent, if you like, occasional defense. And if we take not now the this minimum. This minimum minimum resolution. So then the class of M is belonging to this dot is the sum of minus one dA of what's happening when of the class of this moment. In basic i bigger equal tank zero. Uh are we not equal to zero no that we are saying that it's there et geomological barriers? No, should be should it is a room, no, should be more results or here to a room but there are some information. Sorry for the extra wonderful. I have a little remark in the definition of this uh yeah sorry I apologize because uh the middle term this is sorry sorry yeah sorry I don't know so maybe I'll just say you know like now we have these plus and minuses and that's what I was complaining about And that's what I was complaining about yesterday: that the type of invariants that we know how to produce for multivariate persistence always come with these negative summons. Because there's this alternating sum, right? The Gradmanic group is generated by the intercompos of X, but when you write an element, then the multiplicities could be negative. When you write an element in that basis, there could be multiplicities that are negative. And that is what's annoying. They're negative, and that is what's annoying in terms of interpretability and in terms of stability. So, that's this is one concrete instance of that. And the other instance we saw in Wujin's talk, right, that he was doing MOVIS inversion, and MOVIS inversion typically gives you negatives and multiplicities too. So, all the approaches that we have so far have this annoying feature. Yeah, well, I'm also this thing of this more modification. This thing of this more modifications by Erpson and Unique, I have absolutely no idea what would happen with this resolution. Well, I'm going to say something about it tomorrow, yes. Okay, good. So that's it. Sorry, because I wanted to explain something that if you take a module that's a generator, no, a generator that contains also a part of the projectives, containing the composable injectives, then you have a very nice theory, the representation theory. Theory of the representation theory to ensure that these things may be finite, but there is a deep theorem of Yamma behind for Arctine algebra. So, but well, okay, sorry, it was always over. And we have a group working on approximations by units. Yeah. And the hooks are this is a finite set, if you're positive is finite, so I would strongly suggest you study the endomorphism between. And the morphism between half the sum of all the root modules. So the minimal approximations, the minimal morphisms between hook modules is actually what this is basically. Yeah, but the morphism thing and hook modules. Well, and homomorphisms between hook models. No, because the the directs are not a homomorphism, xyndomorphism would be composed of hooks. Okay, uh I see no further questions, so let's thank the speaker again for the speaker again.