For inviting me here and for inviting me here. It's a great place, it's all known. Anyway, so I will discuss permission K-theory and motives. So this conference we've seen motives, we've seen quadratic forms and so on. Of course, permission K-theory is about the classification of quadratic forms. Of quadratic forms. And also, there's a deep link between the stable homotopy category of motives and remission T theory, as was uncovered by. So these topics go together quite well. So first of all, I would like to say that everything I will explain is joint work. So there'll be two parts in my talk. One part is going to be about the general formalism of our mission K theory that we constructed. That we constructed. And this part is joint work with this list of authors: Emmanuel Edotto, Jonathan Harpaz, Flavian Hebersteit, Marcus Kant, Christian Moy, Denis Navlin, Thomas Nikolaus, and Volfkang Steimle. And there will be hopefully a second part in that talk about the representability of the Hermitian Ethereum Motives and its joint work with Janatan Hakaz and Idis Navi. Okay, so. So this is the plan. First of all, I'll try to explain. So our definition of permission K-theory uses some kind of heavy technology, and I'm aware that not many people in this room are familiar with that technology. So I'll try to walk you through how it works. And so this is what is going to happen in the first part of the talk. And then I'll try to. Of the talk, and then I'll try to explain to you how you prove a Hemersian K-theory as representable in motives and what you actually mean by that. Right, so let us start with our Hermitian K-theory as a functor. So, I guess you all know what the the Rotnik wid group is in this room, so uh G w uh zero uh uh field, for example. A field, for example. So we're going to work at a very abstract level, and I will try to show you how classical things that you know fit into this framework. So let me tell you what this framework is. So we are going to look at the functions that go from a category that is going to be called cat P, and it's the category of categories, and it's an infinity category. And it's an infinity category. And we're going to look at functors that map to spectra. So both of these are infinity categories. I will not spend too much time explaining what an infinity category is and give any details about that. You can think of usual categories with morphisms of higher nature on top of that. So in a category, you have objects, morphisms between objects. You have objects, morphisms between objects, and an infinity category. You also have morphisms between morphisms, and then morphisms between these morphisms, etc., up to infinity. Okay, so you have morphisms of all sorts of levels. So both of these categories are going to be infinity categories. And the functors, what we are going to look at are functors from one to the other. And these functors, of course, the ones of interest here are going to be K-theory, Hermeschin K-theory. K-theory, Hermitian K-theory, also known as Grotny-Bit, L-theory, which is in some sense like fit groups. And also versions that do not see idempotent completion of the category to which they are applied. And so that way you get vast K-theory, or so-called non-connective K-theory, and you get analogous versions for GW and L. So So, what is CATP? Cat P has objects, things that are pairs. These pairs, the first element in the pair is a stable infinity category, so I'll try to explain to you a little bit what this is. And the second, so for example, stable infinity category, there's the derived category of a scheme, of perfect complexes in a scheme, or the whole derived category. Of course, it's more structure than the usual derived category. Structure than the usual derived category that you know, that is just a normal category, so it has more structure. But there's a version of that. And on the other part of the pair is a quadratic functor. So this quadratic functor is supposed to encode forms that you're looking at, like quadratic forms, which is metric by linear forms, etc. So, again, I will try to explain to you what this is. And um the usual groups or machine k-theory groups or k-theory groups etc that you want are going to be the homotopy groups of the functor applied to this thing. So of course spectra have homotopy groups. They're a bit like topological spaces in which you have stabilized homotopy groups if you do not know what they are. And I think And I think if you want a sort of stable version of topological spaces. And for instance, if you wanted, I mean, how you would put the Groton-Pitt group for a ring in this business, you look at I0 of functor GW that maps from CAT P to spectra, and you would put the derived category of the ring, and you would put a suitable projective function. And you would put a suitable quadratic functor that tells you how to encode quadratic forms. So let me try now to explain to you briefly what stable infinity categories are. Okay, so let me give you a definition. So in infinity categories, you basically have all the gadgets that you have in usual category theory, like limits, co-limits, et cetera. They are a bit more advanced in some sense. They are a bit more advanced in some sense, but they behave naturally and they behave in the same way. So you can make sense of these things. And being stable is a property. So it means that you have a zero object, which means the object is final and co-final. And you have finite limits and co-limits. So that's the first requirement. And the second thing is that if you take a commutative square, and this has a mean. Of square, and this has a meaning in infinity categories, of course. It's a push-out if and only if it's a pullback. And that is the definition of a stable infinity category. Again, it's a property, not extra structure on your infinity category. So you can check if an infinity category is stable or not. It implies that you can construct adjoint functors that are called suspension and loop functors. If you have If you have an object, you can do this push-out, or you can do this pullback. And of course, these diagrams are both push-out and pullbacks. And it's not very difficult to see that if your infinity category is stable, then these adjoint functors will actually be equivalences. And actually, you could nearly take this as a definition for a stable infinity category and sort of recover this part. This part. Ah, okay. And even part of that one. Anyway, so that's what happens in a stable infinity category. And so I'll use the word exact sequence in the rest of the talk. So of course you're used to seeing exact sequences A, B, C, and that composed to zero. And so here, an exact sequence in a stable identity category is going to be such a square secretly. Square secretly, okay. That is both Cartesian and co-Cartesian. Same thing. And now, of course, you have functors between stable infinity categories that respect the structure, and so it just means that the preserved finite limits are equivalently finite co-limits or equivalently exact sequences. Well, this is equivalence. The categories are stable. Right, so where have you seen stable infinity categories? Well, if you have never seen categories, Categories? Well, if you have never seen them, at least you've seen their homotopy categories. Because, so, what is the homotopy category of an infinity category? Basically, it's what it's a usual category that you get by collapsing when you have two morphisms between objects. If you have any higher morphism between these two, you just identify them. Okay? So, you should think of these higher morphisms in some sense as homotopies or something like that. So, we're looking at things up to homotopy, we get a category. And the nice thing. And the nice thing is that the homotopy category of a stable infinity category is canonically a triangulated category. There's a triangulated category structure on that thing. So if you've ever worked with triangulated categories, you know that usually it's a category plus some extra structure that has to satisfy paintwork axioms. Well, in this case, it is completely obvious to put a triangular z category structure on that thing. And the suspension in that triangle zip category is the suspension that we've just looked at. That we've just looked at. Whoops, sorry. And sorry, exact triangles in your triangle category or distinguished triangles are exactly given by exact sequences seen in the homotopy category. Okay? So what is the advantage of stable infinity categories over triangulated categories? Well, one advantage is that there are lots of constructions that you can make for stable infinity categories that there's no way you can make directly at the triangular level. For example, if you take a functor Level. For example, if you take a functor from any infinity category to a stable infinity category, this category of functors is itself stable. This is automatic. So you can look at diagrams in a stable infinity category of a certain shape. That will give you a stable infinity category, etc. So it's very easy to construct new stable infinity categories when you have some, which is extremely hard to do when you have a triangle data category. So they're very nice for that reason. Okay, some examples. Okay, some examples. So, spectra that I mentioned in the first slide has an infinity category structure that I'm, of course, not going to discuss at length. But so, the objects in spectra, here I'm talking about spectrous of spaces. So, you can take pointed spaces. You can take sympathetic sets here for your model or for spaces, but you can take it on the one. It doesn't really matter. And there are sequences like this with certain types of morphisms. And this is a way of stabilizing this category. And by the way, in this infinity category world, you can do this with any other category here. So you can easily do spectra of other stuff than space. Okay? Another feature of infinity categories is that you have That you have an enrichment over spaces automatically. Every time you have an infinity category, there's actually a mapping space between objects, not just a set of morphisms. And if your infinity category is stable, you can upgrade that mapping space to a mapping spectrum. So you have between two objects, you have a mapping spectrum, and we're actually going to use this. And of course, when you apply the infinite loop space to that spectrum, which amounts infinite local space of that spectrum, which amounts to taking essentially x0 here, then you get the mapping spectrum of your infinity category. Sorry, the mapping space. Okay, now another example, if you fix a base scheme, there is an infinity category structure, again a natural law, on the stable infinity category, on the stable homotopy category of Moray and Włavotsky. Of Morayl and Włobotsky, of Finxikina base. And of course, its homotopy category is the category constructed by so the original construction, of course, makes use of model categories, but you can do it at this level, but there's no trouble. Okay, another example, which is more in the linear world in some sense, if you take a scheme. Sense, if you take a scheme or a rig or any object of that sort that you like, you can look at its derived category. And again, this has an infinity category structure. And again, the homotopy category of that thing is going to be the classical triangle derived category of X. So we're going to use perfect complexes inside that thing. So for example, if that was a ring, they'd just be complexes that you can just. You can take just complexes that are finite, bounded on both sides of projective modules of finite type. In general, it's slightly more complicated, but it's exactly the compact object in that category. So when you do K-theory or these kind of things, if you take categories that are too large, you get zip. So you need to restrict your compact objects. Okay, now. Okay, now this was a quick introduction to stable ED categories and to the ones we're going to look at. But there's another statum that we need to look at. It's quadratic functions. So quadratic functors are going to, as I said, encode the quadratic forms or the symmetric bilinear forms, et cetera, that we have on objects. And of course, if you want to do a Hermitian K-theory and not just K-theory, Hermitian K-theory and not just K-theory, you need to do that if you want to do it at an abstract level. So, what is that? So, I'm going to explain to you a sort of baby case, okay, that is very classical, that sort of shows you what the idea is. Suppose you look at the functor from vector spaces over a field to abelian groups that takes a vector space to the abelian group of all quadactic forms on that vector. Group of all quadactic forms on that vector space. This is a building group by the sum of values. For example, you have the zero form on there. What these things are. And you try to look at what the properties of that functor are. First thing you might want to look at is how this functor behaves when you input a direct sum. So what happens if you input a direct sum? So you look at a direct sum. And so you look at the direct sum of vector spaces. Well, actually, the quadratic forms on that thing, or not just the direct sum on the quadratic forms on both of these things, as you of course know, there's a remaining part. And so the isomorphism is given here. So you take a quadratic form, you restrict it to there, or you restrict it to there, and you also have the polar kind of polar form here. And so what you see is that this functor. What you see is that this functor, it actually is not linear in the sense that it doesn't send direct sums to direct sums, but the defect in linearity is itself bilinear. So it's linear in both variables. So it's a bit like polynomials of degree two with respect to polynomials of degree one, okay? Linear would be homogeneous of degree one. This way. Right. So um this is exactly what we want. So, this is exactly what we want. Again, we're encoding all quadratic forms on objects here. We have a functor that takes an object, tells us what quadratic forms are, and we know how it behaves in these terms. So, this is the classical setting. It's due to Eilenberg and McLean. It's very old, but there's a sort of modernized version that is due to Jacob Lurry. And the modern And the modern definition is going to be a functor. So, sorry, I have to put some conditions first. So, we're going to look, first of all, at functions that are reduced, the same zero objects to the zero objects. That's the first thing that we want to look at. And if you look at this type of functions, then it's not hard to see that, so this is a stable infinity category, and this is a spectra, so both are stable. It's easy to see that this thing. See that this thing is actually a direct factor in a year, and it's completely canonical, the projectors, etc. So you can look at the remaining part, and of course, the remaining part, sorry, that should be direct sum. The remaining part here is, it's easy to see that it's of that sort, it's a functor, okay? And the other thing that you can do is that you can look at this thing, input the same thing. This thing inputs the same variable twice and look at the homotopy fixed points, so the fixed points, by the action of permuting the variables. It's not hard to see that there is a natural map from there to there. So we're going to look at the cofiber of that map. And so each time you have your reduced functor, you have these two guys. And the condition for being quadratic is that both. For being quadratic, is that both of these guys are linear in some sets. So the first one you already saw in the baby example, the other one you did not see, but you need to put it if you want things to work properly. Okay, in this higher version. And in some sense, via some kind of fracture square, you can reconstruct your Kodato functor out of these pieces, the action of C12, et cetera. Of C12, etc. So, uh i in the example, would the second condition more or less say that the polar form is symmetric? Like the fact that you this one? Yeah, no, no, no, no. Yeah, no, not really. It's hard to explain how it turns out. But let's say that for quadratic forms, basically, this thing is zero, but uh but they're for symmetric bilinear forms. But they're for for symmetric by linear form you you get uh some that symmetrical divided parallels into dematurism. Yes, exactly. Exactly, that's perfectly true. Okay, um so the vocabulary that you we use is that when we apply a product head functor to an element of our stable identity category, we talk about the spectrum of forms. Of course, they depend on this product. Of forms. Of course, they depend on this for that function. And when we take the infinite loop space of our spectrum, we talk about the space of forms. So you should think of this thing as telling us which kind of forms we're looking at on X. That's the idea. And this functor behaves in a quadratic way. So let's see some kind of examples. Let's for simplicity take a commutative ring. For simplicity, take a commutative ring, but you could do it with a non-commutative ring with an evolution, etc. I mean, all the gadgets work. We're going to define the symmetric quadratic functor as parameterizing symmetric forms in some sense. So this is the spectral arm. So this is a spectrum, and we're taking our complex tensoring. Okay, this is derived tanks, tensor products. I'm not saying that. It doesn't matter because we have. Doesn't matter because we have projected modules, but okay. In general, you would need to take a giraffe tensor product. Anyway, so this is, you can look at this functor, and it is quadratic. And if you look at its groups in degree zero, then it's easy to see that it's actually just symmetric forms on M. If M, sorry, I'm not being very precise. What I mean, M is like M is a projected module concentrated in the degree. Module concentrated in degree zero. There, it could be any complex. Okay, so in some sense, this is some version, some abstract version of symmetric forms. And you could do, of course, the same with quadratic forms. Okay, so you can have a quadratic quadratic function. And instead of fixed points, you take orbits. Again, if you take it and look at its pi zero, you can check that. At its pi zero, you can check that you recover quadratic forms on M, but in both cases, it has higher homotopy groups. Okay, it's not just that thing. Okay, and actually, you can interpolate between these two guys by looking at the linear part of the symmetric one and truncating it. So you kill the parts that have homotopy groups above a certain level in spectra. And then Then you get a tower like this, and at one end of the tower you have the quadratic one, at the other end the symmetric one. This map is taking quadratic point with polar form in some sense. And in the middle, you have all sorts of truncations. And if you're used to inverting two, whenever you can invert two, this whole collapses. Okay? But if you don't want to invert two, then that's what you have. That's what you have. So, this is a feature of the theory that you can fix the quadratic functor, you can change it, and you can look at what happens when you take different ones and you relate them. That is important. This is not very usually done in this area. Okay, now I need to explain to you what quantitative categories are. So, remember in the first slide we had pairs like C, Kappa, and they need to be a quantity category. So, first of all, you need to be Category. So, first of all, you need to take a stable infinity category. Then you need to take a quadratic function on that stable infinity category. So, by the way, these quadratic functions are quantum variants. I did not say it. And we call it a Hermitian p-theory, this pair, if actually there's a kind of underlying duality. So, this bilinear part associated to the quadactic functor is actually given by the spectral hum of x to d of y for some object. D of y for some object d of y. And when this happens, they all assemble to a functor. I mean, you can do it object-wise, it doesn't matter, or you can ask for a whole functor. So the ones that we consider, they always live above some kind of duality. And in the past, like if you look at, I don't know, the triangular definition of bit groups, et cetera, they're constructed using just this duality. But now, if you want to work with two invertible and you want to use quadratic forms, et cetera, or you want Etc., or you want to have all sorts of flavors, you need some extra structure. So, this quadratic functor is above a certain neutrality in some sense. It refines it. But you still have the duality. And then you put a non-degeneracy condition on the quadratic functor. We say that it's a point category if it's a Hermitian category. And furthermore, out of this thing, you get a natural morphism from the identity to the double dual. And you ask for this to be an isomorphism. So, in some sense, So, in some sense, the quadratic functions that we're looking at, they're non-degenerate at some level. Right. So, both of the ones that we looked at before, they are point carry, so they satisfy these two things. And actually, the underlying duality is the same. It's just hum of complexes into the base frame. And all the truncated ones that I saw, it's the same duality. And all the truncated ones that I saw, it's the same drill. Okay, now another feature of infinity categories is that it's actually quite convenient to consider all sorts of the properties of categories whose objects are actually infinity categories themselves, and to look at what these categories have as properties. And so I'm going to present some of them that we are going to use. Present some of them that we are going to use. So there's the infinity category of stable infinity categories. Okay, the objects are stable infinity categories and functors or exact functors. Then above that you have the infinity category of Hermeschen categories. So objects again are Hermeschen categories, so stable plus quadratic functor. And inside there you have pointalic categories. So this is not a Categories. So, this is not a full subcategory because we do not take all morphisms. We impose a non-degeneracy condition on morphisms, also. But that's how it looks like. So, as I said, one morphisms in this infinity category are exact functions. Of course, I'm not defining these things. I'm just telling you they exist. One-morphisms in here are given by pairs. So, you have a pair, an exact function. Have a pair, an exact functor between the stable and fifty categories, and also a natural transformation that allows you to, in some sense, commute the quadratic functor with that functor. And in cap P, this morphism is in cat P, actually. So when you have such a transformation, there's an induced one that tells you how to compute the duality. This is naturally obtained out of this one. And we're asking for this one to be. And we're asking for this one to be an isomorphism, not that one. Okay, this is too strong. Right, so this is these are these infinity categories. And now, as I told you in the beginning, we're going to look at functors from that one to spectra. Okay, and the beauty of this business is that the functions that we're interested in, like K-theory, Hermeschen K-theory, et cetera, they're universal for certain properties. So it really just. So, it really justifies what they are. And I'm going to explain how universally. So, if you take a morphism in the category of stable infinity category, cat stable, you say that it's a Carrollbee equivalence if it becomes an equivalence after idempotent completion. Okay? Which idempotent completion is an operation that you can do on these stable infinity categories. Stable infinity categories. Maybe this one is not an equivalence now, but if you, once you do this, the induced morphism becomes an equivalence, then you call it a Calvin equivalence. Again, there's an enhancement to the Hermitian level of that condition. You put the same condition of being a Caiobi equivalence on the underlying functor. And this transformation, you want it to be an isomorphism. You want it to be an isomorphism. And then you call this a Pointierica B equilibrium. So this is the stable version. This is the Hermitian version somehow. So then you can try to invert these Kawhi equivalences because some of the functors we want to look at need to have this property. So you can localize your category. So you can localize your category by formally inverting KOV equivalences. You get another category where I add this little natural sign. And you can do the same thing for YKI categories. You can localize it, formally invert these guys. Now I'm going to tell you the properties that we want from the functors that we're going to look at. And they're very natural and sometimes. So if you look at a null sequence, So, if you look at a null sequence, so it's a sequence that factorizes through zero in this. So, first of all, let me just tell you that this is not a stable infinity category, but is not stable. The objects are stable infinity categories, but this category itself is not stable. And you were going to say that an all-sequence like this is a Verdia sequence. Fits both a fiber and a co-fiber sequence. So, if you were to put the zero here, it would So if you were to put the zero here, it would be both a pushout and a pullback. And since it's not stable, it's a condition. It's not equivalent. Of course, if you take the homotopy categories, this corresponds to the situation where this is a Verdeolocalization of that subcategory. But abstractly, that's what it is. So for example, the fact that we can say this. The fact that we can say this is a nice feature of that technology of infinity categories. It's quite useful. Again, you can do the same thing by asking that it becomes a fiber-cofiber sequence when you see it in there. And of course, let me give you some examples. So there's a very simple example, but that is actually very important. You take a stable infinity category, you take the category of arrows in the The category of arrows in there. So the objects are arrows, and morphisms are commuting diagrams like this. So formally, this is the functors from delta one to C. Again, it is stable mismatically because it's functors into C, some diagrams in C. And there are two functors. Here, you can take an object and map it to that object, and here you can map it to its target. And it's a Verge sequence. It's actually split. You can find adjoints everywhere. So that's an example, completely abstract in some sense. And now let me show you an example that, of course, you want to see when you look at homology theories. So if you take a scheme, I'm going to work with quasi-compact, quasi-separated schemes for technical reasons, but I'm not going to explain. If you take a closed subset and the open complement, and you look at these perfect derived categories, then this is a Kaogi sequence. Is a Carouvy sequence. And it's actually not a Verdi sequence. And we know actually that a guy in here, so when you have a Verdi sequence, you can see that this map is essentially subjective. This map is not essentially subjective in general. And it was seen, I mean, in this famous paper of Thomas and Trogo, you can control when an object actually comes from here just by looking at its class in K0, at the class in K0 with its. Anyway, so this is an example of a thing that is not a Verde sequence, but That is not a Verdi sequence, but that is a Curie sequence. Of course, notice there are no assumptions of regularity on the scheme. Okay. So you can do the same thing at the level of Poincaré categories. So I am going to say it very quickly. Again, you have a null sequence in here, and you add the word Poincaré and change cat stable to cat-B. Okay, and it's exactly the same. CAPITH, okay, and it's exactly the same condition. So these sequences, again, are very natural. They're just fiber co-fiber sequences in CAPI. Now, let me introduce another Poincaré category. So if you start with a Poincaré category, you can construct another one that we call the metabolic Poincaré category. And the objects are just, so this part is just arrows. And then there's a natural quadratic functor that you can put on an arrow by just looking at the fiber. Just by just looking at the fiber of the original when applied to the map. It's contravariant. Right? So secretly, this thing encodes Lagrangians in X. But it's very simple to explain what this is. And again, the fact that you can construct this thing, it's a stable infinity category automatically, and it's very easy to check that it's Moira, is a nice feature of infinity categories. Then you have Then you have a sequence that is the metabolic sequence. And I'm not going to tell you exactly what the maps are in terms of natural transformations, but the underlying maps on the stable categories are just the ones that we've seen for the arrow sequence. That are the same. And then you have natural transformations between these quadratic functions. So here it's the same quadratic functor, and here you need to loop it. You land the spectra and you apply the loop. Again, it's a quantitative energy sequence and it's. Again, it's a pointial RG sequence and it's above the arrow. And then if you put the symmetric or the other ones, it doesn't really matter, you get a pointalic ROV sequence. Okay, so these are examples. And now let's put properties on functors. So remember, we want to look at functors from here to there, and we're going to say that such a functor. And we're going to say that such a functor, so we want to put a P here, but this is the case, the baby case for K-theory, et cetera. We want to say that it's a Verdi localizing functor, respectively a Kerouvi localizing functor, if it sends Verdi sequences in here to exact sequences in spectrum, respectively Carou V sequences in there to exact sequences is in spectra. Again, it's a it is a very natural thing to ask. Thing to ask. Again, there is the Poincare level thing where you upgrade everything to the remission level. And again, you just have to add the word Poincare, replace cat ST by cat B, and mute that taste mutant. You get this. Okay? Now, when you do K-theory, if you look at K0, there's one thing you need. You need classes of objects. It doesn't make sense to define K0 if you. It doesn't make sense to define k0 if you don't know what an object in your k0 is supposed to be. Okay? So we're going to look at the core functor, which takes a stable infinity category and sends it to its space of objects, which means that you just keep the same objects and you just keep isomorphisms that you forget about the rest. It's like a space. And there's the same thing at the Poincaré level. You take a Poincare category and you send it to the space of forms. So I write it like this. In the space of forms, Is in this space of forms, the points in some sense, or pairs, an object of C, and an element in the forms on that object. And again, this has a natural space structure, etc. I'm not going into that, but you should just think of it's the analogous thing, okay? And you just keep isomorphisms. So we want to have classes in K-theory, we want to have classes in GW0. In GW0, okay, and we need these functions to formulate this. Okay, so what is K-theory? K-theory is the initial, so usual K-theory and connected, non-connected K-theory, or bass K-theory. It's the initial Verdier or Kerubi localizing functor from cat stable to spectra that receives a map from core. Or. Okay. So of course it cannot receive it directly because this doesn't map exactly to spectra but to spaces, but it receives it in its infinite loop space. So this is not due to us, this is due to Bloomberg, Getner, and Tabuada, and also to Barwit to some extent. So of course, there's no reason for such a thing to exist, but it exists. And that's a theorem. And it's also a theorem that actually coincides with qualum theorem. Theorem that actually coincides with quality theory when you can in a setting where you can compare them. I'm not going to. Okay, so when I saw this theorem for the first time, I thought, okay, now we know what K-theory is, higher K-theory. Of course, K0, it's easy to say what it is. But to me, this is extremely important, this type of theorem, because this kind of justifies ISR. Okay, so what. Okay, so what about Hermitian K-theory now? Well, Hermitian K-theory is, as you can expect, the initial conqueréradier, so this version, localizing functor from, ah, of course, this is now st, this is p, I'm sorry. And the bass version of it just is supposed to be the initial CaroV localizing function. Again, with a map from the space of. Again, with a map from the space of Machiavelli to its infinite loop space. Again, it is highly non-trivial that this exists, this initial object, and you, in some sense, need to explain how you construct it. This is not in our papers. I'm not doing it here. But again, it gives a completely universal description of what MSH is supposed to be in a completely general system. Okay? Right. Right, so let's see what properties it has. So it's completely formal that using, that is for delocalizing, applying K-theory to the arrow sequence, you get 1000 additivity that tells you that K-theory of the arrows is square of K-theory of the base. You have the two pieces, and this thing is split. This is what's happening. And if you do the same thing with GW this time, it is more. GW, this time it is more complicated because the metabolic sequence is not split. So, what you get is an exact sequence of spectra like this. And of course, the middle term, well, it's metabolic objects. We want this to be simple. And it is. So there's another category you can define. It's the hyperbolic category. So this time, you start with any stable infinity category. There's no given quadratic functor. And you cross it with itself, and you use this as a quadratic functor. And you use this as a quadratic function. You know that when you do quadratic forms, that this defines a hyperbolic forms. Okay? Well, this is at the categorical level. Again, this is a spectrum. And you call this the hyperbolic category. And it pops out of the formalism. I'm not going to explain, but it's completely abstract nonsense that there are functors from the hyperbolic category to the metadata of these guys. And when you apply GW by some time or By some diagram chase on these sequences, you see that they become an equivalence. And it's also easy to see that this is the same thing as the K-theory. So in the end, this middle term, this is just K-theory. You end up with something that we call the Botkin-Hauer sequence, in which you have K-theory, Grotnig-Witt, or Emerson K-theory, or at the concern, and here you have a T. So with this, you can just So with this, you can do all sorts of induction because when you control this, well, you have chances of control of this. Why was there no loop in the there? Yeah. Because I forgot. Okay. Now, what happens if you apply Basque theory to the localization sequence? Remember, if you were to take quote. Remember, if you were to take quilt and k3, well, it doesn't say anything because this is just a Poincaré, this is just sorry, a Karobi sequence, not a Verdi sequence. But if you apply advanced K-theory, you get a localization sequence. Of course, if you were to take Hamas B groups, to get your usual K-theory groups in some sense, you get long exact sequences of Hamas B groups. Okay, that's what the formulas I'm giving. Then you can apply Then you can apply GW to the analogous sequence where you add the symmetric quadratic functor everywhere, or the quadratic one, or these truncated ones, and you get, again, an exact sequence of spectra, and so a long exact sequence of homotopy groups. You get your localization sequences, and you are happy. So, I think, yeah, reaching the second part of my talk, it's about time. And I must say that I'm not stating the results that we obtained using this formalism, but there are quite a few. So we managed to compute, for example, broadly bit groups of Z up to a huge, so under the Van Diever conjecture of Rick theory, they're all computed now. And if you just, the range to which the Van Diever conjecture is known is up to 20,000, which I think, they're computed. Okay? So again, as I said. Again, as you can see, there's no two inverted anywhere in this formalized. There's no two. I mean, I'm not discussing two too much. I mean, say two what it is, but it doesn't play any role. So you can compute what happens for Z, it works, I mean, etc. You can do any bits when you take a schema. Okay, we also proved some periodicity conjectures of Karoubi using this. Of Karugi using this metabolic in our sequence, and it's not too hard. So, yeah, it's a fruitful level of generality. And for example, in these periodicity conjectures of Carl B, you have different flavors of forms. You have quadratic forms, you have symmetric forms, you have even forms, and so on, and so on. You have to look at different quadratic functions. Right, so let's talk a little bit about motives. So, now I'm going to fix. So now I'm going to fix a base scheme that is going to be quasi-compact, quasi-separated, and I'm only going to look at schemes that are quasi-compact and quasi-separated over that base. And so, of course, you can take a scheme and send it to its derived category of perfect complexes. So that is a functor. So that is a functor. And it makes sense to say that this functor is a sheaf. There's the sheaf condition. So of course you need to put topology on that category. But the sheaf condition is expressed as something is a limit of something. And this makes sense in the infinite tangible level. Okay, so it makes perfect sense. And it is true. These things are actually FPQC sheets. So they're also in the sheaves. They tell sheets that it's a risky sheaves, et cetera. Which means that you can reconstruct a draft canary. Which means that you can reconstruct a draft category out of local pieces. Okay. This again is a feature that is extremely hard to obtain when you use just turning loose categories. Formulating this is just extremely painful. Okay, so now what are we actually going to do? Oops. There's a spectra missing here. Sorry. So uh So, what can we do? We can take a functor, just like Hammers and K-theory, that maps, that goes from cat P to spectra, and we can input a derived category of a scheme and fix a certain quadratic functor. So this is just a suspension because we need it later, but you fix this somehow. And of course, this gives you a functor from there with spectra here to functors from, we're going to look at small. From we're going to look at smooth schemes over S to spectra. We'll use this notation or this thing. This is the shift, and this is just the fact that it's the symmetric quodic functor that we use. And a theorem is that if you start with a Caribbean localizing functor, then you end up with an Ismi sheaf. Okay? What is the reason? The reason is essentially, so if you look at the Zariski sheaf property, well, this square, which This square, which you can construct when you have an open cover, okay, it is a Poincaré-Caouv square. So I did not exactly tell you what a Poincaré-Cairo B square is, but it's just a little generalization of Poincaré-Caroubi sequences. But they're sent to exact squares of spectra. It just means that this is the second part of a Point Carrier recovery sequence and they have the same okay. Okay, so this is the Zariski shift property, and to get the Nisnevich shift property, you can look at the same type of diagram, but for an elementary Nislevich squares, and again, you will get a point-friendly probability square. And again, this more or less formally tells you that this thing is output and its immediate sheath. Okay. So, what is our representability results? So, we're going to produce functions. So, we're going to produce a functor that takes Kerubi localizing functors from CAPG spectra and outputs a spectrum in the stable homotopy category of schemes over a base. Again, all these things are considered as infinity categories. And what does it mean that it represents formation K theory? It means that if you input a scheme and you push it all the way to there. And you push it all the way to there by the usual way. And you take your spectrum and you suspend it. Well, you do not exactly get this, but you get this made a homotopy invariant. Okay? This is forcing something to be homotopy invariant. Okay. Okay, I have just a few minutes left, so I'll try to. Left, so I'll try to explain what it tells you. So, this applies to this Basque theory where you forget the quadratic functor. This applies to GW, the bold one, and this also applies to a bold version of L-theory. I did not discuss L-theory, but it also works. Actually, we produce a ring object. So, I do not discuss this, but it's important to have that it has a ring structure for all sorts of reasons. Of reasons. And so, of course, if you start, how does it work? If you start with a functor like this, you could, as I said, you end up in this Nevitchee by doing this. And then you can force it to be modified invariant. And you end up in a module invariant Misnevich. So that is, you just do this. It's more or less formal by some sort of Yoneda, some version of Yoneda Lemma. That's at this level you just get that. There's nothing deep in here. Now, you want to go all the way to the stable homotopy category of schemes. And so this thing, it has an infinite suspension to P1 spectra. So basically, to go from here to SH, you need to invert. SH, you need to invert tensoring with points of P1. Okay, so this is a model for this. And so you have these joint functors. And what do we need? We need a P1 spectrum here. So it's the same thing as a spectrum, but instead of having the loop, you have the P1 loop or the P1 suspension in the structural morphisms, such that the nth part of that spectrum is. Part of that spectrum is actually this. How you do this is just by proving a projective bundle formula. So, this is the projective bundle formula for P1, at least in the full generality. And how do you prove this projective bundle formula? Well, you just prove that this, again, is a point-variability sequence. So, when you apply everything, you get an exact sequence of spectra. And this tells you how you loop a functor. And that way you can identify the loop of one thing with that thing, and the natural map. This gives you the structural maps in your spectrum, and you go on. And there you get your spectrum. Okay, my time is over, so I'll just say that we have also results on homology invariants, and they're true for with some assumptions, of course, regularity on the base scheme, but we also need an Ethereum finite. But we also need method in a finite core dimension. And so, for instance, if you're at that level, so this should be bolt, this thing is actually, there's no A1 localization. You just get the multi-invariant already. I'll need to force codes of bolt. Okay, I think I will stop here. Thank you. Questions? Can you get some version of what periodicity from this? Yes, yes. Yes, of course. You have a very broad period. It is more less formal again. Um Yeah, and it's a bit difficult to explain it uh quickly, but yes. Explain it quickly, but yes. About the definition of quadratic functions, so for vector bundles of a scheme, there's another definition, which is a functor such that phi of L transfer V is L tensor minus two tensor phi V. For all line bundles and all vector models, you can take out take out uh line bundles raised to the power of minus two as it is. To the power of minus two, as it is. This is the case. Possibly, uh, formulated this defines for analytic counters. Can you do the same in your setting when you're taking outline bundles to the power minus two? Yeah, I'm not sure, but there's one thing that is clearly different. So, vector bundles over schema is not a stable category. Okay, so you could try. Okay. So you could you could try to do you need to formulate this in the derived category and the complexes of vector bundles and see what it means, etcetera. But um maybe yes, just say a few words about where L theory goes between uh k g w. Yeah, there's a sequence that I did not show that relates k theory, gw, and L theory. So there's a short, it's an exact sequence of spectra. So it's similar to K-theory, GW, and VWAP. Exactly, but K-theory has orbits under the action of the duality. So the sequence is K-theory orbits under the action of the duality defined by the duality of the quadratic functor, DW, and then L-theory of that thing. And by the way, L-theory also has a universal characterization, and it just the same one, but you have to add that it kills the hyperbolic calendar, let's say. And so it does its. And so it's pipe zero is the bit group or when apply to the bit group. It is again you have to say which bit group of which flavor, etc. And it is when you pick the correct productic functor. And this is not a completely trivial matter, but yes, it's somewhat different. All right, uh let's think I've used again I guess we have seven minutes, so we started two. 