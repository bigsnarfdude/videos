I'm Daniel Anson, and just before I start, I want to thank all the hosts and speakers at the conference. There's been some really fascinating talks, and I'm already looking forward to 2022. So, I'm a research assistant. I'm just going to be talking about some of the stuff I've been doing over the last few months. So, for those who missed John Lees's great talk on Wednesday, Pot Punk. Talk on Wednesday. Poppunk is a genomic epidemiology software developed by John Lees and Nick Croucher at Imperial. It's basically used to cluster pathogenic isolates based on distances between their core and accessory genomes. A key step in this process is something called sketching, where the genome is split into k-mers of varying lengths, and the k-mers are compared between isolates to get an indication of their relationships to each other. So while it's primarily Other. So while it's primarily designed for bacteria, it's scalable and also can be used for viral and eukaryotic pathogen clustering. So with this in mind, we kind of have been working to extend its functionality. And I've been building a web-based application called Pop Punk Web. And basically, the aim of this is to improve the accessibility of Pop Punk because it's a command line software. And while this means it's extremely versatile, it can be difficult for non-speakers. Versatile, it can be difficult for non-specialists to navigate. So, also, we're hoping that this will allow some use in the field of the software. And basically, we're going to curate a set of pre-calculated and optimized databases that will be selected from in the web app. So, a key concern that people have in this kind of software is how can they ensure that their sequences are secure. For us, we circumvent this issue by Circumvent this issue by using something called WebAssembly. For those that don't know, WebAssembly is a fairly new programming language that emerged in around 2017. It's quite compact and memory efficient, and it claims to achieve near-native runtimes for in-browser code execution. So, we have used the used WebAssembly to make to allow in-browser sketching, which is the Sketching, which is the step I described briefly earlier. And basically, this means that sequences never actually have to leave the user's machine. And it also has a secondary benefit in that it reduces the requirements for internet, kind of promoting the field use aspect, because we no longer need to post the full sequence to our Python backend. We just post the sketch itself. So I've just done some benchmarking. Here we can see that WebAssembly basically takes WebAssembly basically takes twice the amount of time as the native code to sketch, but considering that a 12.5 megabase pair genome can be sketched in approximately 25 seconds, it's still pretty good. And the major concern we have at the moment is this difference here, which is actually the result of the time taken to post our sketch from JavaScript to Python and then subsequently retrieve the information from Python because it From Python, because it kind of this consists of like all our clustering information, our prevalences, and the network. So, if anyone has any suggestions of how we can increase the efficiency of this step, please do let us know. I'm just going to do a quick demo. Here we can see our nice user interface promoting use by non-specialists. If I take a Streptococcus pneumoniae sequence here and drop it, we have our in-browser sketching happening. Our in-browser sketching happening and it's already been completed. So, some of the technology we use in browse is the we make use of the MicroReact API, which allows us to produce nice trees that render fairly quickly. And also we use SiteScape JS in order to represent the cluster network that's produced by Pop Punk. We also have We also have some prevalence information. As we can see, it's fairly basic for the time being, but we have some sequence quality metrics as a peace of mind, as well as some good clustering information. Here we can see the cluster prevalences within our input data set with our assigned cluster highlighted in orange. Here's the microReact output, again, with our sequence highlighted, and the same with our network. So we haven't deployed this just yet. So, we haven't deployed this just yet, but we hope it will be live in a few weeks. And we would like anyone who's interested to go ahead and give it a test. And we'd appreciate any feedback anyone has. Yeah, so thanks very much. And thanks to John and Nick for giving me the opportunity to participate. Okay, thanks, Dave.