Hopefully, I can see this. All right. Oh, it's covering some of my screen. All right. Thank you all for joining. And thank you to the organizers for organizing this. It's a welcome distraction. So first things first, the title. I was surprised by the title. Thank you, Paul, with coming up with the title because I realized that I didn't send the title. That I didn't send the title. I did change it a bit. So, the title is: we're going to three-color graphs that have a certain structure and have bounded degree. And on the main page, on this cover page, you can see a very nice, I wanted to remind us all of the better times. And hopefully, next year we're going to be there again. That was one reason the picture is here. And many of you who are listening are actually on this picture. But another reason, actually, is that this work that I will talk about. Is that this work that I will talk about was started there. Much of it was done there, and all the co-authors except for Pat Morin were in the workshop. And Pat joined us after the workshop when we actually obtained more results and actually had many modifications in the meantime. But anyways, this is actually where I came from this workshop last year in Barbados. All right, so what is the topic? Oh, I'm trying to... How do I flip a page? To how do I flip a page? Sorry, this is uh oh, there it is. The usual buttons seem to work. So, the topic is clustered coloring. So, what's cluster coloring? Most of you know, but uh, I will remind you anyways. So, we say that a graph is K-colorable with clustering C if each vertice gets one of the K-colors and such that each monochromatic component has at most C vertices. By monochromatic C vertices. By monochromatic component, here what we mean, you take a graph induced by vertices colored with the same color and you look at the size of the biggest component. So if each one of these has size at most C, then we are talking about K-colorable coloring, a K-coloring with clustering C. So what is known about this? If you take C to be one, then it's basically the classical coloring. So if we are looking at So if we are looking at, I'm trying to figure out how, I still don't know how to flip a page, I'm sorry. Maybe a button. I'm gonna do this. Let's try. Let's try. The normal buttons for flipping a page don't work. Let's try a slideshow. Maybe that's gonna work. Okay, so clustering with cluster sizes one brings us back to classical coloring in the case of planograph, for example. And the case of plano graph, for example, we know that there are four colorable with clustering one from four color theorem. We know that. So the idea with this cluster coloring is you want to ask yourself a question, can we use less colors if I allow these cluster sizes to be bigger than one? That's still constant. This is typically a type of problems that were studied. Okay, so let's say can we do, for if you're since we're looking at planar graphs, can they If you're since we're looking at planar graphs, can they be three-colorable with constant clustering? It turns out that the answer is no. There are planar graphs, in particular the one in the picture here. I'm not going to explain it. It's a typical example for those who studied this. And it's easy actually to see why if you spend a couple of minutes on it. So this particular planing graph, in fact, planar tree with three graph, is not tree colorable with bounded clustering. But one thing actually to see is actually this graph has a Actually, to see is actually this graph has a dominating vertex, so it basically has a very high degree, and that's going to play the role in this talk. Okay, let's see, next page. So a clustered chromatic number of a graph class. So here we're looking at some graph class, so this G can be planar graphs, graphs are bound to gene. So what's a clustered chromatic number for these graphs? It's a minimum k such that exists some constant, C, such that every graph in a family is k-colorable with clustering. Is k-colorable with clustering C. So we are interested in the minimum number of colors for a graph class that gives us a constant clustering. So for planar graphs, based on what I told you in the previous page, it implies that planar graphs, cluster chromatic number is 4, so basically the same as a classical chromatic number. Early results on graphs of boundogenus show that by the authors here. That by the authors here in the picture, here in the bottom of the slide, they show the cluster chromatic number of bandogenes graph is at most five. And by the recent result, this has been improved to four, and again, four is best possible because of the example that I showed. Dvozza can already improve this. They in fact proved something more general. I'm not sure if that result has been written yet. It has been announced. Announced. And so here's so we looked at planar graphs, graphs abandoned. And more generally, if you look at the classes of graphs that exclude a fixed complete graph as a minor, there was a bit of a race to obtain the best possible result, which is a T minus one. So graphs that exclude KT as a minor are T1 colorable with constant clustering, and that is And that is best possible. It's a covivalent, it's like a cluster version of Hadeger's conjecture, but the result that is obtained is even more strong because it works for least coloring, which is not true for the classical Hadeberg conjecture. All right, so let's go back to what we know about planar graphs. So all of these results are for the general, let's say, minor closed graph classes. The results that I addressed so far. That I addressed so far. So they were about planar graphs, graphs about the genus, and proper minor closed families. So if you go back to that example, we see that we cannot reduce the number of colors in case of planar graphs unless the degree is bounded. Okay, so then the result that was known before is that the first result that was proved for bounded degrees, so natural question is to ask what's the best possible. Natural question is to ask what's the best possible for planar graphs of bounded degree. And this question has been answered by Louis Esper and Gwen Gerais in 2014, where they proved that cluster chromatic number of bound of planar graphs and in fact a boundogenous graph is at most three and in fact three is the correct answer because of this because of the Hex lemma, this example here, they're in fact planar graphs of maximum degree C. Graphs of maximum degree six that cannot be three-colored, sorry, two-colored with bounded clustering. And if maximum degree six is changed to five, then actually two is possible. All right, this result has been generalized in 2017 from graphs of bounded genus to all graphs that exclude the fixed graph as a minor and have bounded degree. Bounded decree. All right, so if we look at what we know right now, so let's go back to the example of planar graphs. We know that in case of planar graphs, if we want to three-color them, which is best possible, there has to be, it's not possible if the degree is not bounded. So in other words, in three coloring, the best we can hope for is basically the dependence on the cluster sizes on delta is unavoidable. So we have to have dependence. Have to have dependence on the maximum degree in some cases. So, this leads to the following natural problem that we studied in, that was the focus of this paper. So, which is what is the least function delta? So, what is the basically the smallest dependence on delta on the cluster size in a three-color? In a three-coloring of classes of graphs, such as planar graphs, boundogenous graphs, minor closed graphs. So, this is the questions that we studied. So, we want a smallest dependence on delta in the cluster sizes. Let's say a planar graphs for the beginning. So, let's see first what was known. So, for planar graphs and graphs abounded genus, as I mentioned already, three coloring results for Already three coloring results for bounded degree graphs was proved in 2014 by Gwen and Louis, who may be actually listening to this. They didn't specifically, to be fair, they didn't specifically work on this bound here, but the bound that is in their paper, if you read it, is roughly delta to the delta, and their technique doesn't cannot really, if you follow the technique, it doesn't seem to be possible to prove the exponential bound. Prove the exponential bound. The bound was improved in a recent result by Chung Hong and David Wood. It was improved to, here I put a genus dependence, so to genus to the 19, to delta maximum degree to the 37. So they got polynomial bound in this result. So that result was improved and implied also to for bounded genus graph. Both of these bounds do. They proved something. They prove something more general. We'll get to that at the end with an open problem. And in terms of more general graph classes, such as KT minor free graph classes, the result by Song Il and Chung Hung, their bound is again, it's not like they explicitly stated by it's certainly at least exponential in delta. Exponential in delta. Although, from personal communication, I understand from David that Chung Hung said that with some stronger graph-minor structure theorem, they could make it polynomial. That was from. So this is what was the state of the art until the workshop last year. And so the new results that we obtain are as follows. So what we have is that the following families of graphs can be three colorable with clustering of size quadratic. Of size quadratic. So these are basically, in terms of minor closed families, we have apex minor free families. This includes planar graphs and bounded genus graphs and so on. So we have an improvement from about delta 237 to delta square. We don't know what's the correct answer for this, but right now delta square is the best possible. This results that we have also applies to non-minor closed families, such as k-planar graphs. Here I have G-K-planar graphs. GK planar graphs. They were supposed to talk before me and explain what GK planar graphs said. It's simply these are the graphs that can be embedded on the surface of genus G with at most K crossings per edge. These are not minor cross families. They can have huge complete graphs as minors. These families too are tricolorable with clustering of size delta squared. And finally, in terms of proper minor closed families, we reduce the bound. The bound from exponential or whatever it was to delta to the five. And all of these proofs, what I want to emphasize, in particular this one about minor clause families, this is a very simple proof and it wasn't simple. It wasn't simple before. Also, delta to the 37 also was not simple. This is a very simple proof. So this is what I want to tell you a little bit about of how we prove this. How much time do I have? 15 minutes. 15 minutes? 15 minutes, that's perfect. Okay, so for the rest of the talk, I'll give you an idea how we prove this and what are the remaining open problems. All right, so this was started, we started working on this in Barbados in March 2019, and that was when we had these new results on the product structure of these families of graphs. Families of graphs. And basically, on these layer partitions, David was supposed to talk about this before this, but as we know, something prevented him. Hopefully, he will talk after me. Luckily, I actually don't need it. While initially in the workshop last year, we did use this product structure to obtain the result. With time, we realized actually that we need something much weaker. So, we don't need these definitions. Definitions. But one thing that relates it, I'm not sure we would ever get these results if we first didn't have this picture from this product structure for the, let's say, planar graphs. Okay, but you don't need to know what it is. I'm not going to use it. So let's say we want to prove it's planar graphs. And in fact, here's the main lemma. So everything follows from that lemma. For that lemma, I'll just need a notion of layering. It's very simple. It's a partition of vertex sets. partition of vertex set into v1 v2 v3 ordered vertex set and what does mean ordered this partition need to have the following property like demonstrated in the picture here which is that if you take any edge its two endpoints are either in the same part vertex part like this edge here this edge here and this edge there or in two endpoints have to be in two consecutive parts that's why the ordering Consecutive parts. That's why the ordering of the sets. Okay, that's what a layering is. So the results that the main key lemma that we proved and that improves these results is this one here. It says that if you have a graph of maximum degree delta that has a layering such that if you, what this says here is if you take any nine consecutive layers, nine is not important here, it just turns out to be. 9 is not important here, it just turns out to work with 9. In fact, in our paper, I think it's 11. I changed this proof a little bit because the proof that I'm going to present today is a little bit more visual, so I'm going to present you more visual proof. So here there is such that if you take any nine consecutive layers, so the graph induced by any nine consecutive layer has three with at most k. You can think of k being a constant. Okay, so if you have that, if you have a family of graphs that has a layer, Graphs that has a layering such that any nine consecutive layers induce a graph of bounded three width, then that graph has a three coloring with clustering delta squared times the three width, which here is a k, but if you think of k as a constant, then it's a k to the three. Sorry, k not being a constant, then it's k to the three. Okay, so this is what we prove. I'll tell you once I show you the proof of this or sketch of the proof of this. Sketch of the proof of this. I'll mention which families of graphs have this property. Many of them do. These include planar graphs. By the way, think of layering as breadth-first layering. Then the families of graphs such as planar graphs and boundogenous graphs, they have this property just from breadth-first search layering. Okay? So, and then I'm going to discuss what other families of graphs have this property, but the point is this lemma is the key. This lemma is the key, and since we are working with graphs of boundary tributes, we should know something that has a maximum degree delta. We're going to use as a black box this result that was known already from 2003 by Alon, Dino, Porovsky, and Vetigan. It says that every graph with three with K, let's say this is K here, is two colorable clustering 20 times delta times three with times three with that graph. Of that graph. So, this is just take this as this is what we know to do. We just know how to two-color the bounded tree-width graph with maximum degree delta. And now we want to do three coloring. Okay, we have one extra color to somehow make this work. Okay, so here's a start. Let's do something obvious for the beginning. All right, so here's our start. We're going to take first nine layers because we know how to color them. So, here you have first nine layer. I'm going to call this. Here you have first nine layers. I'm gonna call these blocks. Okay, so I'm gonna take nine layers, then I'm gonna skip one. Okay, then I'm gonna take another nine layers, then I'm gonna skip one, then I'm gonna take another layer, and then I'm gonna skip one until I come until I run out of layers. Okay, so now, so we know how to color. If I take this block one, the graphic used by block one, the first nine layers, it has by our First nine layers, it has by our assumption of the lemma, by the assumption of the lemma, it has three with at most k. And by the previous result, we know how to color two color this graph. So let's say we're using green and blue. I'm going to two color the first block, I'm going to two color the second block, I'm going to two color the third block until we run out of blocks. And we end up with something like this. These blobs here, let's say, are components. They don't have to look like this, they don't have to span all the layers of the block. Don't have to span all the layers of the block. Okay, so here's my picture: these are blue clusters, green cluster, one uncolored layer, and then again. All right, so now we have extra red color. We need to color the vertices over here. Okay, if we can just use red color, we would be done, but clearly we cannot use the red color. The graph induced by one layer can be any kind of planar graph of bounded tree width. So, and it can be of unbounded size. So, certainly, we cannot use. Bounded size, so certainly we cannot use one color. So we have to, in addition to new color, let's say red, we have to use one of these, blue or red. And I arbitrarily decided I'm going to reuse green color. So I want to color the vertices here and here, maybe recolor some of the green ones such that when I put it together, it actually works. Okay, so I'm going to, so blue are now completely irrelevant. Nobody's going to touch them. They cannot grow because I'm not going to use blue, so I can ignore blue. So I need to. Ignore blue. So I need to color these vertices here and here with red and green. Maybe I need to recolor some of green. So but let's blindly do that. Let's say I color some of it. Let's say this is my strategy. I'm going to take the last layer of the block here. So let's say it looks like this for now. We are ignoring blue. Let's say the picture is like that. These are my green components. I need to color vertices in these unused layers. And let's say what I'm going to recall. And let's say what I'm going to recolor is last layer of block one and the first layer of block two and everything in the uncolored layer. I'm going to recolor it with blindly. I'm going to apply that lemma and color it with green and red. Clearly something's going to go wrong, but let's see what's going to go wrong. If it was super lucky, it wouldn't go wrong, but then there wouldn't be a talk. All right, so let's see what do we get. So let's say I'm recoloring graphic. So let's say I'm recoloring graphene juice by this layer, this layer, and this layer. I'm going to recolor it green and red. And the picture, red, is fine. Clearly, nothing bad can happen with red because nobody, all the reds have constant size and between the blocks that far apart. Remember, the edges only go between consecutive layer and within a layer. If we look at the graph induced by these three lines, induced by these three layers, the clusters I have constant size. So this is my green, the cluster. So, this is my green. The clusters are nice. However, when I look at the big picture, the whole graph, I glued all bunch of green components together. So, for example, here, look at this. This is all one big green component. By the way, there can be unbounded number of green components here. So, this can be have size n, now what I did. So, there are two type of problems that I caused. One is that I glued two green components. Green components in the two consecutive blocks. That's problem number one. That one is harder to solve. Another problem is you can look at here, I even glued consecutive components across the blocks. Okay, so there are two type of problems that I have to resolve. So let's resolve first the second one because that one is easy to resolve. So look, here what I did, I glued, I'm gluing components across the non-consecrated. Across the non-consecutive blocks. For example, I glued components from block one and components for block three, even block N. This could happen. So let's prevent that first. And this is going to explain why 9. Why am I using 9 lines? All right. So here's how you do it. It's actually very simple. I just put this blocker, red. I use red as a blocker. So let's look at the first block. I'm going to skip three layers. I'm not going to do anything to them. I'm not going to do anything to them. But then I'm going to look at blue clusters in layer four, and I'm going to recolor them all red. This doesn't do anything, right? I mean, this is completely fine. These clusters had constant styles when they were green, so they're constant styles now that are red. Then I'm going to skip one layer and go to the green cluster, green clusters, and recolor them red. Okay, so now between this red and this red, I cannot, these guys are constant size. These guys are constant size for the same reason. I cannot glue them together because there is a layer in between as a buffer. Okay, so these are constant size. Then I go to the second layer, sorry, second block and repeat, except actually that it's basically the layer that I'm coloring red in green is a three away from the uncolored layer. Okay, and I do the same for the blue. And I do the same for the blue, and so on. So, if we go back to the picture, so if you think about what was happening with the green, if I colored, if I connected, if I was coloring these vertices green and connecting these layers, you will see that the green, if you follow my, has to go through a red. So the green clusters that were glued across the blocks, that's prevented. And I try to draw a picture of that. If you look at the example, what happened before. If you look at the example, what happened before, so you look at this layer here, everything was colored red, this layer here, everything is colored lead. So when we are coloring green, these things, let's say these three layers in the second coloring, we can only glue the green components between two consecutive blocks and not between, let's say, block one and three like we did here, because they are broken by the red layer. Okay? Red layer. Okay? All right. So that problem is solved. The one with where we glued, the one where we glued the components from non-consecutive locks. How much time do I have? Five more minutes is fine. Take six if you want. Okay. All right. All right. So here's how we get rid of that problem. Get rid of that problem. Let's go back to this picture. So, why was this? Why did this happen? So, the problem is that if you pick some arbitrary number of layers, so here we pick one layer here, one layer here, one layer here, we actually don't know that this vertex here and this vertex here, we don't know they're actually in the same component, right? So, when we were coloring this, they looked like two non-adjacent vertices that are not in the same component, okay? So, Okay, so what we would be good somehow that we know that these belong to the same component. Okay, so you could say, all right, so why don't we just recolor everything up to the red block, but then vertices here can be red and now glue with the layer above. So that's not such a good idea. While typically it's not a good idea to contract things in a graph classes where you have bounded degrees. Classes where you have bounded degree, we can do it in this case a little bit in a controlled way. So that's basically what we do. We look at this, the second and third layer from the uncolored layer. Each connected component here, we know it has size delta times K, three width. We contract it to this layer. So second, so basically eighth or second to last, so the second layer from the uncolored layer. We contract it down the connected components, we contract. It down the connected components, we contract it here. Okay, so we and we do the same here. So the components that intersect this layer and this layer are contracted, connective components. We end up with a graph that still has three with at most k because three width is maintained under the contractions. But why is that, what about the degree? Why is the degree still delta? You would think that it goes up to delta squared, but in fact, it's still delta. But in fact, it's still delta because the only neighbors of this contracted vertex are inside of the green, all green connected component, and that all green connected components has size delta times k. Okay, so we do this contraction, and the graph still has three with k and the maximum degree now is the of these contracted vertices is now basically the size of the component from the original to coloring. Component from the original two coloring, which is 20 times delta time k. That's now the and so now we take a graph induced by basically these two layers, uncolored layer and these two layers again. We take that graph, this kind of yellow-induced graph, and apply the tree with results. We end up with coloring, we end up with two coloring that has clustering. So you plug this in in that result. I can't even see. In that result, I can't even see here, and you get clustered coloring using red and green with delta times k squared colors. Okay, so now that's it. So that's it in the following sense. So these old vertices that are not touched keep their coloring from the coloring one. These vertices here from layer, last layer, first block, uncolor block, first layer, next block. So these three. First layer, next block. So these three they keep their color from the new colors. Notice that they were never contracted. These contracted vertices, we now uncontract them. And something like this from my previous picture, we now uncontract them. Okay, if they were, so the vertices in this layer here, so it's second from the uncolor, they keep their new color. So all of these will be red, all of these will be green. All of these will be green, but the vertices next to the red blocking layer all get their all color. Okay, so that is picture looks something like this. Okay, since I'm running out of time, so that's a construction. It's actually another maybe two, three minutes to explain why this works. Hopefully, your intuition tells you that this cannot blow up much. That if you take any green old green component, once you uncontract the green vertex, it can only grow. Vertex, it can only grow, but how many vertices would contract it in that green vertex, which is delta times k. Okay, and the same for the red and the same for the red component. So we cannot end up with big components. In fact, the number, the size of the clusters in this redefined coloring is exactly as claimed. Okay, so that is the construction. It's very simple. So that is the construction, it's very simple, and in fact, the proof even written down without the generous image that we have there is one page long. It's very simple to follow. So now back to the main lemma. That's what we proved, the graphs that have maximum degree delta and a layering such that every nine layers, they should say eight here, know that that's important, such that every nine consecutive layers have a constant or tribute at most. K can be three colored with the custom k to. Can be three colored with the customer k to the three times delta. So, what are the graph families that have this? As I already mentioned, this is well known for apex minor free graphs, which include all planar graphs, all bounded genus graphs, and so on, with k being an actual absolute constant. Okay, so remember, k is, so if we take, for example, prep research layering of planar graphs, I'm taking every nine consecutive layers, then this k is, I'm going to exaggerate, say it's at most hundred or something. I'd say it's at most 100 or something like that. Just because in some other result we had that in a layer we have three with eight, but surely something's better. I'm just inventing stuff. Okay, a similar result was proved for k-planar graphs, map graphs. These are the graphs that I already mentioned that are not minor closed. For example, Example, as I said, these JK planar graphs, these are the graphs that can embed it on a surface of G with at most k crossings per edge. Okay, all right. So this is, so basically if you go back as claimed for these graph families, if you plug a hundred here, this is a constant, we get delta squared cluster sizes for three coloring. What about do Do proper all proper minor clause families satisfy this condition? For example, let's say KT minor free families for some constant T. That is not true. So that's the next. So that is not true because if you think of just, you take an N-bi-M green, a classical example, you take an N-bi-M grid and you take a dominating vertex connected to everybody in the green, then every layering has at most three layers. So, and this graph. Layers, so and this graph has a huge tree with. So, certainly it's not true that if you take any nine consecutive layers that have constant tree winds. So, graphs of proper minor clause families in general do not satisfy the condition of our lemma. However, we were able to prove this result that David, it should have made sense if David came first, but I'll try to explain it. We proved that for all in this paper that I'm talking about, so that's one of the newer things that came after Berber. That's one of the newer things that came after Barbados. We prove that every proper minor clause families has a layering and a partition of vertices such that each part intersects layer in O of delta number of vertices. And in addition, if you replace each part by a vertex, think of it contracting, but it's not really contracting because these parts don't have to be connected. But if I replace each vertex by a part, this core. By apart, this quotient graph has a constant trivial. Okay, if you have something like this, then easily you can show that you have this property that we want where this K is actually of delta. Okay, so our four proper minor clause families with maximum degree delta, we have k is actually delta, and which means that we when we plug Which means that when we plug this, we have a three coloring of proper minor close families where we plug delta here, we get delta to the five. Okay, so proper minor close. So that's when you plug this in, this is what gives the result, and that's where delta to the five comes from. So that's about our new results. I'm going to end with some open problems. So here, let's look at this first. I remember at the beginning I said that two I said that Chung Hung and David in 2019 they proved that graphs of maximum degree delta that exclude Field's graph as a minor have this delta to the 37 bound that we improved. But they actually proved in addition to that, and their proof for that was also reasonable. It wasn't a complicated proof. But in addition, they proved something much stronger. In the series of two or three papers, they proved that every graph that does That doesn't have a KST as a subgraph, and it excludes a fixed minor, so a proper minor closed family with no KST as a subgraph, they prove they are S2, they are S plus 2 colorable with bounded clustering. So let's see what that means when S is 1. When S is 1, we are excluding K1T. So we are looking at the graphs of maximum degree T. So we are going back to the problems that this talk was about. So that case is solved. We have a simple proof and we have a Is solved, we have a simpler proof, and we have a better bound than what they had. Although, by the way, there's an obvious upper problem that I didn't even mention. What is the correct bound here? We did know of some lower bound, which I forgot. It wasn't one, this lower bound that we know. It was some polynomial in delta. Maybe two, third, David will remember, I think. Or somebody in the audience know. I forgot what it was. So, first obvious problem was the best bound on delta for the problems that I, for the results that I talked about. But here is for me a more interesting problem, is this S. interesting problem is this s plus two result first of all uh so i would like so we have a simple proof with a good bound and s is one so that that was my talk what about simple proof for all s bigger than or equal to two because this proof that i have is about 60 to 80 page long and not easy to read okay so i would like some to figure out can we have a simpler proof of that uh and And that's one. And the second open problem is actually not a simple. So, for this, we know the result. I would like a simple proof. This one, we don't know the result. So, let's go back to the apex minor free graphs, even planar graphs. Okay, again, we are looking at these graphs, excluding KST. When S is 1, we have all these results that I talked about. That's the case when we are talking about maximum degree delta. When S is When S is what about other S? I want to know: are these graph classes, are they actually, forget this S plus 2, are they S plus 1 colorable in the case when S is 2 or 3? We know from the results, some preliminary results. I talked about them for those of you who were in Waterloo in the fall in a meeting that Luke organized. I talked about this. I talked about this. For example, how do you get S plus 2, S plus 1 coloring with bounded cluster sizes for graphs, apex minor free graphs that exclude KST? But the proof is such that it only works if S is at least 4. And S plus 1 is tight for the number of colors. This cannot be improved for apex minor free graphs. S plus, when S is 1, this is 1. When s is one, this is not true. This gives two coloring. So here, s plus two is tight, and we know that result. What we don't know, if you have an apex minor free graph and you exclude k2t or k3t, are these graphs, what is this, three colorable or four colorable? So that's my final open problem. Thank you all. Okay, thank you, Vida. We could clap, I'll count to three, maybe. could clap i'll count to three maybe you can unmute mute you and join me in clapping one two three okay so we are a little bit late but still we can go with a question or two anybody has a question or remark I was I was maybe I can say I was looking at your proof when you said how the coloring propagates through consecutive layers down. You could eliminate that easier if you just use red and green first and then red and blue next and then red and green again. So that would be a little bit easier. Not much, but still, yeah. Okay, okay. Okay, okay, good. We didn't, we did even something a little bit more complicated in a proof that it's written. It's just when I was thinking how to present it, that yeah, but that will also work. Thank you. That's what we do in the paper. What do we do in the paper? Yes, I know, I know, but for drawing pictures, yes, I know we alternated, but for drawing pictures, this was easier rather than this diagonal partition that we end up with at the end. The end. Yep. Okay, so Vida, thank you again. And thank you. Let me try to.