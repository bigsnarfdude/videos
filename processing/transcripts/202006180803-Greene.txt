Yeah, yes. So yeah, so I was asked to share a little bit about Menubot. It's the way we're going to write this white paper. I'll give you an ultra brief history of it. And I was going to do a tech demo, but I ended up going with slides just so I didn't have to flip back and forth. Before I started this, I was going to send something to chat in case people wanted to follow along, which I then did not succeed in doing. So if someone wants to send the white paper link, oh, wait, here. Send the white paper link. Oh, wait, here we go. I can try to find it. There we go. So that's the white paper link if you want to follow along in the GitHub repo. Oh, now I've even figured out how to keep the chat up. So if you want to ask questions, please also interrupt me. So Manubot actually started because we first decided to do something and had no idea how to do it, as most things in our lab start. So I tweeted this thing about sort of reading the deep learning literature and Literature, and we just decided to write on GitHub. And we knew we wanted to write in Markdown, and we didn't want to manage identifier, like you know, paper identifiers in a painful way across people. So that's kind of what ended up leading to the manual bot infrastructure. This has already been used to write papers. So we wrote this paper, which was the one we initially set out to write. Since it's on GitHub, you can actually track contributions like to a pretty atomic level. So this is, I believe, number of, this is number of words added over. Number of this is number of words added over time on the review. So we will be able to do exactly the same type of plot for the white paper we're about to write. So you can have your contributions in a visually appealing format. We were kind of surprised because we wrote this paper and then shared it. And at the end of the year, this like 2017 in review came out in Nature. And it turned out that the paper we wrote with Manabot, which is this one here, if you can see my mouse. If you can see my mouse, was actually the most downloaded paper of all of 2017, the most downloaded preprint of all of 2017 on BioRxiv. So that was kind of fun. So how does Manubot work? So the software that we used to build that, we then made into this independent package called Manubot. This is actually a screenshot of the white paper that we're going to be writing here. So you can go to the GitHub repository. I suspect many of you have used GitHub in the past. If you have not used GitHub, it is a version control system. A version control system for often used in software development. And so, this is the view of the website as of yesterday. There's a whole bunch of directories you don't have to worry about for the most part, but there's a few things you'll want to take note of. One is the content directory. So essentially, all of the writing will pretty much happen in the content directory. And then the other thing that's probably potentially useful is this usage guide. So if you're like, I want to add a figure, or I want to add a reference, or whatever kind of element you might want to add to the paper. kind of element you might want to add to the paper, the usage guide is likely to have the example of how you would do that. So usage and content. If we drill into content, the way Manubot works, I need to move the chat window off of my screenshot. So the way Manubot works is essentially it looks for markdown files that start with a number, and it essentially compiles them in order into a document. And so that means Document. And so that means there's sort of this front matter part, the back matter part. So these are kind of, they handle references in the back matter and kind of author information and title on the front matter. But then everything between that is essentially a part of the paper. And so for you can see for many parts of the white paper that we're going to be writing, we've sort of initialized these markdown files, and now we'll just need to fill them in with writing. And so if you click on it on these, GitHub will actually show them to you. Show them to you. So, this is just the current content of the chat box is again over this. I didn't, I think this is the methods one. Yeah, the overview of common analytical methods based on what we thought we might hear before we started this. Now we'll obviously have the table and sort of update it. And then if you want to edit it, oh, my people's pictures are over here. You can mouse over and click on this edit button. And it will, if you do that, That if you click on the edit button, you'll then get this screen where you can actually go in and write text. And so you can do all of this without any using git on the command line for those of you who hate git on the command line. For those of you who don't mind git on the command line, you can also do all of this using git on the command line. And then once you make changes, there's a button on GitHub below this to file a pull request. And so once you file a pull request, people can look at that pull request, they can comment that pull request, they can make specific suggestions. And then when Suggestions. And then when people generally agree that it's appropriate, then it gets merged in, and then it becomes part of the final document that gets displayed. Let's see. And then this was just mentioning the usage thing. So, oh, wait, citations. Sorry, within citations. So the only other thing to know is you may be used to maintaining a library with Mendeley or Zotero or whatever your citation tool of choice is. One of the things I love about Manubot is site. things I love about Manubot is cite by persistent identifier. So you can actually cite by DOIs, you can cite by PubMed Central IDs, you can cite by PubMed IDs, archive IDs, the things that people generally cite by. And this means that we can all work using kind of common references without having to sort of merge our identifier libraries. And so now I'm going to try to change what I'm sharing to. Change what I'm sharing to let's see. I moved this, and okay, there we go. And so what you will then see, hopefully, is when you go back to, when you go to the repository, the only other thing to note is you can click this manuscript HTML link or PDF link, and it'll take you to the current version of the manuscript. And so you can fill in author information. And so you can fill in author information. You can see what's been written. It should more or less look like a paper as it starts to come together. At this point, it doesn't necessarily look like a paper, but I promise it will. So with that, let's see. Conflicts. Yeah, so merge conflicts. What we usually do is since we do development via pull requests, we would resolve that at the time the pull request is being. At the time the pull request is being merged. So it essentially is like merging a git diff. Generally, we try to put in these headers. So like the current document has a fair number of headers there to reduce the biggest time for merge conflicts is at the very beginning of authoring a manuscript where you're sort of adding new element, many new elements simultaneously, and it's not clear where they should fit together for Git. So hopefully adding these headers will make that much, much, much less painful. Is there a front end to Manubot? Whatever, so the Manubot front end at this point is essentially whatever your favorite text editor is or the GitHub text editing user interface, which I know is not the answer you want, but is the answer there is. What's the best approach to using figures? So Let's see. So, yeah, so there's two things here. So, one is the best approach to including figures. So, it depends. What we like to do for our research papers is to have a separate analysis repo in GitHub where the figures are generated, and then to include the figures from that repo using the commit hash URL. So that way you sort of know what's there. And while you're writing the paper, you can usually write against master. Can usually write against master on that repository and see what kind of comes to pass. So the figures would get updated every time there's a new build. So yeah, so an insert a link to our markdown or markdown. So I would rec, you can insert code. So if you look through usage, there are ways to put code into Manubot. But I would, for figures, I would usually recommend including like the Recommend including the output of the code as the like that should be what you reference as the figure. Pull first before any changes. Yeah, so we've started recommending, we have an ongoing review led by a postdoc in my group of sort of the emerging literature around COVID-19. And that's been the first point where we've had a bunch of people get involved who do not have a lot of GitHub experience. And what we've learned is using GitHub as the editing. Is using GitHub as the editing interface is really, really helpful to avoiding a lot of merge conflicts. So I would, you know, for those of you who are willing to write in GitHub, I would really strongly recommend using the GitHub interface to edit. Let's see, what formats? So GitHub's document conversion under the hood is based on Pandoc. Based on Pandoc. And so because it's based on Pandoc, that means you can export to many, many things. For most journal submissions, what we do is at the sort of initial review time, we've been exporting to PDF because the PDF is generally more visually appealing than whatever is produced by a journal submission system. And then for the final submission to the journal, you can do anything that Pandoc supports, but journals seem to be. Anything that Pandoc supports, but journals seem to be pretty good at dealing with Word. So we've been using the Pandoc-produced Word file. I believe Pandoc has now upgraded its JATS support, but most journals, despite using JATS to do typesetting, don't actually allow submission of JATS. But if Pandoc supports it, you can export to it. That was all the questions. Yeah. And if there are any other questions, feel free to move it over to the Slack. I think next we're going to move on to a discussion. To move on to a discussion about the white paper itself.